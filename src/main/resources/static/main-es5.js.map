{"version":3,"sources":["$_lazy_route_resource lazy namespace object","src/app/afficher-contact/afficher-contact.component.html","src/app/app.component.html","src/app/board-admin/board-admin.component.html","src/app/board-moderator/board-moderator.component.html","src/app/board-user/board-user.component.html","src/app/contact/add-benificaire-dialog.html","src/app/contact/contact.component.html","src/app/display-contact-details/display-contact-details.component.html","src/app/entry-contact/entry-contact.component.html","src/app/header/header.component.html","src/app/home/home.component.html","src/app/login/login.component.html","src/app/menu/menu.component.html","src/app/profile/profile.component.html","src/app/prospects/prospects.component.html","src/app/register/register.component.html","node_modules/tslib/tslib.es6.js","src/app/_helpers/auth.interceptor.ts","src/app/_services/auth.service.ts","src/app/_services/contact.service.ts","src/app/_services/pays.service.ts","src/app/_services/token-storage.service.ts","src/app/_services/user.service.ts","src/app/afficher-contact/afficher-contact.component.css","src/app/afficher-contact/afficher-contact.component.ts","src/app/app-routing.module.ts","src/app/app.component.css","src/app/app.component.ts","src/app/app.module.ts","src/app/board-admin/board-admin.component.css","src/app/board-admin/board-admin.component.ts","src/app/board-moderator/board-moderator.component.css","src/app/board-moderator/board-moderator.component.ts","src/app/board-user/board-user.component.css","src/app/board-user/board-user.component.ts","src/app/contact/AddBeneficiaireDialogComponent.ts","src/app/contact/contact.component.css","src/app/contact/contact.component.ts","src/app/display-contact-details/display-contact-details.component.css","src/app/display-contact-details/display-contact-details.component.ts","src/app/entry-contact/entry-contact.component.css","src/app/entry-contact/entry-contact.component.ts","src/app/header/header.component.css","src/app/header/header.component.ts","src/app/home/home.component.css","src/app/home/home.component.ts","src/app/login/login.component.css","src/app/login/login.component.ts","src/app/menu/menu.component.css","src/app/menu/menu.component.ts","src/app/models/contact.model.ts","src/app/profile/profile.component.css","src/app/profile/profile.component.ts","src/app/prospects/prospects.component.css","src/app/prospects/prospects.component.ts","src/app/register/register.component.css","src/app/register/register.component.ts","src/environments/environment.ts","src/main.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;AAAA,aAAA,wBAAA,CAAA,GAAA,EAAA;AACA;AACA;AACA,aAAA,OAAA,CAAA,OAAA,GAAA,IAAA,CAAA,YAAA;AACA,YAAA,CAAA,GAAA,IAAA,KAAA,CAAA,yBAAA,GAAA,GAAA,GAAA,CAAA;AACA,QAAA,CAAA,CAAA,IAAA,GAAA,kBAAA;AACA,cAAA,CAAA;AACE,OAJF,CAAA;AAKA;;AACA,IAAA,wBAAA,CAAA,IAAA,GAAA,YAAA;AAA4C,aAAA,EAAA;AAAW,KAAvD;;AACA,IAAA,wBAAA,CAAA,OAAA,GAAA,wBAAA;AACA,IAAA,MAAA,CAAA,OAAA,GAAA,wBAAA;AACA,IAAA,wBAAA,CAAA,EAAA,GAAA,yCAAA;;;;;;;;;;;;;;;;ACZA,IAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA;AAAe;;;AAAA,IAAA,mBAAA,CAAA,SAAA,CAAA,GAAA,kCAAA;;;;;;;;;;;;;;;;ACAf,IAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA;AAAe;;;AAAA,IAAA,mBAAA,CAAA,SAAA,CAAA,GAAA,0gBAAA;;;;;;;;;;;;;;;;ACAf,IAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA;AAAe;;;AAAA,IAAA,mBAAA,CAAA,SAAA,CAAA,GAAA,4GAAA;;;;;;;;;;;;;;;;ACAf,IAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA;AAAe;;;AAAA,IAAA,mBAAA,CAAA,SAAA,CAAA,GAAA,4GAAA;;;;;;;;;;;;;;;;ACAf,IAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA;AAAe;;;AAAA,IAAA,mBAAA,CAAA,SAAA,CAAA,GAAA,4GAAA;;;;;;;;;;;;;;;;ACAf,IAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA;AAAe;;;AAAA,IAAA,mBAAA,CAAA,SAAA,CAAA,GAAA,0iLAAA;;;;;;;;;;;;;;;;ACAf,IAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA;AAAe;;;AAAA,IAAA,mBAAA,CAAA,SAAA,CAAA,GAAA,sm+BAAA;;;;;;;;;;;;;;;;ACAf,IAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA;AAAe;;;AAAA,IAAA,mBAAA,CAAA,SAAA,CAAA,GAAA,goeAAA;;;;;;;;;;;;;;;;ACAf,IAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA;AAAe;;;AAAA,IAAA,mBAAA,CAAA,SAAA,CAAA,GAAA,gtCAAA;;;;;;;;;;;;;;;;ACAf,IAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA;AAAe;;;AAAA,IAAA,mBAAA,CAAA,SAAA,CAAA,GAAA,+2GAAA;;;;;;;;;;;;;;;;ACAf,IAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA;AAAe;;;AAAA,IAAA,mBAAA,CAAA,SAAA,CAAA,GAAA,4GAAA;;;;;;;;;;;;;;;;ACAf,IAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA;AAAe;;;AAAA,IAAA,mBAAA,CAAA,SAAA,CAAA,GAAA,8tDAAA;;;;;;;;;;;;;;;;ACAf,IAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA;AAAe;;;AAAA,IAAA,mBAAA,CAAA,SAAA,CAAA,GAAA,q1JAAA;;;;;;;;;;;;;;;;ACAf,IAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA;AAAe;;;AAAA,IAAA,mBAAA,CAAA,SAAA,CAAA,GAAA,6nBAAA;;;;;;;;;;;;;;;;ACAf,IAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA;AAAe;;;AAAA,IAAA,mBAAA,CAAA,SAAA,CAAA,GAAA,uprBAAA;;;;;;;;;;;;;;;;ACAf,IAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA;AAAe;;;AAAA,IAAA,mBAAA,CAAA,SAAA,CAAA,GAAA,iuFAAA;;;;;;;;;;;;;;;;ACAf,IAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA;AAAA;;;AAAA,IAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,EAAA,WAAA,EAAA,YAAA;AAAA,aAAA,SAAA;AAAA,KAAA;AAAA;;;AAAA,IAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,EAAA,UAAA,EAAA,YAAA;AAAA,aAAA,OAAA;AAAA,KAAA;AAAA;;;AAAA,IAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,EAAA,QAAA,EAAA,YAAA;AAAA,aAAA,MAAA;AAAA,KAAA;AAAA;;;AAAA,IAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,EAAA,YAAA,EAAA,YAAA;AAAA,aAAA,UAAA;AAAA,KAAA;AAAA;;;AAAA,IAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,EAAA,SAAA,EAAA,YAAA;AAAA,aAAA,OAAA;AAAA,KAAA;AAAA;;;AAAA,IAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,EAAA,YAAA,EAAA,YAAA;AAAA,aAAA,UAAA;AAAA,KAAA;AAAA;;;AAAA,IAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,EAAA,WAAA,EAAA,YAAA;AAAA,aAAA,SAAA;AAAA,KAAA;AAAA;;;AAAA,IAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,EAAA,aAAA,EAAA,YAAA;AAAA,aAAA,WAAA;AAAA,KAAA;AAAA;;;AAAA,IAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,EAAA,cAAA,EAAA,YAAA;AAAA,aAAA,YAAA;AAAA,KAAA;AAAA;;;AAAA,IAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,EAAA,UAAA,EAAA,YAAA;AAAA,aAAA,QAAA;AAAA,KAAA;AAAA;;;AAAA,IAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,EAAA,QAAA,EAAA,YAAA;AAAA,aAAA,MAAA;AAAA,KAAA;AAAA;;;AAAA,IAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,EAAA,UAAA,EAAA,YAAA;AAAA,aAAA,QAAA;AAAA,KAAA;AAAA;;;AAAA,IAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,EAAA,gBAAA,EAAA,YAAA;AAAA,aAAA,cAAA;AAAA,KAAA;AAAA;;;AAAA,IAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,EAAA,SAAA,EAAA,YAAA;AAAA,aAAA,OAAA;AAAA,KAAA;AAAA;;;AAAA,IAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,EAAA,kBAAA,EAAA,YAAA;AAAA,aAAA,gBAAA;AAAA,KAAA;AAAA;;;AAAA,IAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,EAAA,kBAAA,EAAA,YAAA;AAAA,aAAA,gBAAA;AAAA,KAAA;AAAA;;;AAAA,IAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,EAAA,eAAA,EAAA,YAAA;AAAA,aAAA,aAAA;AAAA,KAAA;AAAA;;;AAAA,IAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,EAAA,sBAAA,EAAA,YAAA;AAAA,aAAA,oBAAA;AAAA,KAAA;AAAA;;;AAAA,IAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,EAAA,cAAA,EAAA,YAAA;AAAA,aAAA,YAAA;AAAA,KAAA;AAAA;;;AAAA,IAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,EAAA,iBAAA,EAAA,YAAA;AAAA,aAAA,eAAA;AAAA,KAAA;AAAA;;;;;;;;;;;;;;;AAcA;;;AAEA,QAAA,cAAA,GAAA,uBAAA,CAAA,EAAA,CAAA,EAAA;AACA,MAAA,cAAA,GAAA,MAAA,CAAA,cAAA,IACA;AAAU,QAAA,SAAA,EAAA;AAAV,mBAA0B,KAA1B,IAA0B,UAAA,CAAA,EAAA,CAAA,EAAA;AAAsC,QAAA,CAAA,CAAA,SAAA,GAAA,CAAA;AAAmB,OADnF,IAEA,UAAA,CAAA,EAAA,CAAA,EAAA;AAAyB,aAAA,IAAA,CAAA,IAAA,CAAA;AAAA,cAAA,CAAA,CAAA,cAAA,CAAA,CAAA,CAAA,EAAA,CAAA,CAAA,CAAA,CAAA,GAAA,CAAA,CAAA,CAAA,CAAA;AAAA;AAAuD,OAFhF;;AAGA,aAAA,cAAA,CAAA,CAAA,EAAA,CAAA,CAAA;AACA,KALA;;AAOO,aAAA,SAAA,CAAA,CAAA,EAAA,CAAA,EAAA;AACP,MAAA,cAAA,CAAA,CAAA,EAAA,CAAA,CAAA;;AACA,eAAA,EAAA,GAAA;AAAmB,aAAA,WAAA,GAAA,CAAA;AAAsB;;AACzC,MAAA,CAAA,CAAA,SAAA,GAAA,CAAA,KAAA,IAAA,GAAA,MAAA,CAAA,MAAA,CAAA,CAAA,CAAA,IAAA,EAAA,CAAA,SAAA,GAAA,CAAA,CAAA,SAAA,EAAA,IAAA,EAAA,EAAA,CAAA;AACA;;AAEO,QAAA,OAAA,GAAA,oBAAA;AACP,MAAA,OAAA,GAAA,MAAA,CAAA,MAAA,IAAA,SAAA,QAAA,CAAA,CAAA,EAAA;AACA,aAAA,IAAA,CAAA,EAAA,CAAA,GAAA,CAAA,EAAA,CAAA,GAAA,SAAA,CAAA,MAAA,EAAgD,CAAA,GAAA,CAAhD,EAAuD,CAAA,EAAvD,EAAuD;AACvD,UAAA,CAAA,GAAA,SAAA,CAAA,CAAA,CAAA;;AACA,eAAA,IAAA,CAAA,IAAA,CAAA;AAAA,gBAAA,MAAA,CAAA,SAAA,CAAA,cAAA,CAAA,IAAA,CAAA,CAAA,EAAA,CAAA,CAAA,EAAA,CAAA,CAAA,CAAA,CAAA,GAAA,CAAA,CAAA,CAAA,CAAA;AAAA;AACA;;AACA,eAAA,CAAA;AACA,OANA;;AAOA,aAAA,OAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA;AACA,KATO;;AAWA,aAAA,MAAA,CAAA,CAAA,EAAA,CAAA,EAAA;AACP,UAAA,CAAA,GAAA,EAAA;;AACA,WAAA,IAAA,CAAA,IAAA,CAAA;AAAA,YAAA,MAAA,CAAA,SAAA,CAAA,cAAA,CAAA,IAAA,CAAA,CAAA,EAAA,CAAA,KAAA,CAAA,CAAA,OAAA,CAAA,CAAA,IAAA,CAAA,EACA,CAAA,CAAA,CAAA,CAAA,GAAA,CAAA,CAAA,CAAA,CAAA;AADA;;AAEA,UAAA,CAAA,IAAA,IAAA,IAAA,OAAA,MAAA,CAAA,qBAAA,KAAA,UAAA,EACA,KAAA,IAAA,CAAA,GAAA,CAAA,EAAA,CAAA,GAAA,MAAA,CAAA,qBAAA,CAAA,CAAA,CAAA,EAA4D,CAAA,GAAA,CAAA,CAAA,MAA5D,EAA0E,CAAA,EAA1E,EAA0E;AAC1E,YAAA,CAAA,CAAA,OAAA,CAAA,CAAA,CAAA,CAAA,CAAA,IAAA,CAAA,IAAA,MAAA,CAAA,SAAA,CAAA,oBAAA,CAAA,IAAA,CAAA,CAAA,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,EACA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,GAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA;AACA;AACA,aAAA,CAAA;AACA;;AAEO,aAAA,UAAA,CAAA,UAAA,EAAA,MAAA,EAAA,GAAA,EAAA,IAAA,EAAA;AACP,UAAA,CAAA,GAAA,SAAA,CAAA,MAAA;AAAA,UAAA,CAAA,GAAA,CAAA,GAAA,CAAA,GAAA,MAAA,GAAA,IAAA,KAAA,IAAA,GAAA,IAAA,GAAA,MAAA,CAAA,wBAAA,CAAA,MAAA,EAAA,GAAA,CAAA,GAAA,IAAA;AAAA,UAAA,CAAA;AACA,UAAA,OAAA,OAAA,KAAA,QAAA,IAAA,OAAA,OAAA,CAAA,QAAA,KAAA,UAAA,EAAA,CAAA,GAAA,OAAA,CAAA,QAAA,CAAA,UAAA,EAAA,MAAA,EAAA,GAAA,EAAA,IAAA,CAAA,CAAA,KACA,KAAA,IAAA,CAAA,GAAA,UAAA,CAAA,MAAA,GAAA,CAAA,EAA4C,CAAA,IAAA,CAA5C,EAAoD,CAAA,EAApD;AAAoD,YAAA,CAAA,GAAA,UAAA,CAAA,CAAA,CAAA,EAAA,CAAA,GAAA,CAAA,CAAA,GAAA,CAAA,GAAA,CAAA,CAAA,CAAA,CAAA,GAAA,CAAA,GAAA,CAAA,GAAA,CAAA,CAAA,MAAA,EAAA,GAAA,EAAA,CAAA,CAAA,GAAA,CAAA,CAAA,MAAA,EAAA,GAAA,CAAA,KAAA,CAAA;AAApD;AACA,aAAA,CAAA,GAAA,CAAA,IAAA,CAAA,IAAA,MAAA,CAAA,cAAA,CAAA,MAAA,EAAA,GAAA,EAAA,CAAA,CAAA,EAAA,CAAA;AACA;;AAEO,aAAA,OAAA,CAAA,UAAA,EAAA,SAAA,EAAA;AACP,aAAA,UAAA,MAAA,EAAA,GAAA,EAAA;AAAmC,QAAA,SAAA,CAAA,MAAA,EAAA,GAAA,EAAA,UAAA,CAAA;AAAoC,OAAvE;AACA;;AAEO,aAAA,UAAA,CAAA,WAAA,EAAA,aAAA,EAAA;AACP,UAAA,OAAA,OAAA,KAAA,QAAA,IAAA,OAAA,OAAA,CAAA,QAAA,KAAA,UAAA,EAAA,OAAA,OAAA,CAAA,QAAA,CAAA,WAAA,EAAA,aAAA,CAAA;AACA;;AAEO,aAAA,SAAA,CAAA,OAAA,EAAA,UAAA,EAAA,CAAA,EAAA,SAAA,EAAA;AACP,aAAA,KAAA,CAAA,KAAA,CAAA,GAAA,OAAA,CAAA,EAAA,UAAA,OAAA,EAAA,MAAA,EAAA;AACA,iBAAA,SAAA,CAAA,KAAA,EAAA;AAAmC,cAAA;AAAM,YAAA,IAAA,CAAA,SAAA,CAAA,IAAA,CAAA,KAAA,CAAA,CAAA;AAA+B,WAArC,CAAqC,OAAA,CAAA,EAAA;AAAY,YAAA,MAAA,CAAA,CAAA,CAAA;AAAa;AAAA;;AACjG,iBAAA,QAAA,CAAA,KAAA,EAAA;AAAkC,cAAA;AAAM,YAAA,IAAA,CAAA,SAAA,CAAA,OAAA,CAAA,CAAA,KAAA,CAAA,CAAA;AAAmC,WAAzC,CAAyC,OAAA,CAAA,EAAA;AAAY,YAAA,MAAA,CAAA,CAAA,CAAA;AAAa;AAAA;;AACpG,iBAAA,IAAA,CAAA,MAAA,EAAA;AAA+B,UAAA,MAAA,CAAA,IAAA,GAAA,OAAA,CAAA,MAAA,CAAA,KAAA,CAAA,GAAA,IAAA,CAAA,CAAA,UAAA,OAAA,EAAA;AAAiE,YAAA,OAAA,CAAA,MAAA,CAAA,KAAA,CAAA;AAAyB,WAA1F,EAA0F,IAA1F,CAA0F,SAA1F,EAA0F,QAA1F,CAAA;AAAsH;;AACrJ,QAAA,IAAA,CAAA,CAAA,SAAA,GAAA,SAAA,CAAA,KAAA,CAAA,OAAA,EAAA,UAAA,IAAA,EAAA,CAAA,EAAA,IAAA,EAAA,CAAA;AACK,OALL,CAAA;AAMA;;AAEO,aAAA,WAAA,CAAA,OAAA,EAAA,IAAA,EAAA;AACP,UAAA,CAAA,GAAA;AAAa,QAAA,KAAA,EAAA,CAAb;AAAa,QAAA,IAAA,EAAA,gBAAA;AAA6B,cAAA,CAAA,CAAA,CAAA,CAAA,GAAA,CAAA,EAAA,MAAA,CAAA,CAAA,CAAA,CAAA;AAA0B,iBAAA,CAAA,CAAA,CAAA,CAAA;AAAe,SAAnF;AAAmF,QAAA,IAAA,EAAA,EAAnF;AAAmF,QAAA,GAAA,EAAA;AAAnF,OAAA;AAAA,UAAwG,CAAxG;AAAA,UAAwG,CAAxG;AAAA,UAAwG,CAAxG;AAAA,UAAwG,CAAxG;AACA,aAAA,CAAA,GAAA;AAAgB,QAAA,IAAA,EAAA,IAAA,CAAA,CAAA,CAAhB;AAAgB,iBAAA,IAAA,CAAA,CAAA,CAAhB;AAAgB,kBAAA,IAAA,CAAA,CAAA;AAAhB,OAAA,EAAqE,OAAA,MAAA,KAAA,UAAA,KAAA,CAAA,CAAA,MAAA,CAAA,QAAA,CAAA,GAAA,YAAA;AAAoE,eAAA,IAAA;AAAe,OAAnF,CAArE,EAAwJ,CAAxJ;;AACA,eAAA,IAAA,CAAA,CAAA,EAAA;AAAsB,eAAA,UAAA,CAAA,EAAA;AAAsB,iBAAA,IAAA,CAAA,CAAA,CAAA,EAAA,CAAA,CAAA,CAAA;AAAqB,SAA3C;AAA8C;;AACpE,eAAA,IAAA,CAAA,EAAA,EAAA;AACA,YAAA,CAAA,EAAA,MAAA,IAAA,SAAA,CAAA,iCAAA,CAAA;;AACA,eAAA,CAAA;AAAA,cAAA;AACA,gBAAA,CAAA,GAAA,CAAA,EAAA,CAAA,KAAA,CAAA,GAAA,EAAA,CAAA,CAAA,CAAA,GAAA,CAAA,GAAA,CAAA,CAAA,QAAA,CAAA,GAAA,EAAA,CAAA,CAAA,CAAA,GAAA,CAAA,CAAA,OAAA,CAAA,KAAA,CAAA,CAAA,GAAA,CAAA,CAAA,QAAA,CAAA,KAAA,CAAA,CAAA,IAAA,CAAA,CAAA,CAAA,EAAA,CAAA,CAAA,GAAA,CAAA,CAAA,IAAA,CAAA,IAAA,CAAA,CAAA,CAAA,GAAA,CAAA,CAAA,IAAA,CAAA,CAAA,EAAA,EAAA,CAAA,CAAA,CAAA,CAAA,EAAA,IAAA,EAAA,OAAA,CAAA;AACA,gBAAA,CAAA,GAAA,CAAA,EAAA,CAAA,EAAA,EAAA,GAAA,CAAA,EAAA,CAAA,CAAA,CAAA,GAAA,CAAA,EAAA,CAAA,CAAA,KAAA,CAAA;;AACA,oBAAA,EAAA,CAAA,CAAA,CAAA;AACA,mBAAA,CAAA;AAAA,mBAAA,CAAA;AAAA,gBAAA,CAAA,GAAA,EAAA;AAAuC;;AACvC,mBAAA,CAAA;AAAA,gBAAA,CAAA,CAAA,KAAA;AAAkC,uBAAA;AAAS,kBAAA,KAAA,EAAA,EAAA,CAAA,CAAA,CAAT;AAAS,kBAAA,IAAA,EAAA;AAAT,iBAAA;;AAClC,mBAAA,CAAA;AAAA,gBAAA,CAAA,CAAA,KAAA;AAAkC,gBAAA,CAAA,GAAA,EAAA,CAAA,CAAA,CAAA;AAAW,gBAAA,EAAA,GAAA,CAAA,CAAA,CAAA;AAAU;;AACvD,mBAAA,CAAA;AAAA,gBAAA,EAAA,GAAA,CAAA,CAAA,GAAA,CAAA,GAAA,EAAA;;AAAyC,gBAAA,CAAA,CAAA,IAAA,CAAA,GAAA;;AAAc;;AACvD;AACA,oBAAA,EAAA,CAAA,GAAA,CAAA,CAAA,IAAA,EAAA,CAAA,GAAA,CAAA,CAAA,MAAA,GAAA,CAAA,IAAA,CAAA,CAAA,CAAA,CAAA,MAAA,GAAA,CAAA,CAAA,MAAA,EAAA,CAAA,CAAA,CAAA,KAAA,CAAA,IAAA,EAAA,CAAA,CAAA,CAAA,KAAA,CAAA,CAAA,EAAA;AAA6G,kBAAA,CAAA,GAAA,CAAA;AAAO;AAAU;;AAC9H,oBAAA,EAAA,CAAA,CAAA,CAAA,KAAA,CAAA,KAAA,CAAA,CAAA,IAAA,EAAA,CAAA,CAAA,CAAA,GAAA,CAAA,CAAA,CAAA,CAAA,IAAA,EAAA,CAAA,CAAA,CAAA,GAAA,CAAA,CAAA,CAAA,CAAA,CAAA,EAAA;AAAgF,kBAAA,CAAA,CAAA,KAAA,GAAA,EAAA,CAAA,CAAA,CAAA;AAAiB;AAAO;;AACxG,oBAAA,EAAA,CAAA,CAAA,CAAA,KAAA,CAAA,IAAA,CAAA,CAAA,KAAA,GAAA,CAAA,CAAA,CAAA,CAAA,EAAA;AAAwD,kBAAA,CAAA,CAAA,KAAA,GAAA,CAAA,CAAA,CAAA,CAAA;AAAgB,kBAAA,CAAA,GAAA,EAAA;AAAQ;AAAO;;AACvF,oBAAA,CAAA,IAAA,CAAA,CAAA,KAAA,GAAA,CAAA,CAAA,CAAA,CAAA,EAAA;AAA8C,kBAAA,CAAA,CAAA,KAAA,GAAA,CAAA,CAAA,CAAA,CAAA;;AAAgB,kBAAA,CAAA,CAAA,GAAA,CAAA,IAAA,CAAA,EAAA;;AAAgB;AAAO;;AACrF,oBAAA,CAAA,CAAA,CAAA,CAAA,EAAA,CAAA,CAAA,GAAA,CAAA,GAAA;;AACA,gBAAA,CAAA,CAAA,IAAA,CAAA,GAAA;;AAAiC;AAXjC;;AAaA,YAAA,EAAA,GAAA,IAAA,CAAA,IAAA,CAAA,OAAA,EAAA,CAAA,CAAA;AACS,WAjBT,CAiBS,OAAA,CAAA,EAAA;AAAY,YAAA,EAAA,GAAA,CAAA,CAAA,EAAA,CAAA,CAAA;AAAa,YAAA,CAAA,GAAA,CAAA;AAAS,WAjB3C,SAiB2C;AAAU,YAAA,CAAA,GAAA,CAAA,GAAA,CAAA;AAAW;AAjBhE;;AAkBA,YAAA,EAAA,CAAA,CAAA,CAAA,GAAA,CAAA,EAAA,MAAA,EAAA,CAAA,CAAA,CAAA;AAAmC,eAAA;AAAS,UAAA,KAAA,EAAA,EAAA,CAAA,CAAA,CAAA,GAAA,EAAA,CAAA,CAAA,CAAA,GAAA,KAAA,CAAT;AAAS,UAAA,IAAA,EAAA;AAAT,SAAA;AACnC;AACA;;AAEO,aAAA,YAAA,CAAA,CAAA,EAAA,OAAA,EAAA;AACP,WAAA,IAAA,CAAA,IAAA,CAAA;AAAA,YAAA,CAAA,OAAA,CAAA,cAAA,CAAA,CAAA,CAAA,EAAA,OAAA,CAAA,CAAA,CAAA,GAAA,CAAA,CAAA,CAAA,CAAA;AAAA;AACA;;AAEO,aAAA,QAAA,CAAA,CAAA,EAAA;AACP,UAAA,CAAA,GAAA,OAAA,MAAA,KAAA,UAAA,IAAA,CAAA,CAAA,MAAA,CAAA,QAAA,CAAA;AAAA,UAAA,CAAA,GAAA,CAAA;AACA,UAAA,CAAA,EAAA,OAAA,CAAA,CAAA,IAAA,CAAA,CAAA,CAAA;AACA,aAAA;AACA,QAAA,IAAA,EAAA,gBAAA;AACA,cAAA,CAAA,IAAA,CAAA,IAAA,CAAA,CAAA,MAAA,EAAA,CAAA,GAAA,KAAA,CAAA;AACA,iBAAA;AAAoB,YAAA,KAAA,EAAA,CAAA,IAAA,CAAA,CAAA,CAAA,EAAA,CAApB;AAAoB,YAAA,IAAA,EAAA,CAAA;AAApB,WAAA;AACA;AAJA,OAAA;AAMA;;AAEO,aAAA,MAAA,CAAA,CAAA,EAAA,CAAA,EAAA;AACP,UAAA,CAAA,GAAA,OAAA,MAAA,KAAA,UAAA,IAAA,CAAA,CAAA,MAAA,CAAA,QAAA,CAAA;AACA,UAAA,CAAA,CAAA,EAAA,OAAA,CAAA;AACA,UAAA,CAAA,GAAA,CAAA,CAAA,IAAA,CAAA,CAAA,CAAA;AAAA,UAAA,CAAA;AAAA,UAAA,EAAA,GAAA,EAAA;AAAA,UAAA,CAAA;;AACA,UAAA;AACA,eAAA,CAAA,CAAA,KAAA,KAAA,CAAA,IAAA,CAAA,KAAA,CAAA,KAAA,CAAA,CAAA,CAAA,GAAA,CAAA,CAAA,IAAA,EAAA,EAAA,IAAA;AAAA,UAAA,EAAA,CAAA,IAAA,CAAA,CAAA,CAAA,KAAA;AAAA;AACA,OAFA,CAGA,OAAA,KAAA,EAAA;AAAmB,QAAA,CAAA,GAAA;AAAM,UAAA,KAAA,EAAA;AAAN,SAAA;AAAsB,OAHzC,SAIA;AACA,YAAA;AACA,cAAA,CAAA,IAAA,CAAA,CAAA,CAAA,IAAA,KAAA,CAAA,GAAA,CAAA,CAAA,QAAA,CAAA,CAAA,EAAA,CAAA,CAAA,IAAA,CAAA,CAAA;AACA,SAFA,SAGA;AAAiB,cAAA,CAAA,EAAA,MAAA,CAAA,CAAA,KAAA;AAAsB;AACvC;;AACA,aAAA,EAAA;AACA;;AAEO,aAAA,QAAA,GAAA;AACP,WAAA,IAAA,EAAA,GAAA,EAAA,EAAA,CAAA,GAAA,CAAA,EAA4B,CAAA,GAAA,SAAA,CAAA,MAA5B,EAAkD,CAAA,EAAlD;AACA,QAAA,EAAA,GAAA,EAAA,CAAA,MAAA,CAAA,MAAA,CAAA,SAAA,CAAA,CAAA,CAAA,CAAA,CAAA;AADA;;AAEA,aAAA,EAAA;AACA;;AAEO,aAAA,cAAA,GAAA;AACP,WAAA,IAAA,CAAA,GAAA,CAAA,EAAA,CAAA,GAAA,CAAA,EAAA,EAAA,GAAA,SAAA,CAAA,MAAA,EAAiD,CAAA,GAAA,EAAjD,EAAyD,CAAA,EAAzD;AAAyD,QAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,CAAA,MAAA;AAAzD;;AACA,WAAA,IAAA,CAAA,GAAA,KAAA,CAAA,CAAA,CAAA,EAAA,CAAA,GAAA,CAAA,EAAA,CAAA,GAAA,CAAA,EAAwC,CAAA,GAAA,EAAxC,EAAgD,CAAA,EAAhD;AACA,aAAA,IAAA,CAAA,GAAA,SAAA,CAAA,CAAA,CAAA,EAAA,CAAA,GAAA,CAAA,EAAA,EAAA,GAAA,CAAA,CAAA,MAAA,EAAwD,CAAA,GAAA,EAAxD,EAAgE,CAAA,IAAA,CAAA,EAAhE;AACA,UAAA,CAAA,CAAA,CAAA,CAAA,GAAA,CAAA,CAAA,CAAA,CAAA;AADA;AADA;;AAGA,aAAA,CAAA;AACA;;AAAA;;AAEO,aAAA,OAAA,CAAA,CAAA,EAAA;AACP,aAAA,gBAAA,OAAA,IAAA,KAAA,CAAA,GAAA,CAAA,EAAA,IAAA,IAAA,IAAA,OAAA,CAAA,CAAA,CAAA;AACA;;AAEO,aAAA,gBAAA,CAAA,OAAA,EAAA,UAAA,EAAA,SAAA,EAAA;AACP,UAAA,CAAA,MAAA,CAAA,aAAA,EAAA,MAAA,IAAA,SAAA,CAAA,sCAAA,CAAA;AACA,UAAA,CAAA,GAAA,SAAA,CAAA,KAAA,CAAA,OAAA,EAAA,UAAA,IAAA,EAAA,CAAA;AAAA,UAAA,CAAA;AAAA,UAAA,CAAA,GAAA,EAAA;AACA,aAAA,CAAA,GAAA,EAAA,EAAiB,IAAA,CAAA,MAAA,CAAjB,EAAiB,IAAA,CAAA,OAAA,CAAjB,EAAiB,IAAA,CAAA,QAAA,CAAjB,EAAiB,CAAA,CAAA,MAAA,CAAA,aAAA,CAAA,GAAA,YAAA;AAAsF,eAAA,IAAA;AAAe,OAAtH,EAAsH,CAAtH;;AACA,eAAA,IAAA,CAAA,CAAA,EAAA;AAAsB,YAAA,CAAA,CAAA,CAAA,CAAA,EAAA,CAAA,CAAA,CAAA,CAAA,GAAA,UAAA,CAAA,EAAA;AAAgC,iBAAA,IAAA,OAAA,CAAA,UAAA,CAAA,EAAA,CAAA,EAAA;AAAqC,YAAA,CAAA,CAAA,IAAA,CAAA,CAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,CAAA,IAAA,CAAA,IAAA,MAAA,CAAA,CAAA,EAAA,CAAA,CAAA;AAA4C,WAAjF,CAAA;AAAmF,SAAnH;AAAsH;;AAC5I,eAAA,MAAA,CAAA,CAAA,EAAA,CAAA,EAAA;AAA2B,YAAA;AAAM,UAAA,IAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA;AAAiB,SAAvB,CAAuB,OAAA,CAAA,EAAA;AAAY,UAAA,MAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,EAAA,CAAA,CAAA;AAAsB;AAAA;;AACpF,eAAA,IAAA,CAAA,CAAA,EAAA;AAAsB,QAAA,CAAA,CAAA,KAAA,YAAA,OAAA,GAAA,OAAA,CAAA,OAAA,CAAA,CAAA,CAAA,KAAA,CAAA,CAAA,EAAA,IAAA,CAAA,OAAA,EAAA,MAAA,CAAA,GAAA,MAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,EAAA,CAAA,CAAA;AAAoG;;AAC1H,eAAA,OAAA,CAAA,KAAA,EAAA;AAA6B,QAAA,MAAA,CAAA,MAAA,EAAA,KAAA,CAAA;AAAuB;;AACpD,eAAA,MAAA,CAAA,KAAA,EAAA;AAA4B,QAAA,MAAA,CAAA,OAAA,EAAA,KAAA,CAAA;AAAwB;;AACpD,eAAA,MAAA,CAAA,CAAA,EAAA,CAAA,EAAA;AAA2B,YAAA,CAAA,CAAA,CAAA,CAAA,EAAA,CAAA,CAAA,KAAA,EAAA,EAAA,CAAA,CAAA,MAAA,EAAA,MAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA;AAAyD;AACpF;;AAEO,aAAA,gBAAA,CAAA,CAAA,EAAA;AACP,UAAA,CAAA,EAAA,CAAA;AACA,aAAA,CAAA,GAAA,EAAA,EAAiB,IAAA,CAAA,MAAA,CAAjB,EAAiB,IAAA,CAAA,OAAA,EAAA,UAAA,CAAA,EAAA;AAA4C,cAAA,CAAA;AAAW,OAAvD,CAAjB,EAAwE,IAAA,CAAA,QAAA,CAAxE,EAAwE,CAAA,CAAA,MAAA,CAAA,QAAA,CAAA,GAAA,YAAA;AAAqD,eAAA,IAAA;AAAe,OAA5I,EAA4I,CAA5I;;AACA,eAAA,IAAA,CAAA,CAAA,EAAA,CAAA,EAAA;AAAyB,QAAA,CAAA,CAAA,CAAA,CAAA,GAAA,CAAA,CAAA,CAAA,CAAA,GAAA,UAAA,CAAA,EAAA;AAA6B,iBAAA,CAAA,CAAA,GAAA,CAAA,CAAA,IAAA;AAAoB,YAAA,KAAA,EAAA,OAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAApB;AAAoB,YAAA,IAAA,EAAA,CAAA,KAAA;AAApB,WAAA,GAAoE,CAAA,GAAA,CAAA,CAAA,CAAA,CAAA,GAAA,CAApE;AAAsF,SAAnH,GAAmH,CAAnH;AAAwH;AACjJ;;AAEO,aAAA,aAAA,CAAA,CAAA,EAAA;AACP,UAAA,CAAA,MAAA,CAAA,aAAA,EAAA,MAAA,IAAA,SAAA,CAAA,sCAAA,CAAA;AACA,UAAA,CAAA,GAAA,CAAA,CAAA,MAAA,CAAA,aAAA,CAAA;AAAA,UAAA,CAAA;AACA,aAAA,CAAA,GAAA,CAAA,CAAA,IAAA,CAAA,CAAA,CAAA,IAAA,CAAA,GAAA,OAAA,QAAA,KAAA,UAAA,GAAA,QAAA,CAAA,CAAA,CAAA,GAAA,CAAA,CAAA,MAAA,CAAA,QAAA,CAAA,EAAA,EAAA,CAAA,GAAA,EAAA,EAA2G,IAAA,CAAA,MAAA,CAA3G,EAA2G,IAAA,CAAA,OAAA,CAA3G,EAA2G,IAAA,CAAA,QAAA,CAA3G,EAA2G,CAAA,CAAA,MAAA,CAAA,aAAA,CAAA,GAAA,YAAA;AAAsF,eAAA,IAAA;AAAe,OAAhN,EAAgN,CAAhN,CAAA;;AACA,eAAA,IAAA,CAAA,CAAA,EAAA;AAAsB,QAAA,CAAA,CAAA,CAAA,CAAA,GAAA,CAAA,CAAA,CAAA,CAAA,IAAA,UAAA,CAAA,EAAA;AAA8B,iBAAA,IAAA,OAAA,CAAA,UAAA,OAAA,EAAA,MAAA,EAAA;AAAgD,YAAA,CAAA,GAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,EAAA,MAAA,CAAA,OAAA,EAAA,MAAA,EAAA,CAAA,CAAA,IAAA,EAAA,CAAA,CAAA,KAAA,CAAA;AAAyD,WAAzG,CAAA;AAA2G,SAAzI;AAA4I;;AAClK,eAAA,MAAA,CAAA,OAAA,EAAA,MAAA,EAAA,CAAA,EAAA,CAAA,EAAA;AAA4C,QAAA,OAAA,CAAA,OAAA,CAAA,CAAA,EAAA,IAAA,CAAA,UAAA,CAAA,EAAA;AAAsC,UAAA,OAAA,CAAA;AAAU,YAAA,KAAA,EAAA,CAAV;AAAU,YAAA,IAAA,EAAA;AAAV,WAAA,CAAA;AAAkC,SAAxE,EAAwE,MAAxE;AAAkF;AAC9H;;AAEO,aAAA,oBAAA,CAAA,MAAA,EAAA,GAAA,EAAA;AACP,UAAA,MAAA,CAAA,cAAA,EAAA;AAAgC,QAAA,MAAA,CAAA,cAAA,CAAA,MAAA,EAAA,KAAA,EAAA;AAAuC,UAAA,KAAA,EAAA;AAAvC,SAAA;AAAwD,OAAxF,MAAwF;AAAO,QAAA,MAAA,CAAA,GAAA,GAAA,GAAA;AAAkB;;AACjH,aAAA,MAAA;AACA;;AAAA;;AAEO,aAAA,YAAA,CAAA,GAAA,EAAA;AACP,UAAA,GAAA,IAAA,GAAA,CAAA,UAAA,EAAA,OAAA,GAAA;AACA,UAAA,MAAA,GAAA,EAAA;AACA,UAAA,GAAA,IAAA,IAAA,EAAA,KAAA,IAAA,CAAA,IAAA,GAAA;AAAA,YAAA,MAAA,CAAA,cAAA,CAAA,IAAA,CAAA,GAAA,EAAA,CAAA,CAAA,EAAA,MAAA,CAAA,CAAA,CAAA,GAAA,GAAA,CAAA,CAAA,CAAA;AAAA;AACA,MAAA,MAAA,CAAA,OAAA,GAAA,GAAA;AACA,aAAA,MAAA;AACA;;AAEO,aAAA,eAAA,CAAA,GAAA,EAAA;AACP,aAAA,GAAA,IAAA,GAAA,CAAA,UAAA,GAAA,GAAA,GAAA;AAA4C,QAAA,OAAA,EAAA;AAA5C,OAAA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC7LA,QAAM,gBAAgB,GAAG,eAAzB,C,CAAgD;AAChD;;AAGA,QAAa,eAAb;AAAA;AAAA;AACE,+BAAoB,KAApB,EAA8C;AAAA;;AAA1B,aAAA,KAAA,GAAA,KAAA;AAA+B;;AADrD;AAAA;AAAA,kCAGY,GAHZ,EAGmC,IAHnC,EAGoD;AAChD,cAAI,OAAO,GAAG,GAAd;AACA,cAAM,KAAK,GAAG,KAAK,KAAL,CAAW,QAAX,EAAd;;AACA,cAAI,KAAK,IAAI,IAAb,EAAmB;AACjB;AACA,YAAA,OAAO,GAAG,GAAG,CAAC,KAAJ,CAAU;AAAE,cAAA,OAAO,EAAE,GAAG,CAAC,OAAJ,CAAY,GAAZ,CAAgB,gBAAhB,EAAkC,YAAY,KAA9C;AAAX,aAAV,CAAV,CAFiB,CAIjB;AACA;AACD;;AACD,iBAAO,IAAI,CAAC,MAAL,CAAY,OAAZ,CAAP;AACD;AAdH;;AAAA;AAAA,OAAA;;;;cAC6B,4DAAA,CAAA,qBAAA;;;;AADhB,IAAA,eAAe,GAAA,kCAAA,CAAA,YAAA,CAAA,CAAA,CAD3B,MAAA,CAAA,0CAAA,CAAA,YAAA,CAAA,CAAA,EAC2B,CAAA,EAAf,eAAe,CAAf;AAiBN,QAAM,wBAAwB,GAAG,CACtC;AAAE,MAAA,OAAO,EAAE,iDAAA,CAAA,mBAAA,CAAX;AAA8B,MAAA,QAAQ,EAAE,eAAxC;AAAyD,MAAA,KAAK,EAAE;AAAhE,KADsC,CAAjC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACvBP,QAAM,QAAQ,GAAG,iCAAjB;AAEA,QAAM,WAAW,GAAG;AAClB,MAAA,OAAO,EAAE,IAAI,iDAAA,CAAA,aAAA,CAAJ,CAAgB;AAAE,wBAAgB;AAAlB,OAAhB;AADS,KAApB;;AAOA,QAAa,WAAb;AAAA;AAAA;AAEE,2BAAoB,IAApB,EAAoC;AAAA;;AAAhB,aAAA,IAAA,GAAA,IAAA;AAAqB;;AAF3C;AAAA;AAAA,8BAIQ,WAJR,EAImB;AACf,iBAAO,KAAK,IAAL,CAAU,IAAV,CAAe,QAAQ,GAAG,QAA1B,EAAoC;AACzC,YAAA,QAAQ,EAAE,WAAW,CAAC,QADmB;AAEzC,YAAA,QAAQ,EAAE,WAAW,CAAC;AAFmB,WAApC,EAGJ,WAHI,CAAP;AAID;AATH;AAAA;AAAA,iCAWW,IAXX,EAWe;AACX,iBAAO,KAAK,IAAL,CAAU,IAAV,CAAe,QAAQ,GAAG,QAA1B,EAAoC;AACzC,YAAA,QAAQ,EAAE,IAAI,CAAC,QAD0B;AAEzC,YAAA,KAAK,EAAE,IAAI,CAAC,KAF6B;AAGzC,YAAA,QAAQ,EAAE,IAAI,CAAC;AAH0B,WAApC,EAIJ,WAJI,CAAP;AAKD;AAjBH;;AAAA;AAAA,OAAA;;;;cAE4B,iDAAA,CAAA,YAAA;;;;AAFf,IAAA,WAAW,GAAA,kCAAA,CAAA,YAAA,CAAA,CAAA,CAHvB,MAAA,CAAA,0CAAA,CAAA,YAAA,CAAA,CAAA,CAAW;AACV,MAAA,UAAU,EAAE;AADF,KAAX,CAGuB,CAAA,EAAX,WAAW,CAAX;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACPb,QAAM,WAAW,GAAG;AAClB,MAAA,OAAO,EAAE,IAAI,iDAAA,CAAA,aAAA,CAAJ,CAAgB;AAAE,wBAAgB;AAAlB,OAAhB;AADS,KAApB;;AAQA,QAAa,cAAb;AAAA;AAAA;AAUE,8BAAoB,IAApB,EAAoC;AAAA;;AAAhB,aAAA,IAAA,GAAA,IAAA;AAPZ,aAAA,WAAA,GAAc,mCAAd;AAEA,aAAA,WAAA,GAAc;AACpB,UAAA,OAAO,EAAE,IAAI,iDAAA,CAAA,aAAA,CAAJ,CAAgB;AAAE,4BAAgB;AAAlB,WAAhB;AADW,SAAd;AAKiC;;AAV3C;AAAA;AAAA,iCAYW,OAZX,EAYkB;AAEd,iBAAO,KAAK,IAAL,CAAU,IAAV,CAAe,KAAK,WAAL,GAAmB,SAAlC,EAA6C,OAA7C,EAAqD,KAAK,WAA1D,CAAP;AACD;AAfH;AAAA;AAAA,sCAiBa;AACT,iBAAO,KAAK,IAAL,CAAU,GAAV,CAAyB,KAAK,WAAL,GAAmB,MAA5C,CAAP;AACD;AAnBH;AAAA;AAAA,iCAsBW,SAtBX,EAsByB;AACrB,cAAM,KAAK,aAAM,KAAK,WAAX,cAA0B,SAA1B,CAAX;AACA,iBAAO,KAAK,IAAL,CAAU,GAAV,CAAuB,KAAvB,CAAP;AACD;AAzBH;;AAAA;AAAA,OAAA;;;;cAU4B,iDAAA,CAAA,YAAA;;;;AAVf,IAAA,cAAc,GAAA,kCAAA,CAAA,YAAA,CAAA,CAAA,CAH1B,MAAA,CAAA,0CAAA,CAAA,YAAA,CAAA,CAAA,CAAW;AACV,MAAA,UAAU,EAAE;AADF,KAAX,CAG0B,CAAA,EAAd,cAAc,CAAd;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACRb,QAAM,WAAW,GAAG;AAClB,MAAA,OAAO,EAAE,IAAI,iDAAA,CAAA,aAAA,CAAJ,CAAgB;AAAE,wBAAgB;AAAlB,OAAhB;AADS,KAApB;;AAQA,QAAa,WAAb;AAAA;AAAA;AASE,2BAAoB,IAApB,EAAoC;AAAA;;AAAhB,aAAA,IAAA,GAAA,IAAA;AAPZ,aAAA,QAAA,GAAW,gCAAX;AAEA,aAAA,WAAA,GAAc;AACpB,UAAA,OAAO,EAAE,IAAI,iDAAA,CAAA,aAAA,CAAJ,CAAgB;AAAE,4BAAgB;AAAlB,WAAhB;AADW,SAAd;AAKiC;;AAT3C;AAAA;AAAA,kCAYS;AACL,iBAAO,KAAK,IAAL,CAAU,GAAV,CAAsB,KAAK,QAAL,GAAgB,MAAtC,CAAP;AACD;AAdH;;AAAA;AAAA,OAAA;;;;cAS4B,iDAAA,CAAA,YAAA;;;;AATf,IAAA,WAAW,GAAA,kCAAA,CAAA,YAAA,CAAA,CAAA,CAHvB,MAAA,CAAA,0CAAA,CAAA,YAAA,CAAA,CAAA,CAAW;AACV,MAAA,UAAU,EAAE;AADF,KAAX,CAGuB,CAAA,EAAX,WAAW,CAAX;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACZb,QAAM,SAAS,GAAG,YAAlB;AACA,QAAM,QAAQ,GAAG,WAAjB;;AAKA,QAAa,mBAAb;AAAA;AAAA;AAEE,qCAAA;AAAA;AAAiB;;AAFnB;AAAA;AAAA,kCAIS;AACL,UAAA,MAAM,CAAC,cAAP,CAAsB,KAAtB;AACD;AANH;AAAA;AAAA,kCAQmB,KARnB,EAQgC;AAC5B,UAAA,MAAM,CAAC,cAAP,CAAsB,UAAtB,CAAiC,SAAjC;AACA,UAAA,MAAM,CAAC,cAAP,CAAsB,OAAtB,CAA8B,SAA9B,EAAyC,KAAzC;AACD;AAXH;AAAA;AAAA,mCAaiB;AACb,iBAAO,cAAc,CAAC,OAAf,CAAuB,SAAvB,CAAP;AACD;AAfH;AAAA;AAAA,iCAiBkB,IAjBlB,EAiBsB;AAClB,UAAA,MAAM,CAAC,cAAP,CAAsB,UAAtB,CAAiC,QAAjC;AACA,UAAA,MAAM,CAAC,cAAP,CAAsB,OAAtB,CAA8B,QAA9B,EAAwC,IAAI,CAAC,SAAL,CAAe,IAAf,CAAxC;AACD;AApBH;AAAA;AAAA,kCAsBgB;AACZ,iBAAO,IAAI,CAAC,KAAL,CAAW,cAAc,CAAC,OAAf,CAAuB,QAAvB,CAAX,CAAP;AACD;AAxBH;;AAAA;AAAA,OAAA;;AAAa,IAAA,mBAAmB,GAAA,kCAAA,CAAA,YAAA,CAAA,CAAA,CAH/B,MAAA,CAAA,0CAAA,CAAA,YAAA,CAAA,CAAA,CAAW;AACV,MAAA,UAAU,EAAE;AADF,KAAX,CAG+B,CAAA,EAAnB,mBAAmB,CAAnB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACJb,QAAM,OAAO,GAAG,iCAAhB;;AAKA,QAAa,WAAb;AAAA;AAAA;AAEE,2BAAoB,IAApB,EAAoC;AAAA;;AAAhB,aAAA,IAAA,GAAA,IAAA;AAAqB;;AAF3C;AAAA;AAAA,2CAIkB;AACd,iBAAO,KAAK,IAAL,CAAU,GAAV,CAAc,OAAO,GAAG,KAAxB,EAA+B;AAAE,YAAA,YAAY,EAAE;AAAhB,WAA/B,CAAP;AACD;AANH;AAAA;AAAA,uCAQc;AACV,iBAAO,KAAK,IAAL,CAAU,GAAV,CAAc,OAAO,GAAG,MAAxB,EAAgC;AAAE,YAAA,YAAY,EAAE;AAAhB,WAAhC,CAAP;AACD;AAVH;AAAA;AAAA,4CAYmB;AACf,iBAAO,KAAK,IAAL,CAAU,GAAV,CAAc,OAAO,GAAG,KAAxB,EAA+B;AAAE,YAAA,YAAY,EAAE;AAAhB,WAA/B,CAAP;AACD;AAdH;AAAA;AAAA,wCAgBe;AACX,iBAAO,KAAK,IAAL,CAAU,GAAV,CAAc,OAAO,GAAG,OAAxB,EAAiC;AAAE,YAAA,YAAY,EAAE;AAAhB,WAAjC,CAAP;AACD;AAlBH;;AAAA;AAAA,OAAA;;;;cAE4B,iDAAA,CAAA,YAAA;;;;AAFf,IAAA,WAAW,GAAA,kCAAA,CAAA,YAAA,CAAA,CAAA,CAHvB,MAAA,CAAA,0CAAA,CAAA,YAAA,CAAA,CAAA,CAAW;AACV,MAAA,UAAU,EAAE;AADF,KAAX,CAGuB,CAAA,EAAX,WAAW,CAAX;;;;;;;;;;;;;;;;ACTb,IAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA;AAAe;;;AAAA,IAAA,mBAAA,CAAA,SAAA,CAAA,GAAA,qNAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACOf,QAAa,wBAAb;AAAA;AAAA;AAEE,0CAAA;AAAA;AAAiB;;AAFnB;AAAA;AAAA,mCAIU,CACP;AALH;;AAAA;AAAA,OAAA;;AAAa,IAAA,wBAAwB,GAAA,kCAAA,CAAA,YAAA,CAAA,CAAA,CALpC,MAAA,CAAA,0CAAA,CAAA,WAAA,CAAA,CAAA,CAAU;AACT,MAAA,QAAQ,EAAE,sBADD;AAET,MAAA,QAAA,EAAA,kCAAA,CAAA,iBAAA,CAAA,CAAA,mBAAA;AAAA;AAAA,wGAAA,CAAA,EAAA,OAFS;;;;AAAA,KAAV,CAKoC,CAAA,EAAxB,wBAAwB,CAAxB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACQb,QAAM,MAAM,GAAW,CACrB;AAAE,MAAA,IAAI,EAAE,MAAR;AAAgB,MAAA,SAAS,EAAE,iDAAA,CAAA,eAAA;AAA3B,KADqB,EAErB;AAAE,MAAA,IAAI,EAAE,OAAR;AAAiB,MAAA,SAAS,EAAE,mDAAA,CAAA,gBAAA;AAA5B,KAFqB,EAGrB;AAAE,MAAA,IAAI,EAAE,SAAR;AAAmB,MAAA,SAAS,EAAE,wDAAA,CAAA,kBAAA;AAA9B,KAHqB,EAIrB;AAAE,MAAA,IAAI,EAAE,2BAAR;AAAqC,MAAA,SAAS,EAAE,wDAAA,CAAA,kBAAA;AAAhD,KAJqB,EAKrB;AAAE,MAAA,IAAI,EAAE,YAAR;AAAsB,MAAA,SAAS,EAAE,oEAAA,CAAA,uBAAA;AAAjC,KALqB,EAMrB;AAAE,MAAA,IAAI,EAAE,kCAAR;AAA4C,MAAA,SAAS,EAAE,wFAAA,CAAA,gCAAA;AAAvD,KANqB,EAOrB;AAAE,MAAA,IAAI,EAAE,WAAR;AAAqB,MAAA,SAAS,EAAE,4DAAA,CAAA,oBAAA;AAAhC,KAPqB,EAQrB;AAAE,MAAA,IAAI,EAAE,UAAR;AAAoB,MAAA,SAAS,EAAE,yDAAA,CAAA,mBAAA;AAA/B,KARqB,EASrB;AAAE,MAAA,IAAI,EAAE,SAAR;AAAmB,MAAA,SAAS,EAAE,uDAAA,CAAA,kBAAA;AAA9B,KATqB,EAUrB;AAAE,MAAA,IAAI,EAAE,MAAR;AAAgB,MAAA,SAAS,EAAE,6DAAA,CAAA,oBAAA;AAA3B,KAVqB,EAWrB;AAAE,MAAA,IAAI,EAAE,KAAR;AAAe,MAAA,SAAS,EAAE,uEAAA,CAAA,yBAAA;AAA1B,KAXqB,EAYrB;AAAE,MAAA,IAAI,EAAE,OAAR;AAAiB,MAAA,SAAS,EAAE,+DAAA,CAAA,qBAAA;AAA5B,KAZqB,EAarB;AAAE,MAAA,IAAI,EAAE,EAAR;AAAY,MAAA,UAAU,EAAE,MAAxB;AAAgC,MAAA,SAAS,EAAE;AAA3C,KAbqB,CAAvB;;AAoBA,QAAa,gBAAb;AAAA;AAAA,KAAA;;AAAa,IAAA,gBAAgB,GAAA,kCAAA,CAAA,YAAA,CAAA,CAAA,CAJ5B,MAAA,CAAA,0CAAA,CAAA,UAAA,CAAA,CAAA,CAAS;AACR,MAAA,OAAO,EAAE,CAAC,4CAAA,CAAA,cAAA,CAAA,CAAa,OAAb,CAAqB,MAArB,CAAD,CADD;AAER,MAAA,OAAO,EAAE,CAAC,4CAAA,CAAA,cAAA,CAAD;AAFD,KAAT,CAI4B,CAAA,EAAhB,gBAAgB,CAAhB;;;;;;;;;;;;;;;;ACnCb,IAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA;AAAe;;;AAAA,IAAA,mBAAA,CAAA,SAAA,CAAA,GAAA,6KAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACQf,QAAa,YAAb;AAAA;AAAA;AAOE,4BAAoB,mBAApB,EAA4D;AAAA;;AAAxC,aAAA,mBAAA,GAAA,mBAAA;AALpB,aAAA,UAAA,GAAa,KAAb;AACA,aAAA,cAAA,GAAiB,KAAjB;AACA,aAAA,kBAAA,GAAqB,KAArB;AAGiE;;AAPnE;AAAA;AAAA,mCASU;AACN,eAAK,UAAL,GAAkB,CAAC,CAAC,KAAK,mBAAL,CAAyB,QAAzB,EAApB;;AAEA,cAAI,KAAK,UAAT,EAAqB;AACnB,gBAAM,IAAI,GAAG,KAAK,mBAAL,CAAyB,OAAzB,EAAb;AACA,iBAAK,KAAL,GAAa,IAAI,CAAC,KAAlB;AAEA,iBAAK,cAAL,GAAsB,KAAK,KAAL,CAAW,QAAX,CAAoB,YAApB,CAAtB;AACA,iBAAK,kBAAL,GAA0B,KAAK,KAAL,CAAW,QAAX,CAAoB,gBAApB,CAA1B;AAEA,iBAAK,QAAL,GAAgB,IAAI,CAAC,QAArB;AACD;AACF;AArBH;AAAA;AAAA,iCAuBQ;AACJ,eAAK,mBAAL,CAAyB,OAAzB;AACA,UAAA,MAAM,CAAC,QAAP,CAAgB,MAAhB;AACD;AA1BH;;AAAA;AAAA,OAAA;;;;cAO2C,4DAAA,CAAA,qBAAA;;;;AAP9B,IAAA,YAAY,GAAA,kCAAA,CAAA,YAAA,CAAA,CAAA,CALxB,MAAA,CAAA,0CAAA,CAAA,WAAA,CAAA,CAAA,CAAU;AACT,MAAA,QAAQ,EAAE,UADD;AAET,MAAA,QAAA,EAAA,kCAAA,CAAA,iBAAA,CAAA,CAAA,mBAAA;AAAA;AAAA,0EAAA,CAAA,EAAA,OAFS;;;;AAAA,KAAV,CAKwB,CAAA,EAAZ,YAAY,CAAZ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACuEb,QAAa,SAAb;AAAA;AAAA,KAAA;;AAAa,IAAA,SAAS,GAAA,kCAAA,CAAA,YAAA,CAAA,CAAA,CA/CrB,MAAA,CAAA,0CAAA,CAAA,UAAA,CAAA,CAAA,CAAS;AACR,MAAA,YAAY,EAAE,CACZ,2CAAA,CAAA,cAAA,CADY,EAEZ,mDAAA,CAAA,gBAAA,CAFY,EAGZ,yDAAA,CAAA,mBAAA,CAHY,EAIZ,iDAAA,CAAA,eAAA,CAJY,EAKZ,gEAAA,CAAA,qBAAA,CALY,EAMZ,8DAAA,CAAA,oBAAA,CANY,EAOZ,wEAAA,CAAA,yBAAA,CAPY,EAQZ,wDAAA,CAAA,kBAAA,CARY,EASZ,wDAAA,CAAA,kBAAA,CATY,EAUZ,sDAAA,CAAA,iBAAA,CAVY,EAWZ,kDAAA,CAAA,eAAA,CAXY,EAYZ,4DAAA,CAAA,oBAAA,CAZY,EAaZ,qEAAA,CAAA,gCAAA,CAbY,EAcZ,oEAAA,CAAA,uBAAA,CAdY,EAeZ,0EAAA,CAAA,0BAAA,CAfY,EAgBZ,wFAAA,CAAA,gCAAA,CAhBY,CADN;AAmBR,MAAA,OAAO,EAAE,CACP,sDAAA,CAAA,eAAA,CADO,EAEP,gDAAA,CAAA,kBAAA,CAFO,EAGP,2CAAA,CAAA,aAAA,CAHO,EAIP,iDAAA,CAAA,kBAAA,CAJO,EAKP,2CAAA,CAAA,qBAAA,CALO,EAMP,kEAAA,CAAA,yBAAA,CANO,EAOP,qDAAA,CAAA,gBAAA,CAPO,EAQP,sDAAA,CAAA,iBAAA,CARO,EASP,uDAAA,CAAA,kBAAA,CATO,EAUP,+CAAA,CAAA,eAAA,CAVO,EAWP,+CAAA,CAAA,iBAAA,CAXO,EAYP,+CAAA,CAAA,iBAAA,CAZO,EAaP,+CAAA,CAAA,gBAAA,CAbO,EAcP,+CAAA,CAAA,qBAAA,CAdO,EAeP,+CAAA,CAAA,qBAAA,CAfO,EAgBP,+CAAA,CAAA,eAAA,CAhBO,EAiBP,+CAAA,CAAA,eAAA,CAjBO,EAkBP,+CAAA,CAAA,gBAAA,CAlBO,EAmBP,+CAAA,CAAA,eAAA,CAnBO,EAoBP,6CAAA,CAAA,kBAAA,CApBO,EAqBP,+CAAA,CAAA,mBAAA,CArBO,CAnBD;AA0CR,MAAA,eAAe,EAAC,CAAC,qEAAA,CAAA,gCAAA,CAAD,CA1CR;AA2CR,MAAA,SAAS,EAAE,CAAC,uDAAA,CAAA,0BAAA,CAAD,EACT;AAAE,QAAA,OAAO,EAAE,+CAAA,CAAA,gCAAA,CAAX;AAA2C,QAAA,QAAQ,EAAE;AAAE,UAAA,UAAU,EAAE;AAAd;AAArD,OADS,CA3CH;AA6CR,MAAA,SAAS,EAAE,CAAC,2CAAA,CAAA,cAAA,CAAD;AA7CH,KAAT,CA+CqB,CAAA,EAAT,SAAS,CAAT;;;;;;;;;;;;;;;;AC/Eb,IAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA;AAAe;;;AAAA,IAAA,mBAAA,CAAA,SAAA,CAAA,GAAA,yMAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACQf,QAAa,mBAAb;AAAA;AAAA;AAGE,mCAAoB,WAApB,EAA4C;AAAA;;AAAxB,aAAA,WAAA,GAAA,WAAA;AAFpB,aAAA,OAAA,GAAU,EAAV;AAEiD;;AAHnD;AAAA;AAAA,mCAKU;AAAA;;AACN,eAAK,WAAL,CAAiB,aAAjB,GAAiC,SAAjC,CACE,UAAA,IAAI,EAAG;AACL,YAAA,KAAI,CAAC,OAAL,GAAe,IAAf;AACD,WAHH,EAIE,UAAA,GAAG,EAAG;AACJ,YAAA,KAAI,CAAC,OAAL,GAAe,IAAI,CAAC,KAAL,CAAW,GAAG,CAAC,KAAf,EAAsB,OAArC;AACD,WANH;AAQD;AAdH;;AAAA;AAAA,OAAA;;;;cAGmC,mDAAA,CAAA,aAAA;;;;AAHtB,IAAA,mBAAmB,GAAA,kCAAA,CAAA,YAAA,CAAA,CAAA,CAL/B,MAAA,CAAA,0CAAA,CAAA,WAAA,CAAA,CAAA,CAAU;AACT,MAAA,QAAQ,EAAE,iBADD;AAET,MAAA,QAAA,EAAA,kCAAA,CAAA,iBAAA,CAAA,CAAA,mBAAA;AAAA;AAAA,8FAAA,CAAA,EAAA,OAFS;;;;AAAA,KAAV,CAK+B,CAAA,EAAnB,mBAAmB,CAAnB;;;;;;;;;;;;;;;;ACRb,IAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA;AAAe;;;AAAA,IAAA,mBAAA,CAAA,SAAA,CAAA,GAAA,iNAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACQf,QAAa,uBAAb;AAAA;AAAA;AAGE,uCAAoB,WAApB,EAA4C;AAAA;;AAAxB,aAAA,WAAA,GAAA,WAAA;AAA6B;;AAHnD;AAAA;AAAA,mCAKU;AAAA;;AACN,eAAK,WAAL,CAAiB,iBAAjB,GAAqC,SAArC,CACE,UAAA,IAAI,EAAG;AACL,YAAA,MAAI,CAAC,OAAL,GAAe,IAAf;AACD,WAHH,EAIE,UAAA,GAAG,EAAG;AACJ,YAAA,MAAI,CAAC,OAAL,GAAe,IAAI,CAAC,KAAL,CAAW,GAAG,CAAC,KAAf,EAAsB,OAArC;AACD,WANH;AAQD;AAdH;;AAAA;AAAA,OAAA;;;;cAGmC,mDAAA,CAAA,aAAA;;;;AAHtB,IAAA,uBAAuB,GAAA,kCAAA,CAAA,YAAA,CAAA,CAAA,CALnC,MAAA,CAAA,0CAAA,CAAA,WAAA,CAAA,CAAA,CAAU;AACT,MAAA,QAAQ,EAAE,qBADD;AAET,MAAA,QAAA,EAAA,kCAAA,CAAA,iBAAA,CAAA,CAAA,mBAAA;AAAA;AAAA,sGAAA,CAAA,EAAA,OAFS;;;;AAAA,KAAV,CAKmC,CAAA,EAAvB,uBAAuB,CAAvB;;;;;;;;;;;;;;;;ACRb,IAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA;AAAe;;;AAAA,IAAA,mBAAA,CAAA,SAAA,CAAA,GAAA,qMAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACQf,QAAa,kBAAb;AAAA;AAAA;AAGE,kCAAoB,WAApB,EAA4C;AAAA;;AAAxB,aAAA,WAAA,GAAA,WAAA;AAFpB,aAAA,OAAA,GAAU,EAAV;AAEiD;;AAHnD;AAAA;AAAA,mCAKU;AAAA;;AACN,eAAK,WAAL,CAAiB,YAAjB,GAAgC,SAAhC,CACE,UAAA,IAAI,EAAG;AACL,YAAA,MAAI,CAAC,OAAL,GAAe,IAAf;AACD,WAHH,EAIE,UAAA,GAAG,EAAG;AACJ,YAAA,MAAI,CAAC,OAAL,GAAe,IAAI,CAAC,KAAL,CAAW,GAAG,CAAC,KAAf,EAAsB,OAArC;AACD,WANH;AAQD;AAdH;;AAAA;AAAA,OAAA;;;;cAGmC,mDAAA,CAAA,aAAA;;;;AAHtB,IAAA,kBAAkB,GAAA,kCAAA,CAAA,YAAA,CAAA,CAAA,CAL9B,MAAA,CAAA,0CAAA,CAAA,WAAA,CAAA,CAAA,CAAU;AACT,MAAA,QAAQ,EAAE,gBADD;AAET,MAAA,QAAA,EAAA,kCAAA,CAAA,iBAAA,CAAA,CAAA,mBAAA;AAAA;AAAA,4FAAA,CAAA,EAAA,OAFS;;;;AAAA,KAAV,CAK8B,CAAA,EAAlB,kBAAkB,CAAlB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACIb,QAAa,8BAAb;AAAA;AAAA;AAKI,8CAAoB,EAApB,EACkC,IADlC,EAES,cAFT,EAEuC;AAAA;;AAFnB,aAAA,EAAA,GAAA,EAAA;AACc,aAAA,IAAA,GAAA,IAAA;AACzB,aAAA,cAAA,GAAA,cAAA;AAAkC;;AAP/C;AAAA;AAAA,mCAUY;AACJ,eAAK,IAAL,GAAY,KAAK,EAAL,CAAQ,KAAR,CAAc;AACtB,YAAA,GAAG,EAAE,CAAC,IAAD,EAAO,2CAAA,CAAA,YAAA,CAAA,CAAW,OAAX,CAAmB,CAAC,2CAAA,CAAA,YAAA,CAAA,CAAW,QAAZ,CAAnB,CAAP,CADiB;AAEtB,YAAA,MAAM,EAAE,CAAC,IAAD,EAAO,2CAAA,CAAA,YAAA,CAAA,CAAW,OAAX,CAAmB,CAAC,2CAAA,CAAA,YAAA,CAAA,CAAW,QAAZ,CAAnB,CAAP,CAFc;AAGtB,YAAA,OAAO,EAAE,CAAC,IAAD,EAAO,2CAAA,CAAA,YAAA,CAAA,CAAW,OAAX,CAAmB,CAAC,2CAAA,CAAA,YAAA,CAAA,CAAW,QAAZ,CAAnB,CAAP,CAHa;AAItB,YAAA,OAAO,EAAE,CAAC,IAAD,EAAO,2CAAA,CAAA,YAAA,CAAA,CAAW,OAAX,CAAmB,CAAC,2CAAA,CAAA,YAAA,CAAA,CAAW,QAAZ,CAAnB,CAAP,CAJa;AAKtB,YAAA,UAAU,EAAE,CAAC,IAAD,EAAO,2CAAA,CAAA,YAAA,CAAA,CAAW,OAAX,CAAmB,CAAC,2CAAA,CAAA,YAAA,CAAA,CAAW,QAAZ,CAAnB,CAAP,CALU;AAMtB,YAAA,KAAK,EAAE,CAAC,IAAD,EAAO,2CAAA,CAAA,YAAA,CAAA,CAAW,OAAX,CAAmB,CAAC,2CAAA,CAAA,YAAA,CAAA,CAAW,QAAZ,CAAnB,CAAP,CANe;AAOtB,YAAA,IAAI,EAAE,CAAC,IAAD,EAAO,2CAAA,CAAA,YAAA,CAAA,CAAW,OAAX,CAAmB,CAAC,2CAAA,CAAA,YAAA,CAAA,CAAW,QAAZ,CAAnB,CAAP,CAPgB;AAQtB,YAAA,SAAS,EAAE,CAAC,IAAD,EAAO,2CAAA,CAAA,YAAA,CAAA,CAAW,OAAX,CAAmB,CAAC,2CAAA,CAAA,YAAA,CAAA,CAAW,QAAZ,CAAnB,CAAP,CARW;AAStB,YAAA,aAAa,EAAE,CAAC,IAAD,EAAO,2CAAA,CAAA,YAAA,CAAA,CAAW,OAAX,CAAmB,CAAC,2CAAA,CAAA,YAAA,CAAA,CAAW,QAAZ,CAAnB,CAAP,CATO;AAUtB,YAAA,KAAK,EAAE,CAAC,IAAD,EAAO,2CAAA,CAAA,YAAA,CAAA,CAAW,OAAX,CAAmB,CAAC,2CAAA,CAAA,YAAA,CAAA,CAAW,QAAZ,EAAsB,2CAAA,CAAA,YAAA,CAAA,CAAW,KAAjC,CAAnB,CAAP,CAVe;AAWtB,YAAA,GAAG,EAAE,CAAC,IAAD,EAAO,2CAAA,CAAA,YAAA,CAAA,CAAW,OAAX,CAAmB,CAAC,2CAAA,CAAA,YAAA,CAAA,CAAW,QAAZ,CAAnB,CAAP,CAXiB;AAYtB,YAAA,YAAY,EAAE,CAAC,IAAD,EAAO,2CAAA,CAAA,YAAA,CAAA,CAAW,OAAX,CAAmB,CAAC,2CAAA,CAAA,YAAA,CAAA,CAAW,QAAZ,CAAnB,CAAP;AAZQ,WAAd,CAAZ;AAcH;AAzBL;AAAA;AAAA,2CA2BoB,CAEf;AA7BL;AAAA;AAAA,iCA+BU;AACJ,UAAA,OAAO,CAAC,GAAR,CAAY,kBAAZ;AACA,eAAK,IAAL,CAAU,OAAV,CAAkB,aAAlB,CAAgC,IAAhC,CAAqC,KAAK,IAAL,CAAU,KAA/C;AAEA,UAAA,OAAO,CAAC,GAAR,CAAY,mBAAZ;AACA,UAAA,OAAO,CAAC,GAAR,CAAY,KAAK,IAAL,CAAU,OAAtB;AAEA,eAAK,cAAL,CAAoB,QAApB,CAA6B,KAAK,IAAL,CAAU,OAAvC,EAAgD,SAAhD,CACE,UAAA,IAAI,EAAG,CAEN,CAHH,EAIE,UAAA,GAAG,EAAG,CAEL,CANH;AAQA,UAAA,OAAO,CAAC,GAAR,CAAY,KAAK,IAAjB;AACD;AA/CL;;AAAA;AAAA,OAAA;;;;cAK4B,2CAAA,CAAA,aAAA;;;;gBACrB,0CAAA,CAAA,QAAA,C;AAAM,UAAA,IAAA,EAAA,CAAC,8CAAA,CAAA,iBAAA,CAAD;;;cACgB,sDAAA,CAAA,gBAAA;;;;AAPhB,IAAA,8BAA8B,GAAA,kCAAA,CAAA,YAAA,CAAA,CAAA,CAJ1C,MAAA,CAAA,0CAAA,CAAA,WAAA,CAAA,CAAA,CAAU;AACT,MAAA,QAAQ,EAAE,iBADD;AAET,MAAA,QAAA,EAAA,kCAAA,CAAA,iBAAA,CAAA,CAAA,mBAAA;AAAA;AAAA,2FAAA,CAAA,EAAA;AAFS,KAAV,CAI0C,EAMpC,kCAAA,CAAA,SAAA,CAAA,CAAA,CAAA,EAAA,MAAA,CAAA,0CAAA,CAAA,QAAA,CAAA,CAAA,CAAO,8CAAA,CAAA,iBAAA,CAAP,CAAA,CANoC,CAAA,EAA9B,8BAA8B,CAA9B;;;;;;;;;;;;;;;;ACZb,IAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA;AAAe;;;AAAA,IAAA,mBAAA,CAAA,SAAA,CAAA,GAAA,wrBAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACef,QAAa,gBAAb;AAAA;AAAA;AAgCE,gCAAoB,EAApB,EACS,MADT,EAES,cAFT,EAGS,WAHT,EAIU,KAJV,EAKU,MALV,EAKwB;AAAA;;AAAA;;AALJ,aAAA,EAAA,GAAA,EAAA;AACX,aAAA,MAAA,GAAA,MAAA;AACA,aAAA,cAAA,GAAA,cAAA;AACA,aAAA,WAAA,GAAA,WAAA;AACC,aAAA,KAAA,GAAA,KAAA;AACA,aAAA,MAAA,GAAA,MAAA;AA/BH,aAAA,WAAA,GAAc,KAAd;AAEA,aAAA,aAAA,GAAyB,IAAzB;AAIC,aAAA,QAAA,GAAW,KAAX;AAGA,aAAA,GAAA,GAAM,EAAN;AAGA,aAAA,SAAA,GAAY,IAAI,0CAAA,CAAA,cAAA,CAAJ,EAAZ;AAGD,aAAA,SAAA,GAAY,CACjB;AAAE,UAAA,KAAK,EAAE,IAAT;AAAe,UAAA,SAAS,EAAE;AAA1B,SADiB,EAEjB;AAAE,UAAA,KAAK,EAAE,KAAT;AAAgB,UAAA,SAAS,EAAE;AAA3B,SAFiB,EAGjB;AAAE,UAAA,KAAK,EAAE,MAAT;AAAiB,UAAA,SAAS,EAAE;AAA5B,SAHiB,CAAZ;AAkBL,aAAK,OAAL,GAAe,IAAI,kDAAA,CAAA,SAAA,CAAJ,EAAf;AAEA,aAAK,KAAL,CAAW,MAAX,CAAkB,SAAlB,CAA4B,UAAA,MAAM,EAAG;AACnC,UAAA,OAAO,CAAC,GAAR,CAAY,MAAZ;;AACA,cAAI,MAAM,CAAC,WAAD,CAAV,EAAyB;AACvB,YAAA,cAAc,CAAC,QAAf,CAAwB,MAAM,CAAC,WAAD,CAA9B,EAA6C,SAA7C,CACE,UAAA,IAAI,EAAG;AACL,cAAA,MAAI,CAAC,OAAL,GAAe,IAAf;AACD,aAHH,EAIE,UAAA,GAAG,EAAG,CAEL,CANH;AAQD;AACF,SAZD;AAcA,aAAK,QAAL,GAAgB,IAAI,4CAAA,CAAA,cAAA,CAAJ,CAAiB;AAC/B,UAAA,GAAG,EAAE,8BAD0B;AAE/B,UAAA,gBAAgB,EAAE,KAFa;AAG/B,UAAA,UAAU,EAAE;AAHmB,SAAjB,CAAhB;AAMA,aAAK,QAAL,CAAc,QAAd,CAAuB,SAAvB,CAAiC,UAAA,GAAG,EAAG;AACrC;AACA,UAAA,MAAI,CAAC,GAAL,GAAW,+BAA+B,IAAI,CAAC,KAAL,CAAW,GAAX,EAAgB,EAA1D;;AACA,UAAA,MAAI,CAAC,SAAL,CAAe,IAAf,CAAoB,MAAI,CAAC,GAAzB;AACD,SAJD;AAKD;;AAlEH;AAAA;AAAA,iCAoEkB,CApElB,EAoEwB;AACpB,eAAK,WAAL,GAAmB,CAAnB;AACD;AAtEH;AAAA;AAAA,mCAwEU;AAAA;;AACN,eAAK,IAAL,GAAY,KAAK,EAAL,CAAQ,KAAR,CAAc;AACxB,YAAA,WAAW,EAAE,CAAC,IAAD,EAAO,2CAAA,CAAA,YAAA,CAAA,CAAW,OAAX,CAAmB,CAAC,2CAAA,CAAA,YAAA,CAAA,CAAW,QAAZ,CAAnB,CAAP,CADW;AAExB,YAAA,GAAG,EAAE,CAAC,IAAD,EAAO,2CAAA,CAAA,YAAA,CAAA,CAAW,OAAX,CAAmB,CAAC,2CAAA,CAAA,YAAA,CAAA,CAAW,QAAZ,CAAnB,CAAP,CAFmB;AAGxB,YAAA,MAAM,EAAE,CAAC,IAAD,EAAO,2CAAA,CAAA,YAAA,CAAA,CAAW,OAAX,CAAmB,CAAC,2CAAA,CAAA,YAAA,CAAA,CAAW,QAAZ,CAAnB,CAAP,CAHgB;AAIxB,YAAA,OAAO,EAAE,CAAC,IAAD,EAAO,2CAAA,CAAA,YAAA,CAAA,CAAW,OAAX,CAAmB,CAAC,2CAAA,CAAA,YAAA,CAAA,CAAW,QAAZ,CAAnB,CAAP,CAJe;AAKxB,YAAA,gBAAgB,EAAE,CAAC,IAAD,EAAO,2CAAA,CAAA,YAAA,CAAA,CAAW,OAAX,CAAmB,CAAC,2CAAA,CAAA,YAAA,CAAA,CAAW,QAAZ,CAAnB,CAAP,CALM;AAMxB,YAAA,gBAAgB,EAAE,CAAC,IAAD,EAAO,2CAAA,CAAA,YAAA,CAAA,CAAW,OAAX,CAAmB,CAAC,2CAAA,CAAA,YAAA,CAAA,CAAW,QAAZ,CAAnB,CAAP,CANM;AAOxB,YAAA,aAAa,EAAE,CAAC,IAAD,EAAO,2CAAA,CAAA,YAAA,CAAA,CAAW,OAAX,CAAmB,CAAC,2CAAA,CAAA,YAAA,CAAA,CAAW,QAAZ,CAAnB,CAAP,CAPS;AAQxB,YAAA,UAAU,EAAE,CAAC,IAAD,EAAO,2CAAA,CAAA,YAAA,CAAA,CAAW,OAAX,CAAmB,CAAC,2CAAA,CAAA,YAAA,CAAA,CAAW,QAAZ,EAAsB,2CAAA,CAAA,YAAA,CAAA,CAAW,KAAjC,CAAnB,CAAP,CARY;AASxB,YAAA,QAAQ,EAAE,CAAC,IAAD,EAAO,2CAAA,CAAA,YAAA,CAAA,CAAW,OAAX,CAAmB,CAAC,2CAAA,CAAA,YAAA,CAAA,CAAW,QAAZ,EAAsB,2CAAA,CAAA,YAAA,CAAA,CAAW,KAAjC,CAAnB,CAAP,CATc;AAUxB,YAAA,SAAS,EAAE,CAAC,IAAD,EAAO,2CAAA,CAAA,YAAA,CAAA,CAAW,OAAX,CAAmB,CAAC,2CAAA,CAAA,YAAA,CAAA,CAAW,QAAZ,CAAnB,CAAP,CAVa;AAWxB,YAAA,QAAQ,EAAE,CAAC,IAAD,EAAO,2CAAA,CAAA,YAAA,CAAA,CAAW,OAAX,CAAmB,CAAC,2CAAA,CAAA,YAAA,CAAA,CAAW,QAAZ,CAAnB,CAAP,CAXc;AAYxB,YAAA,YAAY,EAAE,CAAC,IAAD,EAAO,2CAAA,CAAA,YAAA,CAAA,CAAW,OAAX,CAAmB,CAAC,2CAAA,CAAA,YAAA,CAAA,CAAW,QAAZ,CAAnB,CAAP,CAZU;AAaxB,YAAA,UAAU,EAAE,CAAC,IAAD,EAAO,2CAAA,CAAA,YAAA,CAAA,CAAW,OAAX,CAAmB,CAAC,2CAAA,CAAA,YAAA,CAAA,CAAW,QAAZ,CAAnB,CAAP,CAbY;AAcxB,YAAA,sBAAsB,EAAE,CAAC,IAAD,EAAO,2CAAA,CAAA,YAAA,CAAA,CAAW,OAAX,CAAmB,CAAC,2CAAA,CAAA,YAAA,CAAA,CAAW,QAAZ,CAAnB,CAAP,CAdA;AAexB,YAAA,oBAAoB,EAAE,CAAC,IAAD,EAAO,2CAAA,CAAA,YAAA,CAAA,CAAW,OAAX,CAAmB,CAAC,2CAAA,CAAA,YAAA,CAAA,CAAW,QAAZ,CAAnB,CAAP,CAfE;AAgBxB,YAAA,iBAAiB,EAAE,CAAC,IAAD,EAAO,2CAAA,CAAA,YAAA,CAAA,CAAW,OAAX,CAAmB,CAAC,2CAAA,CAAA,YAAA,CAAA,CAAW,QAAZ,CAAnB,CAAP,CAhBK;AAiBxB,YAAA,eAAe,EAAE,CAAC,IAAD,EAAO,2CAAA,CAAA,YAAA,CAAA,CAAW,OAAX,CAAmB,CAAC,2CAAA,CAAA,YAAA,CAAA,CAAW,QAAZ,CAAnB,CAAP,CAjBO;AAkBxB,YAAA,gBAAgB,EAAE,CAAC,IAAD,EAAO,2CAAA,CAAA,YAAA,CAAA,CAAW,OAAX,CAAmB,CAAC,2CAAA,CAAA,YAAA,CAAA,CAAW,QAAZ,CAAnB,CAAP,CAlBM;AAmBxB,YAAA,cAAc,EAAE,CAAC,IAAD,EAAO,2CAAA,CAAA,YAAA,CAAA,CAAW,OAAX,CAAmB,CAAC,2CAAA,CAAA,YAAA,CAAA,CAAW,QAAZ,CAAnB,CAAP,CAnBQ;AAoBxB,YAAA,mBAAmB,EAAE,CAAC,IAAD,EAAO,2CAAA,CAAA,YAAA,CAAA,CAAW,OAAX,CAAmB,CAAC,2CAAA,CAAA,YAAA,CAAA,CAAW,QAAZ,CAAnB,CAAP,CApBG;AAqBxB,YAAA,iBAAiB,EAAE,CAAC,IAAD,EAAO,2CAAA,CAAA,YAAA,CAAA,CAAW,OAAX,CAAmB,CAAC,2CAAA,CAAA,YAAA,CAAA,CAAW,QAAZ,CAAnB,CAAP,CArBK;AAsBxB,YAAA,wBAAwB,EAAE,CAAC,IAAD,EAAO,2CAAA,CAAA,YAAA,CAAA,CAAW,OAAX,CAAmB,CAAC,2CAAA,CAAA,YAAA,CAAA,CAAW,QAAZ,CAAnB,CAAP,CAtBF;AAuBxB,YAAA,sBAAsB,EAAE,CAAC,IAAD,EAAO,2CAAA,CAAA,YAAA,CAAA,CAAW,OAAX,CAAmB,CAAC,2CAAA,CAAA,YAAA,CAAA,CAAW,QAAZ,CAAnB,CAAP,CAvBA;AAwBxB,YAAA,YAAY,EAAE,CAAC,IAAD,EAAO,2CAAA,CAAA,YAAA,CAAA,CAAW,OAAX,CAAmB,CAAC,2CAAA,CAAA,YAAA,CAAA,CAAW,QAAZ,CAAnB,CAAP,CAxBU;AAyBxB,YAAA,eAAe,EAAE,CAAC,IAAD,EAAO,2CAAA,CAAA,YAAA,CAAA,CAAW,OAAX,CAAmB,CAAC,2CAAA,CAAA,YAAA,CAAA,CAAW,QAAZ,CAAnB,CAAP,CAzBO;AA0BxB,YAAA,aAAa,EAAE,CAAC,IAAD,EAAO,2CAAA,CAAA,YAAA,CAAA,CAAW,OAAX,CAAmB,CAAC,2CAAA,CAAA,YAAA,CAAA,CAAW,QAAZ,CAAnB,CAAP,CA1BS;AA2BxB,YAAA,MAAM,EAAE,CAAC,IAAD,EAAO,2CAAA,CAAA,YAAA,CAAA,CAAW,OAAX,CAAmB,CAAC,2CAAA,CAAA,YAAA,CAAA,CAAW,QAAZ,CAAnB,CAAP,CA3BgB;AA4BxB,YAAA,cAAc,EAAE,CAAC,IAAD,EAAO,2CAAA,CAAA,YAAA,CAAA,CAAW,OAAX,CAAmB,CAAC,2CAAA,CAAA,YAAA,CAAA,CAAW,QAAZ,CAAnB,CAAP,CA5BQ;AA6BxB,YAAA,KAAK,EAAE,CAAC,IAAD,EAAO,2CAAA,CAAA,YAAA,CAAA,CAAW,OAAX,CAAmB,CAAC,2CAAA,CAAA,YAAA,CAAA,CAAW,QAAZ,CAAnB,CAAP,CA7BiB;AA8BxB,YAAA,KAAK,EAAE,CAAC,IAAD,EAAO,2CAAA,CAAA,YAAA,CAAA,CAAW,OAAX,CAAmB,CAAC,2CAAA,CAAA,YAAA,CAAA,CAAW,QAAZ,CAAnB,CAAP,CA9BiB;AA+BxB,YAAA,aAAa,EAAE,CAAC,IAAD,EAAO,2CAAA,CAAA,YAAA,CAAA,CAAW,OAAX,CAAmB,CAAC,2CAAA,CAAA,YAAA,CAAA,CAAW,QAAZ,CAAnB,CAAP,CA/BS;AAgCxB,YAAA,kBAAkB,EAAE,CAAC,IAAD,EAAO,2CAAA,CAAA,YAAA,CAAA,CAAW,OAAX,CAAmB,CAAC,2CAAA,CAAA,YAAA,CAAA,CAAW,QAAZ,CAAnB,CAAP,CAhCI;AAiCxB,YAAA,SAAS,EAAE,CAAC,IAAD,EAAO,2CAAA,CAAA,YAAA,CAAA,CAAW,OAAX,CAAmB,CAAC,2CAAA,CAAA,YAAA,CAAA,CAAW,QAAZ,CAAnB,CAAP,CAjCa;AAkCxB,YAAA,WAAW,EAAE,CAAC,IAAD,EAAO,2CAAA,CAAA,YAAA,CAAA,CAAW,OAAX,CAAmB,CAAC,2CAAA,CAAA,YAAA,CAAA,CAAW,QAAZ,CAAnB,CAAP,CAlCW;AAmCxB,YAAA,QAAQ,EAAE,CAAC,IAAD,EAAO,2CAAA,CAAA,YAAA,CAAA,CAAW,OAAX,CAAmB,CAAC,2CAAA,CAAA,YAAA,CAAA,CAAW,QAAZ,CAAnB,CAAP,CAnCc;AAoCxB,YAAA,MAAM,EAAE,CAAC,IAAD,EAAO,2CAAA,CAAA,YAAA,CAAA,CAAW,OAAX,CAAmB,CAAC,2CAAA,CAAA,YAAA,CAAA,CAAW,QAAZ,CAAnB,CAAP,CApCgB;AAqCxB,YAAA,QAAQ,EAAE,CAAC,IAAD,EAAO,2CAAA,CAAA,YAAA,CAAA,CAAW,OAAX,CAAmB,CAAC,2CAAA,CAAA,YAAA,CAAA,CAAW,QAAZ,CAAnB,CAAP,CArCc;AAsCxB,YAAA,MAAM,EAAE,CAAC,IAAD,EAAO,2CAAA,CAAA,YAAA,CAAA,CAAW,OAAX,CAAmB,CAAC,2CAAA,CAAA,YAAA,CAAA,CAAW,QAAZ,CAAnB,CAAP,CAtCgB;AAuCxB,YAAA,kBAAkB,EAAE,CAAC,IAAD,EAAO,2CAAA,CAAA,YAAA,CAAA,CAAW,OAAX,CAAmB,CAAC,2CAAA,CAAA,YAAA,CAAA,CAAW,QAAZ,CAAnB,CAAP,CAvCI;AAwCxB,YAAA,sBAAsB,EAAE,CAAC,IAAD,EAAO,2CAAA,CAAA,YAAA,CAAA,CAAW,OAAX,CAAmB,CAAC,2CAAA,CAAA,YAAA,CAAA,CAAW,QAAZ,CAAnB,CAAP,CAxCA;AAyCxB,YAAA,qBAAqB,EAAE,CAAC,IAAD,EAAO,2CAAA,CAAA,YAAA,CAAA,CAAW,OAAX,CAAmB,CAAC,2CAAA,CAAA,YAAA,CAAA,CAAW,QAAZ,CAAnB,CAAP,CAzCC;AA0CxB,YAAA,gBAAgB,EAAE,CAAC,IAAD,EAAO,2CAAA,CAAA,YAAA,CAAA,CAAW,OAAX,CAAmB,CAAC,2CAAA,CAAA,YAAA,CAAA,CAAW,QAAZ,CAAnB,CAAP,CA1CM;AA2CxB,YAAA,mBAAmB,EAAE,CAAC,IAAD,EAAO,2CAAA,CAAA,YAAA,CAAA,CAAW,OAAX,CAAmB,CAAC,2CAAA,CAAA,YAAA,CAAA,CAAW,QAAZ,CAAnB,CAAP,CA3CG;AA4CxB,YAAA,oBAAoB,EAAE,CAAC,IAAD,EAAO,2CAAA,CAAA,YAAA,CAAA,CAAW,OAAX,CAAmB,CAAC,2CAAA,CAAA,YAAA,CAAA,CAAW,QAAZ,CAAnB,CAAP,CA5CE;AA6CxB,YAAA,+BAA+B,EAAE,CAAC,IAAD,EAAO,2CAAA,CAAA,YAAA,CAAA,CAAW,OAAX,CAAmB,CAAC,2CAAA,CAAA,YAAA,CAAA,CAAW,QAAZ,CAAnB,CAAP,CA7CT;AA8CxB,YAAA,gCAAgC,EAAE,CAAC,IAAD,EAAO,2CAAA,CAAA,YAAA,CAAA,CAAW,OAAX,CAAmB,CAAC,2CAAA,CAAA,YAAA,CAAA,CAAW,QAAZ,CAAnB,CAAP,CA9CV;AA+CxB,YAAA,qBAAqB,EAAE,CAAC,IAAD,EAAO,2CAAA,CAAA,YAAA,CAAA,CAAW,OAAX,CAAmB,CAAC,2CAAA,CAAA,YAAA,CAAA,CAAW,QAAZ,EAAsB,2CAAA,CAAA,YAAA,CAAA,CAAW,KAAjC,CAAnB,CAAP,CA/CC;AAgDxB,YAAA,sBAAsB,EAAE,CAAC,IAAD,EAAO,2CAAA,CAAA,YAAA,CAAA,CAAW,OAAX,CAAmB,CAAC,2CAAA,CAAA,YAAA,CAAA,CAAW,QAAZ,EAAsB,2CAAA,CAAA,YAAA,CAAA,CAAW,KAAjC,CAAnB,CAAP,CAhDA;AAiDxB,YAAA,QAAQ,EAAE,KAAK,EAAL,CAAQ,KAAR,CAAc,CAAC,KAAK,aAAL,EAAD,CAAd;AAjDc,WAAd,CAAZ,CADM,CAqDN;;AACA,eAAK,WAAL,GAAmB,KAAK,IAAL,CAAU,GAAV,CAAc,UAAd,CAAnB;AAEA,eAAK,WAAL,CAAiB,OAAjB,GAA2B,SAA3B,CACE,UAAA,IAAI,EAAG;AACL,YAAA,MAAI,CAAC,OAAL,GAAe,IAAf;AACD,WAHH,EAIE,UAAA,GAAG,EAAG,CAEL,CANH;AAQD,SAxIH,CA0IE;;AA1IF;AAAA;AAAA,wCA2Ie;AACX,iBAAO,KAAK,EAAL,CAAQ,KAAR,CAAc;AACnB;AACA,YAAA,IAAI,EAAE,CAAC,IAAD,EAAO,2CAAA,CAAA,YAAA,CAAA,CAAW,OAAX,CAAmB,CAAC,2CAAA,CAAA,YAAA,CAAA,CAAW,QAAZ,CAAnB,CAAP,CAFa;AAGnB,YAAA,MAAM,EAAE,CAAC,IAAD,EAAO,2CAAA,CAAA,YAAA,CAAA,CAAW,OAAX,CAAmB,CAAC,2CAAA,CAAA,YAAA,CAAA,CAAW,QAAZ,CAAnB,CAAP,CAHW;AAInB,YAAA,SAAS,EAAE,CAAC,IAAD,EAAO,2CAAA,CAAA,YAAA,CAAA,CAAW,OAAX,CAAmB,CAAC,2CAAA,CAAA,YAAA,CAAA,CAAW,QAAZ,EAAsB,2CAAA,CAAA,YAAA,CAAA,CAAW,QAAjC,CAAnB,CAAP,CAJQ;AAKnB,YAAA,KAAK,EAAE,CAAC,IAAD,EAAO,2CAAA,CAAA,YAAA,CAAA,CAAW,OAAX,CAAmB,CAAC,2CAAA,CAAA,YAAA,CAAA,CAAW,QAAZ,EAAsB,2CAAA,CAAA,YAAA,CAAA,CAAW,KAAjC,CAAnB,CAAP;AALY,WAAd,CAAP;AAOD,SAnJH,CAsJE;;AAtJF;AAAA;AAAA,yCAuJgB;AACZ,eAAK,WAAL,CAAiB,IAAjB,CAAsB,KAAK,aAAL,EAAtB;AACD,SAzJH,CA2JE;;AA3JF;AAAA;AAAA,sCA4JgB,KA5JhB,EA4JqB;AACjB;AACA,eAAK,WAAL,CAAiB,QAAjB,CAA0B,KAA1B;AACD,SA/JH,CAiKE;;AAjKF;AAAA;AAAA,yCAkKmB,KAlKnB,EAkKwB;AACpB,cAAI,UAAU,GAAG,IAAjB;;AAEA,cAAI,KAAK,oBAAL,CAA0B,KAA1B,EAAiC,QAAjC,CAA0C,MAA1C,EAAkD,KAAlD,KAA4D,OAAhE,EAAyE;AACvE,YAAA,UAAU,GAAG,2CAAA,CAAA,YAAA,CAAA,CAAW,OAAX,CAAmB,CAAC,2CAAA,CAAA,YAAA,CAAA,CAAW,QAAZ,EAAsB,2CAAA,CAAA,YAAA,CAAA,CAAW,KAAjC,CAAnB,CAAb;AACD,WAFD,MAEO;AACL,YAAA,UAAU,GAAG,2CAAA,CAAA,YAAA,CAAA,CAAW,OAAX,CAAmB,CAC9B,2CAAA,CAAA,YAAA,CAAA,CAAW,QADmB,EAE9B,2CAAA,CAAA,YAAA,CAAA,CAAW,OAAX,CAAmB,IAAI,MAAJ,CAAW,iCAAX,CAAnB,CAF8B,CAEoC;AAFpC,aAAnB,CAAb;AAID;;AAED,eAAK,oBAAL,CAA0B,KAA1B,EAAiC,QAAjC,CAA0C,OAA1C,EAAmD,aAAnD,CACE,UADF;AAIA,eAAK,oBAAL,CAA0B,KAA1B,EAAiC,QAAjC,CAA0C,OAA1C,EAAmD,sBAAnD;AACD,SAnLH,CAqLE;;AArLF;AAAA;AAAA,6CAsLuB,KAtLvB,EAsL4B;AACxB;AACA,cAAM,SAAS,GAAG,KAAK,WAAL,CAAiB,QAAjB,CAA0B,KAA1B,CAAlB;AACA,iBAAO,SAAP;AACD,SA1LH,CA4LE;;AA5LF;AAAA;AAAA,iCA6LQ;AACJ,UAAA,OAAO,CAAC,GAAR,CAAY,KAAK,IAAL,CAAU,KAAtB;AACD;AA/LH;AAAA;AAAA,mDAiM0B;AACtB;AAEA,cAAM,SAAS,GAAG,KAAK,MAAL,CAAY,IAAZ,CAAiB,4DAAA,CAAA,gCAAA,CAAjB,EAAiD;AACjE;AACA;AACA,YAAA,IAAI,EAAE;AACJ,cAAA,OAAO,EAAE,KAAK;AADV;AAH2D,WAAjD,CAAlB;AAQA,UAAA,SAAS,CAAC,WAAV,GAAwB,SAAxB,CAAkC,UAAA,MAAM,EAAG;AACzC,YAAA,OAAO,CAAC,GAAR,CAAY,QAAZ;AACA,YAAA,OAAO,CAAC,GAAR,CAAY,MAAZ;AACD,WAHD;AAID;AAhNH;AAAA;AAAA,2CAkNkB,CAEf;AApNH;AAAA;AAAA,6CAuNoB;AAAA;;AAChB,UAAA,OAAO,CAAC,GAAR,CAAY,qBAAZ;AACA,eAAK,IAAL,CAAU,KAAV,CAAgB,EAAhB,GAAqB,KAAK,OAAL,CAAa,EAAlC;AACA,eAAK,cAAL,CAAoB,QAApB,CAA6B,KAAK,IAAL,CAAU,KAAvC,EAA8C,SAA9C,CACE,UAAA,IAAI,EAAG;AACL,YAAA,MAAI,CAAC,MAAL,CAAY,QAAZ,CAAqB,CAAC,aAAD,CAArB;AACD,WAHH,EAIE,UAAA,GAAG,EAAG,CAEL,CANH;AAQA,iBAAO,KAAK,IAAL,CAAU,KAAjB;AACD;AAnOH;AAAA;AAAA,iCAqOQ;AACJ,eAAK,MAAL,CAAY,QAAZ,CAAqB,CAAC,aAAD,CAArB;AACD;AAvOH;AAAA;AAAA,2CAyOqB,MAzOrB,EAyO2C;AACvC,UAAA,OAAO,CAAC,GAAR,CAAY,MAAM,CAAC,MAAP,CAAc,IAA1B,EAAgC,MAAM,CAAC,KAAvC;;AAEA,cAAI,MAAM,CAAC,KAAP,KAAiB,aAArB,EAAoC;AAClC,iBAAK,aAAL,GAAqB,IAArB;AACD,WAFD,MAGK,IAAI,MAAM,CAAC,KAAP,KAAiB,SAArB,EAAgC;AACnC,iBAAK,aAAL,GAAqB,KAArB;AACD;;AAED,eAAK,OAAL,GAAe,IAAI,kDAAA,CAAA,SAAA,CAAJ,EAAf;AACD;AApPH;AAAA;AAAA,4BA4BsB;AAClB,iBAAO,KAAK,IAAL,CAAU,GAAV,CAAc,UAAd,CAAP;AACD;AA9BH;;AAAA;AAAA,OAAA;;;;cAgC0B,2CAAA,CAAA,aAAA;;cACP,8CAAA,CAAA,WAAA;;cACQ,sDAAA,CAAA,gBAAA;;cACH,mDAAA,CAAA,aAAA;;cACL,4CAAA,CAAA,gBAAA;;cACC,4CAAA,CAAA,QAAA;;;;AAzBlB,IAAA,kCAAA,CAAA,YAAA,CAAA,CAAA,CADC,MAAA,CAAA,0CAAA,CAAA,OAAA,CAAA,CAAA,EACD,CAAA,E,0BAAA,E,UAAA,E,KAAyB,CAAzB;AAGA,IAAA,kCAAA,CAAA,YAAA,CAAA,CAAA,CADC,MAAA,CAAA,0CAAA,CAAA,OAAA,CAAA,CAAA,EACD,CAAA,E,0BAAA,E,KAAA,E,KAAiB,CAAjB;AAGA,IAAA,kCAAA,CAAA,YAAA,CAAA,CAAA,CADC,MAAA,CAAA,0CAAA,CAAA,QAAA,CAAA,CAAA,EACD,CAAA,E,0BAAA,E,WAAA,E,KAAuC,CAAvC;AAlBW,IAAA,gBAAgB,GAAA,kCAAA,CAAA,YAAA,CAAA,CAAA,CAL5B,MAAA,CAAA,0CAAA,CAAA,WAAA,CAAA,CAAA,CAAU;AACT,MAAA,QAAQ,EAAE,aADD;AAET,MAAA,QAAA,EAAA,kCAAA,CAAA,iBAAA,CAAA,CAAA,mBAAA;AAAA;AAAA,sFAAA,CAAA,EAAA,OAFS;;;;AAAA,KAAV,CAK4B,CAAA,EAAhB,gBAAgB,CAAhB;;;;;;;;;;;;;;;;ACfb,IAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA;AAAe;;;AAAA,IAAA,mBAAA,CAAA,SAAA,CAAA,GAAA,0xBAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACUf,QAAa,8BAAb;AAAA;AAAA;AAKE,8CAAoB,KAApB,EACoB,cADpB,EAEoB,MAFpB,EAEkC;AAAA;;AAAA;;AAFd,aAAA,KAAA,GAAA,KAAA;AACA,aAAA,cAAA,GAAA,cAAA;AACA,aAAA,MAAA,GAAA,MAAA;AAElB,aAAK,KAAL,CAAW,MAAX,CAAkB,SAAlB,CAA4B,UAAA,MAAM,EAAG;AACnC,UAAA,OAAO,CAAC,GAAR,CAAY,MAAZ;;AACA,cAAI,MAAM,CAAC,WAAD,CAAV,EAAyB;AACvB,YAAA,cAAc,CAAC,QAAf,CAAwB,MAAM,CAAC,WAAD,CAA9B,EAA6C,SAA7C,CACE,UAAA,IAAI,EAAG;AACL,cAAA,MAAI,CAAC,OAAL,GAAe,IAAf;AACA,cAAA,MAAI,CAAC,aAAL,GAAsB,MAAI,CAAC,OAAL,CAAa,aAAb,MAA8B,aAA9B,GAA4C,IAA5C,GAAiD,KAAvE;AACD,aAJH,EAKE,UAAA,GAAG,EAAG,CAEL,CAPH;AASD;AACF,SAbD;AAcD;;AAvBH;AAAA;AAAA,mCAyBU,CAEP;AA3BH;AAAA;AAAA,wCA6Be;AACX,eAAK,MAAL,CAAY,QAAZ,CAAqB,CAAC,iBAAD,EAAoB,KAAK,OAAL,CAAa,EAAjC,CAArB;AACD;AA/BH;AAAA;AAAA,iCAiCQ;AACJ,eAAK,MAAL,CAAY,QAAZ,CAAqB,CAAC,aAAD,CAArB;AACD;AAnCH;;AAAA;AAAA,OAAA;;;;cAK6B,4CAAA,CAAA,gBAAA;;cACQ,sDAAA,CAAA,gBAAA;;cACP,4CAAA,CAAA,QAAA;;;;AAPjB,IAAA,8BAA8B,GAAA,kCAAA,CAAA,YAAA,CAAA,CAAA,CAL1C,MAAA,CAAA,0CAAA,CAAA,WAAA,CAAA,CAAA,CAAU;AACT,MAAA,QAAQ,EAAE,6BADD;AAET,MAAA,QAAA,EAAA,kCAAA,CAAA,iBAAA,CAAA,CAAA,mBAAA;AAAA;AAAA,sHAAA,CAAA,EAAA,OAFS;;;;AAAA,KAAV,CAK0C,CAAA,EAA9B,8BAA8B,CAA9B;;;;;;;;;;;;;;;;ACVb,IAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA;AAAe;;;AAAA,IAAA,mBAAA,CAAA,SAAA,CAAA,GAAA,qlBAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACWf,QAAa,qBAAb;AAAA;AAAA;AAOE,qCAAoB,cAApB,EACoB,MADpB,EACkC;AAAA;;AADd,aAAA,cAAA,GAAA,cAAA;AACA,aAAA,MAAA,GAAA,MAAA;;AAClB,aAAK,UAAL,GAAkB,UAAS,KAAT,EAAe,SAAf,EAAwB;AACxC,eAAK,YAAL,GAAoB,KAApB;AACA,eAAK,MAAL,CAAY,QAAZ,CAAqB,CAAC,wBAAD,EAA2B,SAA3B,CAArB;AACD,SAHD;AAID;;AAbH;AAAA;AAAA,mCAeU;AAAA;;AACN,eAAK,cAAL,CAAoB,WAApB,GAAkC,SAAlC,CACE,UAAA,IAAI,EAAG;AACL,YAAA,MAAI,CAAC,QAAL,GAAgB,IAAhB;AACD,WAHH,EAIE,UAAA,GAAG,EAAG,CAEL,CANH;AASD;AAzBH;;AAAA;AAAA,OAAA;;;;cAOqC,sDAAA,CAAA,gBAAA;;cACP,4CAAA,CAAA,QAAA;;;;AARjB,IAAA,qBAAqB,GAAA,kCAAA,CAAA,YAAA,CAAA,CAAA,CALjC,MAAA,CAAA,0CAAA,CAAA,WAAA,CAAA,CAAA,CAAU;AACT,MAAA,QAAQ,EAAE,mBADD;AAET,MAAA,QAAA,EAAA,kCAAA,CAAA,iBAAA,CAAA,CAAA,mBAAA;AAAA;AAAA,kGAAA,CAAA,EAAA,OAFS;;;;AAAA,KAAV,CAKiC,CAAA,EAArB,qBAAqB,CAArB;;;;;;;;;;;;;;;;ACXb,IAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA;AAAe;;;AAAA,IAAA,mBAAA,CAAA,SAAA,CAAA,GAAA,yLAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACQf,QAAa,eAAb;AAAA;AAAA;AAQE,+BAAoB,mBAApB,EAA4D;AAAA;;AAAxC,aAAA,mBAAA,GAAA,mBAAA;AALpB,aAAA,UAAA,GAAa,KAAb;AACA,aAAA,cAAA,GAAiB,KAAjB;AACA,aAAA,kBAAA,GAAqB,KAArB;AAGiE;;AARnE;AAAA;AAAA,mCAUU;AACN,eAAK,UAAL,GAAkB,CAAC,CAAC,KAAK,mBAAL,CAAyB,QAAzB,EAApB;;AAEA,cAAI,KAAK,UAAT,EAAqB;AACnB,gBAAM,IAAI,GAAG,KAAK,mBAAL,CAAyB,OAAzB,EAAb;AACA,iBAAK,KAAL,GAAa,IAAI,CAAC,KAAlB;AAEA,iBAAK,cAAL,GAAsB,KAAK,KAAL,CAAW,QAAX,CAAoB,YAApB,CAAtB;AACA,iBAAK,kBAAL,GAA0B,KAAK,KAAL,CAAW,QAAX,CAAoB,gBAApB,CAA1B;AAEA,iBAAK,QAAL,GAAgB,IAAI,CAAC,QAArB;AACD;AACF;AAtBH;AAAA;AAAA,iCAwBQ;AACJ,eAAK,mBAAL,CAAyB,OAAzB,GADI,CAEJ;AACD;AA3BH;;AAAA;AAAA,OAAA;;;;cAQ2C,4DAAA,CAAA,qBAAA;;;;AAR9B,IAAA,eAAe,GAAA,kCAAA,CAAA,YAAA,CAAA,CAAA,CAL3B,MAAA,CAAA,0CAAA,CAAA,WAAA,CAAA,CAAA,CAAU;AACT,MAAA,QAAQ,EAAE,YADD;AAET,MAAA,QAAA,EAAA,kCAAA,CAAA,iBAAA,CAAA,CAAA,mBAAA;AAAA;AAAA,oFAAA,CAAA,EAAA,OAFS;;;;AAAA,KAAV,CAK2B,CAAA,EAAf,eAAe,CAAf;;;;;;;;;;;;;;;;ACRb,IAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA;AAAe;;;AAAA,IAAA,mBAAA,CAAA,SAAA,CAAA,GAAA,qLAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACQf,QAAa,aAAb;AAAA;AAAA;AAGE,6BAAoB,WAApB,EAA4C;AAAA;;AAAxB,aAAA,WAAA,GAAA,WAAA;AAA6B;;AAHnD;AAAA;AAAA,mCAKU;AAAA;;AACN,eAAK,WAAL,CAAiB,gBAAjB,GAAoC,SAApC,CACE,UAAA,IAAI,EAAG;AACL,YAAA,MAAI,CAAC,OAAL,GAAe,IAAf;AACD,WAHH,EAIE,UAAA,GAAG,EAAG;AACJ,YAAA,MAAI,CAAC,OAAL,GAAe,IAAI,CAAC,KAAL,CAAW,GAAG,CAAC,KAAf,EAAsB,OAArC;AACD,WANH;AAQD;AAdH;;AAAA;AAAA,OAAA;;;;cAGmC,mDAAA,CAAA,aAAA;;;;AAHtB,IAAA,aAAa,GAAA,kCAAA,CAAA,YAAA,CAAA,CAAA,CALzB,MAAA,CAAA,0CAAA,CAAA,WAAA,CAAA,CAAA,CAAU;AACT,MAAA,QAAQ,EAAE,UADD;AAET,MAAA,QAAA,EAAA,kCAAA,CAAA,iBAAA,CAAA,CAAA,mBAAA;AAAA;AAAA,gFAAA,CAAA,EAAA,OAFS;;;;AAAA,KAAV,CAKyB,CAAA,EAAb,aAAa,CAAb;;;;;;;;;;;;;;;;ACRb,IAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA;AAAe;;;AAAA,IAAA,mBAAA,CAAA,SAAA,CAAA,GAAA,22DAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACSf,QAAa,cAAb;AAAA;AAAA;AAOE,8BAAoB,WAApB,EAAsD,YAAtD,EAAuF;AAAA;;AAAnE,aAAA,WAAA,GAAA,WAAA;AAAkC,aAAA,YAAA,GAAA,YAAA;AANtD,aAAA,IAAA,GAAY,EAAZ;AACA,aAAA,UAAA,GAAa,KAAb;AACA,aAAA,aAAA,GAAgB,KAAhB;AACA,aAAA,YAAA,GAAe,EAAf;AACA,aAAA,KAAA,GAAkB,EAAlB;AAE4F;;AAP9F;AAAA;AAAA,mCASU;AACN,cAAI,KAAK,YAAL,CAAkB,QAAlB,EAAJ,EAAkC;AAChC,iBAAK,UAAL,GAAkB,IAAlB;AACA,iBAAK,KAAL,GAAa,KAAK,YAAL,CAAkB,OAAlB,GAA4B,KAAzC;AACD;AACF;AAdH;AAAA;AAAA,mCAgBU;AAAA;;AACN,eAAK,WAAL,CAAiB,KAAjB,CAAuB,KAAK,IAA5B,EAAkC,SAAlC,CACE,UAAA,IAAI,EAAG;AACL,YAAA,OAAI,CAAC,YAAL,CAAkB,SAAlB,CAA4B,IAAI,CAAC,WAAjC;;AACA,YAAA,OAAI,CAAC,YAAL,CAAkB,QAAlB,CAA2B,IAA3B;;AAEA,YAAA,OAAI,CAAC,aAAL,GAAqB,KAArB;AACA,YAAA,OAAI,CAAC,UAAL,GAAkB,IAAlB;AACA,YAAA,OAAI,CAAC,KAAL,GAAa,OAAI,CAAC,YAAL,CAAkB,OAAlB,GAA4B,KAAzC;;AACA,YAAA,OAAI,CAAC,UAAL;AACD,WATH,EAUE,UAAA,GAAG,EAAG;AACJ,YAAA,OAAI,CAAC,YAAL,GAAoB,GAAG,CAAC,KAAJ,CAAU,OAA9B;AACA,YAAA,OAAI,CAAC,aAAL,GAAqB,IAArB;AACD,WAbH;AAeD;AAhCH;AAAA;AAAA,qCAkCY;AACR,UAAA,MAAM,CAAC,QAAP,CAAgB,MAAhB;AACD;AApCH;;AAAA;AAAA,OAAA;;;;cAOmC,mDAAA,CAAA,aAAA;;cAAmC,4DAAA,CAAA,qBAAA;;;;AAPzD,IAAA,cAAc,GAAA,kCAAA,CAAA,YAAA,CAAA,CAAA,CAL1B,MAAA,CAAA,0CAAA,CAAA,WAAA,CAAA,CAAA,CAAU;AACT,MAAA,QAAQ,EAAE,WADD;AAET,MAAA,QAAA,EAAA,kCAAA,CAAA,iBAAA,CAAA,CAAA,mBAAA;AAAA;AAAA,kFAAA,CAAA,EAAA,OAFS;;;;AAAA,KAAV,CAK0B,CAAA,EAAd,cAAc,CAAd;;;;;;;;;;;;;;;;ACTb,IAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA;AAAe;;;AAAA,IAAA,mBAAA,CAAA,SAAA,CAAA,GAAA,yuCAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACOf,QAAa,aAAb;AAAA;AAAA;AAIE,+BAAA;AAAA;;AAEE,aAAK,KAAL,GAAa;AACX,UAAA,OAAO,EAAE,IADE;AAEX,UAAA,SAAS,EAAE,IAFA;AAGX,UAAA,gBAAgB,EAAE,IAHP;AAIX,UAAA,YAAY,EAAE,IAJH;AAKX,UAAA,SAAS,EAAE;AALA,SAAb;AAOD;;AAbH;AAAA;AAAA,mCAeU,CACP;AAhBH;AAAA;AAAA,iDAkBkC,GAlBlC,EAkB6C;AACzC,eAAI,IAAI,OAAR,IAAmB,KAAK,KAAxB,EAA8B;AAC5B,gBAAG,OAAO,KAAK,GAAf,EAAmB;AACjB,mBAAK,KAAL,CAAW,OAAX,IAAsB,IAAtB;AACD,aAFD,MAGI;AACF,mBAAK,KAAL,CAAW,OAAX,IAAsB,KAAtB;AACD;AACF;AAEF;AA5BH;;AAAA;AAAA,OAAA;;AAAa,IAAA,aAAa,GAAA,kCAAA,CAAA,YAAA,CAAA,CAAA,CALzB,MAAA,CAAA,0CAAA,CAAA,WAAA,CAAA,CAAA,CAAU;AACT,MAAA,QAAQ,EAAE,UADD;AAET,MAAA,QAAA,EAAA,kCAAA,CAAA,iBAAA,CAAA,CAAA,mBAAA;AAAA;AAAA,gFAAA,CAAA,EAAA,OAFS;;;;AAAA,KAAV,CAKyB,CAAA,EAAb,aAAa,CAAb;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;QCPA,O;;;;;;;;;;;;;;;;;;;ACAb,IAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA;AAAe;;;AAAA,IAAA,mBAAA,CAAA,SAAA,CAAA,GAAA,6LAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACSf,QAAa,gBAAb;AAAA;AAAA;AAGE,gCAAoB,KAApB,EAA8C;AAAA;;AAA1B,aAAA,KAAA,GAAA,KAAA;AAA+B;;AAHrD;AAAA;AAAA,mCAKU;AACN,eAAK,WAAL,GAAmB,KAAK,KAAL,CAAW,OAAX,EAAnB;AACD;AAPH;;AAAA;AAAA,OAAA;;;;cAG6B,4DAAA,CAAA,qBAAA;;;;AAHhB,IAAA,gBAAgB,GAAA,kCAAA,CAAA,YAAA,CAAA,CAAA,CAL5B,MAAA,CAAA,0CAAA,CAAA,WAAA,CAAA,CAAA,CAAU;AACT,MAAA,QAAQ,EAAE,aADD;AAET,MAAA,QAAA,EAAA,kCAAA,CAAA,iBAAA,CAAA,CAAA,mBAAA;AAAA;AAAA,sFAAA,CAAA,EAAA,OAFS;;;;AAAA,KAAV,CAK4B,CAAA,EAAhB,gBAAgB,CAAhB;;;;;;;;;;;;;;;;ACTb,IAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA;AAAe;;;AAAA,IAAA,mBAAA,CAAA,SAAA,CAAA,GAAA,iMAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACQf,QAAa,kBAAb;AAAA;AAAA;AAUE,kCAAoB,EAApB,EAAmC;AAAA;;AAAf,aAAA,EAAA,GAAA,EAAA;AAAmB,OAVzC,CAKE;;;AALF;AAAA;AAAA,mCAYU;AACN,eAAK,IAAL,GAAY,KAAK,EAAL,CAAQ,KAAR,CAAc;AACxB,YAAA,IAAI,EAAE,CAAC,IAAD,EAAO,2CAAA,CAAA,YAAA,CAAA,CAAW,OAAX,CAAmB,CAAC,2CAAA,CAAA,YAAA,CAAA,CAAW,QAAZ,CAAnB,CAAP,CADkB;AAExB,YAAA,MAAM,EAAE,CAAC,IAAD,EAAO,2CAAA,CAAA,YAAA,CAAA,CAAW,OAAX,CAAmB,CAAC,2CAAA,CAAA,YAAA,CAAA,CAAW,QAAZ,CAAnB,CAAP,CAFgB;AAGxB,YAAA,OAAO,EAAE,CAAC,IAAD,EAAO,2CAAA,CAAA,YAAA,CAAA,CAAW,OAAX,CAAmB,CAAC,2CAAA,CAAA,YAAA,CAAA,CAAW,QAAZ,CAAnB,CAAP,CAHe;AAIxB,YAAA,OAAO,EAAE,CAAC,IAAD,EAAO,2CAAA,CAAA,YAAA,CAAA,CAAW,OAAX,CAAmB,CAAC,2CAAA,CAAA,YAAA,CAAA,CAAW,QAAZ,CAAnB,CAAP,CAJe;AAKxB,YAAA,UAAU,EAAE,CAAC,IAAD,EAAO,2CAAA,CAAA,YAAA,CAAA,CAAW,OAAX,CAAmB,CAAC,2CAAA,CAAA,YAAA,CAAA,CAAW,QAAZ,CAAnB,CAAP,CALY;AAMxB,YAAA,KAAK,EAAE,CAAC,IAAD,EAAO,2CAAA,CAAA,YAAA,CAAA,CAAW,OAAX,CAAmB,CAAC,2CAAA,CAAA,YAAA,CAAA,CAAW,QAAZ,CAAnB,CAAP,CANiB;AAOxB,YAAA,IAAI,EAAE,CAAC,IAAD,EAAO,2CAAA,CAAA,YAAA,CAAA,CAAW,OAAX,CAAmB,CAAC,2CAAA,CAAA,YAAA,CAAA,CAAW,QAAZ,CAAnB,CAAP,CAPkB;AAQxB,YAAA,SAAS,EAAE,CAAC,IAAD,EAAO,2CAAA,CAAA,YAAA,CAAA,CAAW,OAAX,CAAmB,CAAC,2CAAA,CAAA,YAAA,CAAA,CAAW,QAAZ,CAAnB,CAAP,CARa;AASxB,YAAA,aAAa,EAAE,CAAC,IAAD,EAAO,2CAAA,CAAA,YAAA,CAAA,CAAW,OAAX,CAAmB,CAAC,2CAAA,CAAA,YAAA,CAAA,CAAW,QAAZ,CAAnB,CAAP,CATS;AAUxB,YAAA,KAAK,EAAE,CAAC,IAAD,EAAO,2CAAA,CAAA,YAAA,CAAA,CAAW,OAAX,CAAmB,CAAC,2CAAA,CAAA,YAAA,CAAA,CAAW,QAAZ,CAAnB,CAAP,CAViB;AAWxB,YAAA,GAAG,EAAE,CAAC,IAAD,EAAO,2CAAA,CAAA,YAAA,CAAA,CAAW,OAAX,CAAmB,CAAC,2CAAA,CAAA,YAAA,CAAA,CAAW,QAAZ,CAAnB,CAAP,CAXmB;AAYxB,YAAA,YAAY,EAAE,CAAC,IAAD,EAAO,2CAAA,CAAA,YAAA,CAAA,CAAW,OAAX,CAAmB,CAAC,2CAAA,CAAA,YAAA,CAAA,CAAW,QAAZ,CAAnB,CAAP,CAZU;AAaxB,YAAA,QAAQ,EAAE,KAAK,EAAL,CAAQ,KAAR,CAAc,CAAC,KAAK,aAAL,EAAD,CAAd;AAbc,WAAd,CAAZ,CADM,CAiBN;;AACA,eAAK,WAAL,GAAmB,KAAK,IAAL,CAAU,GAAV,CAAc,UAAd,CAAnB;AACD,SA/BH,CAiCE;;AAjCF;AAAA;AAAA,wCAkCe;AACX,iBAAO,KAAK,EAAL,CAAQ,KAAR,CAAc;AACnB;AACA,YAAA,IAAI,EAAE,CAAC,IAAD,EAAO,2CAAA,CAAA,YAAA,CAAA,CAAW,OAAX,CAAmB,CAAC,2CAAA,CAAA,YAAA,CAAA,CAAW,QAAZ,CAAnB,CAAP,CAFa;AAGnB,YAAA,MAAM,EAAE,CAAC,IAAD,EAAO,2CAAA,CAAA,YAAA,CAAA,CAAW,OAAX,CAAmB,CAAC,2CAAA,CAAA,YAAA,CAAA,CAAW,QAAZ,CAAnB,CAAP,CAHW;AAInB,YAAA,SAAS,EAAE,CAAC,IAAD,EAAO,2CAAA,CAAA,YAAA,CAAA,CAAW,OAAX,CAAmB,CAAC,2CAAA,CAAA,YAAA,CAAA,CAAW,QAAZ,EAAsB,2CAAA,CAAA,YAAA,CAAA,CAAW,QAAjC,CAAnB,CAAP,CAJQ;AAKnB,YAAA,KAAK,EAAE,CAAC,IAAD,EAAO,2CAAA,CAAA,YAAA,CAAA,CAAW,OAAX,CAAmB,CAAC,2CAAA,CAAA,YAAA,CAAA,CAAW,QAAZ,EAAsB,2CAAA,CAAA,YAAA,CAAA,CAAW,KAAjC,CAAnB,CAAP;AALY,WAAd,CAAP;AAOD,SA1CH,CA6CE;;AA7CF;AAAA;AAAA,yCA8CgB;AACZ,eAAK,WAAL,CAAiB,IAAjB,CAAsB,KAAK,aAAL,EAAtB;AACD,SAhDH,CAkDE;;AAlDF;AAAA;AAAA,sCAmDgB,KAnDhB,EAmDqB;AACjB;AACA,eAAK,WAAL,CAAiB,QAAjB,CAA0B,KAA1B;AACD,SAtDH,CAwDE;;AAxDF;AAAA;AAAA,yCAyDmB,KAzDnB,EAyDwB;AACpB,cAAI,UAAU,GAAG,IAAjB;;AAEA,cAAI,KAAK,oBAAL,CAA0B,KAA1B,EAAiC,QAAjC,CAA0C,MAA1C,EAAkD,KAAlD,KAA4D,OAAhE,EAAyE;AACvE,YAAA,UAAU,GAAG,2CAAA,CAAA,YAAA,CAAA,CAAW,OAAX,CAAmB,CAAC,2CAAA,CAAA,YAAA,CAAA,CAAW,QAAZ,EAAsB,2CAAA,CAAA,YAAA,CAAA,CAAW,KAAjC,CAAnB,CAAb;AACD,WAFD,MAEO;AACL,YAAA,UAAU,GAAG,2CAAA,CAAA,YAAA,CAAA,CAAW,OAAX,CAAmB,CAC9B,2CAAA,CAAA,YAAA,CAAA,CAAW,QADmB,EAE9B,2CAAA,CAAA,YAAA,CAAA,CAAW,OAAX,CAAmB,IAAI,MAAJ,CAAW,iCAAX,CAAnB,CAF8B,CAEoC;AAFpC,aAAnB,CAAb;AAID;;AAED,eAAK,oBAAL,CAA0B,KAA1B,EAAiC,QAAjC,CAA0C,OAA1C,EAAmD,aAAnD,CACE,UADF;AAIA,eAAK,oBAAL,CAA0B,KAA1B,EAAiC,QAAjC,CAA0C,OAA1C,EAAmD,sBAAnD;AACD,SA1EH,CA4EE;;AA5EF;AAAA;AAAA,6CA6EuB,KA7EvB,EA6E4B;AACxB;AACA,cAAM,SAAS,GAAG,KAAK,WAAL,CAAiB,QAAjB,CAA0B,KAA1B,CAAlB;AACA,iBAAO,SAAP;AACD,SAjFH,CAmFE;;AAnFF;AAAA;AAAA,iCAoFQ;AACJ,UAAA,OAAO,CAAC,GAAR,CAAY,KAAK,IAAL,CAAU,KAAtB;AACD;AAtFH;AAAA;AAAA,4BAMsB;AAClB,iBAAO,KAAK,IAAL,CAAU,GAAV,CAAc,UAAd,CAAP;AACD;AARH;;AAAA;AAAA,OAAA;;;;cAU0B,2CAAA,CAAA,aAAA;;;;AAVb,IAAA,kBAAkB,GAAA,kCAAA,CAAA,YAAA,CAAA,CAAA,CAL9B,MAAA,CAAA,0CAAA,CAAA,WAAA,CAAA,CAAA,CAAU;AACT,MAAA,QAAQ,EAAE,eADD;AAET,MAAA,QAAA,EAAA,kCAAA,CAAA,iBAAA,CAAA,CAAA,mBAAA;AAAA;AAAA,0FAAA,CAAA,EAAA,OAFS;;;;AAAA,KAAV,CAK8B,CAAA,EAAlB,kBAAkB,CAAlB;;;;;;;;;;;;;;;;ACRb,IAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA;AAAe;;;AAAA,IAAA,mBAAA,CAAA,SAAA,CAAA,GAAA,23DAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACQf,QAAa,iBAAb;AAAA;AAAA;AAME,iCAAoB,WAApB,EAA4C;AAAA;;AAAxB,aAAA,WAAA,GAAA,WAAA;AALpB,aAAA,IAAA,GAAY,EAAZ;AACA,aAAA,YAAA,GAAe,KAAf;AACA,aAAA,cAAA,GAAiB,KAAjB;AACA,aAAA,YAAA,GAAe,EAAf;AAEiD;;AANnD;AAAA;AAAA,mCAQU,CACP;AATH;AAAA;AAAA,mCAWU;AAAA;;AACN,eAAK,WAAL,CAAiB,QAAjB,CAA0B,KAAK,IAA/B,EAAqC,SAArC,CACE,UAAA,IAAI,EAAG;AACL,YAAA,OAAO,CAAC,GAAR,CAAY,IAAZ;AACA,YAAA,OAAI,CAAC,YAAL,GAAoB,IAApB;AACA,YAAA,OAAI,CAAC,cAAL,GAAsB,KAAtB;AACD,WALH,EAME,UAAA,GAAG,EAAG;AACJ,YAAA,OAAI,CAAC,YAAL,GAAoB,GAAG,CAAC,KAAJ,CAAU,OAA9B;AACA,YAAA,OAAI,CAAC,cAAL,GAAsB,IAAtB;AACD,WATH;AAWD;AAvBH;;AAAA;AAAA,OAAA;;;;cAMmC,mDAAA,CAAA,aAAA;;;;AANtB,IAAA,iBAAiB,GAAA,kCAAA,CAAA,YAAA,CAAA,CAAA,CAL7B,MAAA,CAAA,0CAAA,CAAA,WAAA,CAAA,CAAA,CAAU;AACT,MAAA,QAAQ,EAAE,cADD;AAET,MAAA,QAAA,EAAA,kCAAA,CAAA,iBAAA,CAAA,CAAA,mBAAA;AAAA;AAAA,wFAAA,CAAA,EAAA,OAFS;;;;AAAA,KAAV,CAK6B,CAAA,EAAjB,iBAAiB,CAAjB;;;;;;;;;;;;;;;;ACRb,IAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA;AAAA;;;AAAA,IAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,EAAA,aAAA,EAAA,YAAA;AAAA,aAAA,WAAA;AAAA,KAAA;AAAA;;;AAAA,QAAA,kCAAA,GAAA,mBAAA;AAAA;AAAA,uCAAA,CAAA,C,CAAA;AACA;AACA;;;AAEO,QAAM,WAAW,GAAG;AACzB,MAAA,UAAU,EAAE;AADa,KAApB;AAIP;;;;;;;AAOA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACRA,QAAI,sDAAA,CAAA,aAAA,CAAA,CAAY,UAAhB,EAA4B;AAC1B,MAAA,MAAA,CAAA,0CAAA,CAAA,gBAAA,CAAA,CAAA;AACD;;AAED,IAAA,MAAA,CAAA,8DAAA,CAAA,wBAAA,CAAA,CAAA,GAAyB,eAAzB,CAAyC,4CAAA,CAAA,WAAA,CAAzC,EACG,KADH,CACS,UAAA,GAAG;AAAA,aAAI,OAAO,CAAC,KAAR,CAAc,GAAd,CAAJ;AAAA,KADZ","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","export default \"<p>afficher-contact works!</p>\\n\"","export default \"<div class=\\\"container-fluid\\\">\\n<div class=\\\"col-md-12\\\">\\n  <app-header></app-header>\\n</div>\\n<div class=\\\"row mr-2 ml-2\\\">\\n  <!--nav class=\\\"col-md-2\\\" *ngIf=\\\"isLoggedIn\\\">\\n    <app-menu></app-menu>\\n  </nav-->\\n  <section class=\\\"col-md-12\\\" [ngClass]=\\\"isLoggedIn?'col-md-12':'offset-1 col-md-12'\\\">\\n    <router-outlet></router-outlet>\\n  </section>\\n</div>\\n<footer class=\\\"row mr-2 ml-2 mt-3\\\" *ngIf=\\\"isLoggedIn\\\">\\n  <div class=\\\"col-md-12\\\" class=\\\"footer\\\">\\n    Pied de page\\n  </div>\\n</footer>\\n</div>\"","export default \"<div class=\\\"container\\\">\\n  <header class=\\\"jumbotron\\\">\\n    <p>{{ content }}</p>\\n  </header>\\n</div>\\n\"","export default \"<div class=\\\"container\\\">\\n  <header class=\\\"jumbotron\\\">\\n    <p>{{ content }}</p>\\n  </header>\\n</div>\\n\"","export default \"<div class=\\\"container\\\">\\n  <header class=\\\"jumbotron\\\">\\n    <p>{{ content }}</p>\\n  </header>\\n</div>\\n\"","export default \"<form [formGroup]=\\\"form\\\">\\n    <table>\\n        <tr>\\n            <td class=\\\"decalage-label\\\">Nom</td>\\n            <td>\\n                <mat-form-field>\\n                    <input matInput formControlName=\\\"nom\\\">\\n                    <mat-error *ngIf=\\\"form.controls['nom'].touched && form.controls['nom'].hasError('required')\\\">\\n                        Nom est <strong>obligatoire</strong>\\n                    </mat-error>\\n                </mat-form-field>\\n            </td>\\n            <td class=\\\"decalage-label\\\">Prenom</td>\\n            <td>\\n                <mat-form-field class=\\\"example-full-width\\\">\\n                    <input matInput formControlName=\\\"prenom\\\">\\n                    <mat-error *ngIf=\\\"form.controls['prenom'].touched && form.controls['prenom'].hasError('required')\\\">\\n                        Prenom est <strong>obligatoire</strong>\\n                    </mat-error>\\n                </mat-form-field>\\n            </td>\\n        </tr>\\n        <td class=\\\"decalage-label\\\">Tel Fixe</td>\\n        <td>\\n            <mat-form-field>\\n                <input type=\\\"tel\\\" matInput formControlName=\\\"telephoneFixe\\\">\\n                <mat-icon matSuffix>phone</mat-icon>\\n            </mat-form-field>\\n            <mat-error\\n                *ngIf=\\\"form.controls['telephoneFixe'].touched && form.controls['telephoneFixe'].hasError('required')\\\">\\n                Tel fixe est <strong>obligatoire</strong>\\n            </mat-error>\\n        </td>\\n        <td class=\\\"decalage-label\\\">Tel Mobile</td>\\n        <td>\\n            <mat-form-field class=\\\"example-full-width\\\">\\n                <input type=\\\"tel\\\" matInput formControlName=\\\"telephone\\\">\\n                <mat-icon matSuffix>phone</mat-icon>\\n            </mat-form-field>\\n            <mat-error *ngIf=\\\"form.controls['telephone'].touched && form.controls['telephone'].hasError('required')\\\">\\n                Tel fixe est <strong>obligatoire</strong>\\n            </mat-error>\\n        </td>\\n        <tr>\\n            <td class=\\\"decalage-label\\\">Email</td>\\n            <td>\\n                <mat-form-field class=\\\"example-full-width\\\">\\n                    <input type=\\\"tel\\\" matInput formControlName=\\\"email\\\">\\n                    <mat-icon matSuffix>email</mat-icon>\\n                </mat-form-field>\\n                <mat-error\\n                    *ngIf=\\\"form.controls['email'].hasError('email') && !form.controls['email'].hasError('required')\\\">\\n                    Please enter a valid email address\\n                </mat-error>\\n                <mat-error *ngIf=\\\"form.controls['email'].touched && form.controls['email'].hasError('required')\\\">\\n                    Email est <strong>obligatoire</strong>\\n                </mat-error>\\n            </td>\\n            <td class=\\\"decalage-label\\\">Lien vers un site web</td>\\n            <td>\\n                <mat-form-field class=\\\"example-full-width\\\">\\n                    <input type=\\\"tel\\\" matInput formControlName=\\\"siteInternet\\\">\\n                    <mat-icon matSuffix>satellite</mat-icon>\\n                </mat-form-field>\\n                <mat-error\\n                    *ngIf=\\\"form.controls['siteInternet'].touched && form.controls['siteInternet'].hasError('required')\\\">\\n                    Site Internet est <strong>obligatoire</strong>\\n                </mat-error>\\n            </td>\\n        </tr>\\n        <tr>\\n            <td class=\\\"decalage-label\\\">Adresse</td>\\n            <td>\\n                <mat-form-field>\\n                    <input matInput placeholder=\\\"Rue...\\\">\\n                </mat-form-field>\\n            </td>\\n\\n\\n            <td class=\\\"decalage-label\\\"> Lien avec le bénéficiaire</td>\\n            <td>\\n                <mat-form-field appearance=\\\"fill\\\">\\n                    <select matNativeControl>\\n                        <option selected></option>\\n                        <option>Conjoint(e)</option>\\n                        <option>Enfant</option>\\n                        <option>Parent</option>\\n                        <option>Autre</option>\\n                    </select>\\n                </mat-form-field>\\n            </td>\\n\\n        </tr>\\n\\n        <tr>\\n            <td class=\\\"decalage-label\\\">Code Postal</td>\\n            <td>\\n                <mat-form-field>\\n                    <input matInput placeholder=\\\"Code Postal\\\">\\n                </mat-form-field>\\n            </td>\\n        </tr>\\n        <tr>\\n            <td class=\\\"decalage-label\\\">Ville</td>\\n            <td>\\n                <mat-form-field>\\n                    <input matInput placeholder=\\\"Ville\\\">\\n                </mat-form-field>\\n            </td>\\n        </tr>\\n\\n        <tr>\\n            <td class=\\\"decalage-label\\\">Pays</td>\\n            <td>\\n                <mat-form-field>\\n                    <input matInput placeholder=\\\"Pays\\\">\\n                </mat-form-field>\\n            </td>\\n        </tr>\\n\\n        <tr>\\n            <td class=\\\"decalage-label\\\">Zone Géographique</td>\\n            <td>\\n                <mat-form-field>\\n                    <input matInput placeholder=\\\"Zone Géographique\\\">\\n                </mat-form-field>\\n            </td>\\n        </tr>\\n\\n        <tr>\\n            <td class=\\\"decalage-label\\\"></td>\\n            <td>\\n                <mat-form-field>\\n                    <input matInput>\\n                </mat-form-field>\\n            </td>\\n        </tr>\\n\\n    </table>\\n\\n    <div style=\\\"padding-top:2em\\\">\\n        <button mat-raised-button color=\\\"primary\\\" (click)=\\\"addBeneficiaires()\\\">Enregistrer</button>\\n        <button mat-button color=\\\"warn\\\">Annuler</button>\\n    </div>\\n</form>\"","export default \"<form [formGroup]=\\\"form\\\" (submit)=\\\"submit()\\\" style=\\\"border: medium;padding-top:2em\\\">\\n    <div>\\n        <mat-card style=\\\"background: azure;\\\">\\n            <h2>Nouveau contact</h2>\\n            <button mat-raised-button color=\\\"primary\\\" (click)=\\\"sauvegarderContact()\\\">Sauvegarder</button>\\n            <button mat-button color=\\\"warn\\\" (click)=\\\"cancel()\\\">Annuler</button>\\n        </mat-card>\\n    </div>\\n\\n    <br>\\n\\n    <mat-radio-group aria-label=\\\"Select a type\\\" [(ngModel)]=\\\"contact.typeContact\\\" formControlName=\\\"typeContact\\\"\\n        (change)=\\\"typeContactChoosed($event)\\\">\\n        <mat-radio-button value=\\\"PARTICULIER\\\">PARTICULIER&nbsp;</mat-radio-button>\\n        <mat-radio-button value=\\\"SOCIETE\\\">SOCIETE</mat-radio-button>\\n    </mat-radio-group>\\n\\n    <mat-card>\\n        <table>\\n            <tr *ngIf=\\\"isParticulier\\\">\\n                <td class=\\\"decalage-label\\\">Civilité</td>\\n                <td>\\n                    <mat-form-field appearance=\\\"fill\\\" style=\\\"width: 13% !important\\\">\\n                        <select matNativeControl formControlName=\\\"civilite\\\" [(ngModel)]=\\\"contact.civilite\\\">\\n                            <option selected></option>\\n                            <option>Mr</option>\\n                            <option>Mme</option>\\n                            <option>Mlle</option>\\n                            <option>S.E.M</option>\\n                        </select>\\n                    </mat-form-field>\\n                    <mat-form-field style=\\\"padding-left: 1em;width: 45% !important\\\">\\n                        <input matInput placeholder=\\\"Nom\\\" [(ngModel)]=\\\"contact.nom\\\" formControlName=\\\"nom\\\">\\n                        <mat-error *ngIf=\\\"form.controls['nom'].touched && form.controls['nom'].hasError('required')\\\">\\n                            Nom est <strong>obligatoire</strong>\\n                        </mat-error>\\n                    </mat-form-field>\\n                </td>\\n                <td class=\\\"decalage-label\\\">Prénom</td>\\n                <td>\\n                    <mat-form-field class=\\\"example-full-width\\\">\\n                        <input matInput [(ngModel)]=\\\"contact.prenom\\\" formControlName=\\\"prenom\\\">\\n                        <mat-error\\n                            *ngIf=\\\"form.controls['prenom'].touched && form.controls['prenom'].hasError('required')\\\">\\n                            Prenom est <strong>obligatoire</strong>\\n                        </mat-error>\\n                    </mat-form-field>\\n                </td>\\n            </tr>\\n\\n            <tr *ngIf=\\\"!isParticulier\\\">\\n                <td class=\\\"decalage-label\\\">Raison Sociale</td>\\n                <td>\\n                    <mat-form-field>\\n                        <input matInput [(ngModel)]=\\\"contact.raisonSociale\\\" formControlName=\\\"raisonSociale\\\">\\n                        <mat-error\\n                            *ngIf=\\\"form.controls['raisonSociale'].touched && form.controls['raisonSociale'].hasError('required')\\\">\\n                            raison sociale est <strong>obligatoire</strong>\\n                        </mat-error>\\n                    </mat-form-field>\\n                </td>\\n                <td class=\\\"decalage-label\\\">Siren</td>\\n                <td>\\n                    <mat-form-field class=\\\"example-full-width\\\">\\n                        <input matInput [(ngModel)]=\\\"contact.siren\\\" formControlName=\\\"siren\\\">\\n                        <mat-error\\n                            *ngIf=\\\"form.controls['siren'].touched && form.controls['siren'].hasError('required')\\\">\\n                            Siren est <strong>obligatoire</strong>\\n                        </mat-error>\\n                    </mat-form-field>\\n                </td>\\n            </tr>\\n\\n            <tr *ngIf=\\\"!isParticulier\\\">\\n                <td class=\\\"decalage-label\\\">Activité Principale</td>\\n                <td>\\n                    <mat-form-field appearance=\\\"fill\\\">\\n                        <select matNativeControl [(ngModel)]=\\\"contact.activitePrincipale\\\"\\n                            formControlName=\\\"activitePrincipale\\\">\\n                            <option value=\\\"\\\" selected></option>\\n                            <option>Agriculture/Agroalimentaire/Environnement</option>\\n                            <option>Associatif/Art/Culture</option>\\n                            <option> Banques/Assurances/Finances</option>\\n                            <option>Commerce/Distribution</option>\\n                            <option>Communication/Publicité/Média</option>\\n                            <option>Conseil/Consulting</option>\\n                        </select>\\n                    </mat-form-field>\\n                </td>\\n\\n                <td class=\\\"decalage-label\\\">Effectif</td>\\n                <td>\\n                    <mat-form-field appearance=\\\"fill\\\">\\n                        <input matInput [(ngModel)]=\\\"contact.tailleEntreprise\\\" formControlName=\\\"tailleEntreprise\\\">\\n                    </mat-form-field>\\n                </td>\\n            </tr>\\n\\n            <tr>\\n                <td *ngIf=\\\"isParticulier\\\" class=\\\"decalage-label\\\">Fonction</td>\\n                <td *ngIf=\\\"isParticulier\\\">\\n                    <mat-form-field appearance=\\\"fill\\\">\\n                        <select matNativeControl formControlName=\\\"fonction\\\" [(ngModel)]=\\\"contact.fonction\\\">\\n                            <option selected></option>\\n                            <option>PDG</option>\\n                            <option>DG</option>\\n                            <option>DG Adjoint</option>\\n                        </select>\\n                    </mat-form-field>\\n                </td>\\n\\n                <td class=\\\"decalage-label\\\">Tél Fixe</td>\\n                <td>\\n                    <mat-form-field class=\\\"example-full-width\\\">\\n                        <input type=\\\"tel\\\" matInput formControlName=\\\"telephoneFixe\\\" [(ngModel)]=\\\"contact.telephoneFixe\\\">\\n                        <mat-icon matSuffix>phone</mat-icon>\\n                    </mat-form-field>\\n                    <mat-error\\n                        *ngIf=\\\"form.controls['telephoneFixe'].touched && form.controls['telephoneFixe'].hasError('required')\\\">\\n                        Tél fixe est <strong>obligatoire</strong>\\n                    </mat-error>\\n                </td>\\n                <td *ngIf=\\\"!isParticulier\\\" class=\\\"decalage-label\\\">Email</td>\\n                <td *ngIf=\\\"!isParticulier\\\">\\n                    <mat-form-field class=\\\"example-full-width\\\">\\n                        <input type=\\\"tel\\\" matInput formControlName=\\\"emailPerso\\\" [(ngModel)]=\\\"contact.emailPerso\\\">\\n                        <mat-icon matSuffix>email</mat-icon>\\n                    </mat-form-field>\\n                    <mat-error\\n                        *ngIf=\\\"form.controls['emailPerso'].hasError('email') && !form.controls['emailPerso'].hasError('required')\\\">\\n                        Please enter a valid email address\\n                    </mat-error>\\n                    <mat-error\\n                        *ngIf=\\\"form.controls['emailPerso'].touched && form.controls['emailPerso'].hasError('required')\\\">\\n                        Email Perso est <strong>obligatoire</strong>\\n                    </mat-error>\\n                </td>\\n                \\n            </tr>\\n\\n            <tr>\\n                <td *ngIf=\\\"!isParticulier\\\" class=\\\"decalage-label\\\">Contact Principal</td>\\n                <td *ngIf=\\\"!isParticulier\\\">\\n                    <mat-form-field>\\n                        <input matInput formControlName=\\\"contactPrincipalNom\\\" [(ngModel)]=\\\"contact.contactPrincipalNom\\\"\\n                            placeholder=\\\"Nom\\\">\\n                    </mat-form-field>\\n                </td>\\n                <td *ngIf=\\\"!isParticulier\\\" class=\\\"decalage-label\\\">Contact Sécondaire</td>\\n                <td *ngIf=\\\"!isParticulier\\\">\\n                    <mat-form-field>\\n                        <input matInput formControlName=\\\"contactSecondaireNom\\\"\\n                            [(ngModel)]=\\\"contact.contactSecondaireNom\\\" placeholder=\\\"Nom\\\">\\n                    </mat-form-field>\\n                </td>\\n            </tr>\\n\\n            <tr>\\n                <td *ngIf=\\\"!isParticulier\\\" class=\\\"decalage-label\\\"></td>\\n                <td *ngIf=\\\"!isParticulier\\\">\\n                    <mat-form-field>\\n                        <input matInput formControlName=\\\"contactPrincipalNom\\\" [(ngModel)]=\\\"contact.contactPrincipalNom\\\"\\n                            placeholder=\\\"Fonction\\\">\\n                    </mat-form-field>\\n                </td>\\n                <td *ngIf=\\\"!isParticulier\\\" class=\\\"decalage-label\\\"></td>\\n                <td *ngIf=\\\"!isParticulier\\\">\\n                    <mat-form-field>\\n                        <input matInput formControlName=\\\"contactSecondaireNom\\\"\\n                            [(ngModel)]=\\\"contact.contactSecondaireNom\\\" placeholder=\\\"Fonction\\\">\\n                    </mat-form-field>\\n                </td>\\n            </tr>\\n\\n            <tr>\\n                <td *ngIf=\\\"!isParticulier\\\" class=\\\"decalage-label\\\"></td>\\n                <td *ngIf=\\\"!isParticulier\\\">\\n                    <mat-form-field style=\\\"padding-left: 1em;\\\">\\n                        <input matInput formControlName=\\\"contactPrincipalTelephoneMobile\\\"\\n                            [(ngModel)]=\\\"contact.contactPrincipalTelephoneMobile\\\" placeholder=\\\"Tél Mobile\\\">\\n                        <mat-icon matSuffix>phone</mat-icon>\\n                    </mat-form-field>\\n                </td>\\n\\n                <td *ngIf=\\\"!isParticulier\\\" class=\\\"decalage-label\\\"></td>\\n                <td *ngIf=\\\"!isParticulier\\\">\\n                    <mat-form-field style=\\\"padding-left: 1em;\\\">\\n                        <input matInput formControlName=\\\"contactSecondaireTelephoneMobile\\\"\\n                            [(ngModel)]=\\\"contact.contactSecondaireTelephoneMobile\\\" placeholder=\\\"Tél Mobile\\\">\\n                        <mat-icon matSuffix>phone</mat-icon>\\n                    </mat-form-field>\\n                </td>\\n                \\n            </tr>\\n\\n            <tr>\\n                <td *ngIf=\\\"!isParticulier\\\" class=\\\"decalage-label\\\"></td>\\n                <td *ngIf=\\\"!isParticulier\\\">\\n                    <mat-form-field style=\\\"padding-left: 1em;\\\">\\n                        <input matInput formControlName=\\\"contactPrincipalTelephoneMobile\\\"\\n                            [(ngModel)]=\\\"contact.contactPrincipalTelephoneMobile\\\" placeholder=\\\"Tél Fixe\\\">\\n                        <mat-icon matSuffix>phone</mat-icon>\\n                    </mat-form-field>\\n                </td>\\n\\n                <td *ngIf=\\\"!isParticulier\\\" class=\\\"decalage-label\\\"></td>\\n                <td *ngIf=\\\"!isParticulier\\\">\\n                    <mat-form-field style=\\\"padding-left: 1em;\\\">\\n                        <input matInput formControlName=\\\"contactSecondaireTelephoneMobile\\\"\\n                            [(ngModel)]=\\\"contact.contactSecondaireTelephoneMobile\\\" placeholder=\\\"Tél Fixe\\\">\\n                        <mat-icon matSuffix>phone</mat-icon>\\n                    </mat-form-field>\\n                </td>\\n            </tr>\\n            <tr>\\n                <td *ngIf=\\\"!isParticulier\\\" class=\\\"decalage-label\\\"></td>\\n                <td *ngIf=\\\"!isParticulier\\\">\\n                    <mat-form-field>\\n                        <input matInput formControlName=\\\"contactPrincipalEmail\\\"\\n                            [(ngModel)]=\\\"contact.contactPrincipalEmail\\\" placeholder=\\\"Email\\\">\\n                        <mat-icon matSuffix>email</mat-icon>\\n\\n                    </mat-form-field>\\n\\n                    <mat-error\\n                        *ngIf=\\\"form.controls['contactPrincipalEmail'].hasError('email') && !form.controls['contactPrincipalEmail'].hasError('required')\\\">\\n                        Please enter a valid email address\\n                    </mat-error>\\n                </td>\\n\\n                <td *ngIf=\\\"!isParticulier\\\" class=\\\"decalage-label\\\"></td>\\n                <td *ngIf=\\\"!isParticulier\\\">\\n                    <mat-form-field>\\n                        <input matInput formControlName=\\\"contactSecondaireEmail\\\"\\n                            [(ngModel)]=\\\"contact.contactSecondaireEmail\\\" placeholder=\\\"Email\\\">\\n                        <mat-icon matSuffix>email</mat-icon>\\n                    </mat-form-field>\\n                    <mat-error\\n                        *ngIf=\\\"form.controls['contactSecondaireEmail'].hasError('email') && !form.controls['contactSecondaireEmail'].hasError('required')\\\">\\n                        Please enter a valid email address\\n                    </mat-error>\\n\\n                </td>\\n            </tr>\\n\\n            <tr *ngIf=\\\"isParticulier\\\">\\n                <td class=\\\"decalage-label\\\">Tél Mobile 1</td>\\n                <td>\\n                    <mat-form-field>\\n                        <input type=\\\"tel\\\" matInput formControlName=\\\"telephoneMobile1\\\"\\n                            [(ngModel)]=\\\"contact.telephoneMobile1\\\">\\n                        <mat-icon matSuffix>phone</mat-icon>\\n                    </mat-form-field>\\n                    <mat-error\\n                        *ngIf=\\\"form.controls['telephoneMobile1'].touched && form.controls['telephoneMobile1'].hasError('required')\\\">\\n                        Tél Mobile 1 est <strong>obligatoire</strong>\\n                    </mat-error>\\n                </td>\\n                <td class=\\\"decalage-label\\\">Tél Mobile 2</td>\\n                <td>\\n                    <mat-form-field class=\\\"example-full-width\\\">\\n                        <input type=\\\"tel\\\" matInput formControlName=\\\"telephoneMobile2\\\"\\n                            [(ngModel)]=\\\"contact.telephoneMobile2\\\">\\n                        <mat-icon matSuffix>phone</mat-icon>\\n                    </mat-form-field>\\n                    <mat-error\\n                        *ngIf=\\\"form.controls['telephoneMobile2'].touched && form.controls['telephoneMobile2'].hasError('required')\\\">\\n                        Tél mobile 2 est <strong>obligatoire</strong>\\n                    </mat-error>\\n                </td>\\n            </tr>\\n\\n            <tr *ngIf=\\\"isParticulier\\\">\\n                <td class=\\\"decalage-label\\\">Email Perso</td>\\n                <td>\\n                    <mat-form-field class=\\\"example-full-width\\\">\\n                        <input type=\\\"tel\\\" matInput formControlName=\\\"emailPerso\\\" [(ngModel)]=\\\"contact.emailPerso\\\">\\n                        <mat-icon matSuffix>email</mat-icon>\\n                    </mat-form-field>\\n                    <mat-error\\n                        *ngIf=\\\"form.controls['emailPerso'].hasError('email') && !form.controls['emailPerso'].hasError('required')\\\">\\n                        Please enter a valid email address\\n                    </mat-error>\\n                    <mat-error\\n                        *ngIf=\\\"form.controls['emailPerso'].touched && form.controls['emailPerso'].hasError('required')\\\">\\n                        Email Perso est <strong>obligatoire</strong>\\n                    </mat-error>\\n                </td>\\n\\n                <td class=\\\"decalage-label\\\">Email Pro</td>\\n                <td>\\n                    <mat-form-field class=\\\"example-full-width\\\">\\n                        <input type=\\\"tel\\\" matInput formControlName=\\\"emailPro\\\" [(ngModel)]=\\\"contact.emailPro\\\">\\n                        <mat-icon matSuffix>email</mat-icon>\\n                    </mat-form-field>\\n                    <mat-error\\n                        *ngIf=\\\"form.controls['emailPro'].hasError('email') && !form.controls['emailPro'].hasError('required')\\\">\\n                        Please enter a valid email address\\n                    </mat-error>\\n                    <mat-error\\n                        *ngIf=\\\"form.controls['emailPro'].touched && form.controls['emailPro'].hasError('required')\\\">\\n                        Email Pro est <strong>obligatoire</strong>\\n                    </mat-error>\\n                </td>\\n            </tr>\\n\\n            <tr *ngIf=\\\"isParticulier\\\">\\n                <td class=\\\"decalage-label\\\">Structure</td>\\n                <td>\\n                    <mat-form-field>\\n                        <input matInput placeholder=\\\"Structure ...\\\" formControlName=\\\"structure\\\"\\n                            [(ngModel)]=\\\"contact.structure\\\">\\n                    </mat-form-field>\\n                </td>\\n\\n                <td class=\\\"decalage-label\\\">Activité</td>\\n                <td>\\n                    <mat-form-field>\\n                        <input matInput placeholder=\\\"Activité ...\\\" formControlName=\\\"activite\\\"\\n                            [(ngModel)]=\\\"contact.activite\\\">\\n                    </mat-form-field>\\n                </td>\\n            </tr>\\n\\n\\n            <tr>\\n                <td *ngIf=\\\"isParticulier\\\" class=\\\"decalage-label\\\">Adresse Perso</td>\\n                <td *ngIf=\\\"isParticulier\\\">\\n                    <mat-form-field>\\n                        <input matInput formControlName=\\\"adressePerso\\\" [(ngModel)]=\\\"contact.adressePerso\\\"\\n                            placeholder=\\\"Rue...\\\">\\n                    </mat-form-field>\\n                </td>\\n                <td *ngIf=\\\"isParticulier\\\" class=\\\"decalage-label\\\">Adresse Pro</td>\\n                <td *ngIf=\\\"!isParticulier\\\" class=\\\"decalage-label\\\">Adresse</td>\\n                <td>\\n                    <mat-form-field>\\n                        <input matInput formControlName=\\\"adressePro\\\" [(ngModel)]=\\\"contact.adressePro\\\"\\n                            placeholder=\\\"Rue...\\\">\\n                    </mat-form-field>\\n                </td>\\n                \\n            </tr>\\n\\n            <tr>\\n                <td *ngIf=\\\"isParticulier\\\" class=\\\"decalage-label\\\">Code Postal</td>\\n                <td *ngIf=\\\"isParticulier\\\">\\n                    <mat-form-field style=\\\"padding-left: 1em;\\\">\\n                        <input matInput formControlName=\\\"adressePersoCodePostal\\\"\\n                            [(ngModel)]=\\\"contact.adressePersoCodePostal\\\" placeholder=\\\"Code Postal\\\">\\n                    </mat-form-field>\\n                </td>\\n\\n                <td class=\\\"decalage-label\\\">Code Postal</td>\\n                <td>\\n                    <mat-form-field style=\\\"padding-left: 1em;\\\">\\n                        <input matInput formControlName=\\\"adresseProCodePostal\\\"\\n                            [(ngModel)]=\\\"contact.adresseProCodePostal\\\" placeholder=\\\"Code Postal\\\">\\n                    </mat-form-field>\\n                </td>\\n\\n            </tr>\\n            <tr>\\n                <td *ngIf=\\\"isParticulier\\\" class=\\\"decalage-label\\\"> Ville</td>\\n                <td *ngIf=\\\"isParticulier\\\">\\n                    <mat-form-field>\\n                        <input matInput formControlName=\\\"adressePersoVille\\\" [(ngModel)]=\\\"contact.adressePersoVille\\\"\\n                            placeholder=\\\"Ville\\\">\\n                    </mat-form-field>\\n\\n                <td class=\\\"decalage-label\\\"> Ville</td>\\n                <td>\\n                    <mat-form-field>\\n                        <input matInput formControlName=\\\"adresseProVille\\\" [(ngModel)]=\\\"contact.adresseProVille\\\"\\n                            placeholder=\\\"Ville\\\">\\n                    </mat-form-field>\\n\\n                </td>\\n            </tr>\\n\\n            <tr>\\n                <td *ngIf=\\\"isParticulier\\\" class=\\\"decalage-label\\\">Pays</td>\\n                <td *ngIf=\\\"isParticulier\\\">\\n                    <mat-form-field>\\n                        <mat-select  >\\n                            <mat-option  *ngFor=\\\"let pays of allPays; let i = index\\\" [value]=\\\"pays\\\">\\n                                {{ pays.nom_fr_fr}}\\n                            </mat-option>\\n                        </mat-select>\\n                    </mat-form-field>\\n\\n                <td class=\\\"decalage-label\\\">Pays</td>\\n                <td>\\n                    <mat-form-field>\\n                        <mat-select  >\\n                            <mat-option [(ngModel)]=\\\"contact.adressePeroPays\\\" *ngFor=\\\"let pays of allPays; let i = index\\\" [value]=\\\"pays\\\">\\n                                {{ pays.nom_fr_fr}}\\n                            </mat-option>\\n                        </mat-select>\\n                    </mat-form-field>\\n\\n                </td>\\n            </tr>\\n\\n            <tr>\\n                <td *ngIf=\\\"isParticulier\\\" class=\\\"decalage-label\\\">Zone géographique</td>\\n                <td *ngIf=\\\"isParticulier\\\">\\n                    <mat-form-field>\\n                        <input matInput formControlName=\\\"adressePersoZoneGeo\\\" [(ngModel)]=\\\"contact.adressePersoZoneGeo\\\"\\n                            placeholder=\\\"Zone géographique\\\">\\n                    </mat-form-field>\\n\\n                <td class=\\\"decalage-label\\\">Zone géographique</td>\\n                <td>\\n                    <mat-form-field>\\n                        <input matInput formControlName=\\\"adresseProZoneGeo\\\" [(ngModel)]=\\\"contact.adresseProZoneGeo\\\"\\n                            placeholder=\\\"Zone géographique\\\">\\n                    </mat-form-field>\\n\\n                </td>\\n            </tr>\\n\\n            <tr>\\n                <td *ngIf=\\\"isParticulier\\\" class=\\\"decalage-label\\\"></td>\\n                <td *ngIf=\\\"isParticulier\\\">\\n                    <mat-form-field>\\n                        <input matInput formControlName=\\\"adressePersoZoneGeoSuite\\\"\\n                            [(ngModel)]=\\\"contact.adressePersoZoneGeoSuite\\\">\\n                    </mat-form-field>\\n                </td>\\n                <td class=\\\"decalage-label\\\"></td>\\n                <td>\\n                    <mat-form-field>\\n                        <input matInput formControlName=\\\"adresseProZoneGeoSuite\\\"\\n                            [(ngModel)]=\\\"contact.adresseProZoneGeoSuite\\\">\\n                    </mat-form-field>\\n\\n                </td>\\n\\n            </tr>\\n            <tr *ngIf=\\\"isParticulier\\\">\\n                <td class=\\\"decalage-label\\\">Date de naissance</td>\\n                <td>\\n                    <mat-form-field appearance=\\\"fill\\\">\\n                        <input matInput [matDatepicker]=\\\"pickernaissance\\\" formControlName=\\\"naissance\\\"\\n                            [(ngModel)]=\\\"contact.naissance\\\">\\n                        <mat-datepicker-toggle matSuffix [for]=\\\"pickernaissance\\\"></mat-datepicker-toggle>\\n                        <mat-datepicker #pickernaissance></mat-datepicker>\\n                    </mat-form-field>\\n                </td>\\n                <td class=\\\"decalage-label\\\">Nationalité</td>\\n                <td>\\n                    <mat-form-field appearance=\\\"fill\\\">\\n                        <input matInput formControlName=\\\"nationalite\\\" [(ngModel)]=\\\"contact.nationalite\\\"\\n                            placeholder=\\\"Nationalité...\\\">\\n                    </mat-form-field>\\n                </td>\\n            </tr>\\n\\n\\n            <tr *ngIf=\\\"isParticulier\\\">\\n                <td class=\\\"decalage-label\\\">Situation familiale</td>\\n                <td>\\n                    <mat-form-field appearance=\\\"fill\\\">\\n                        <select matNativeControl formControlName=\\\"situationFamiliale\\\"\\n                            [(ngModel)]=\\\"contact.situationFamiliale\\\">\\n                            <option selected></option>\\n                            <option>Marié</option>\\n                            <option>PACS</option>\\n                            <option>Celibataire</option>\\n                            <option>Veuf</option>\\n                            <option>Divorcé ou séparé</option>\\n                            <option>Concubin</option>\\n                        </select>\\n                    </mat-form-field>\\n                </td>\\n\\n                <td class=\\\"decalage-label\\\">Etiquette</td>\\n                <td>\\n                    <mat-form-field appearance=\\\"fill\\\">\\n                        <input matInput>\\n                    </mat-form-field>\\n                </td>\\n\\n            </tr>\\n\\n            <tr>\\n                <td class=\\\"decalage-label\\\">Date d'entrée</td>\\n                <td>\\n                    <mat-form-field appearance=\\\"fill\\\">\\n                        <input matInput [matDatepicker]=\\\"pickerDateEntree\\\" formControlName=\\\"debutAbonnement\\\"\\n                            [(ngModel)]=\\\"contact.debutAbonnement\\\">\\n                        <mat-datepicker-toggle matSuffix [for]=\\\"pickerDateEntree\\\"></mat-datepicker-toggle>\\n                        <mat-datepicker #pickerDateEntree></mat-datepicker>\\n                    </mat-form-field>\\n                </td>\\n                <td *ngIf=\\\"!isParticulier\\\" class=\\\"decalage-label\\\">Site Internet</td>\\n                <td *ngIf=\\\"!isParticulier\\\">\\n                    <mat-form-field>\\n                        <input matInput formControlName=\\\"adressePerso\\\" [(ngModel)]=\\\"contact.adressePerso\\\"\\n                            placeholder=\\\"\\\">\\n                    </mat-form-field>\\n                </td>\\n            </tr>\\n            <tr>\\n                <td class=\\\"decalage-label\\\">Abonné</td>\\n                <td>\\n                    <mat-form-field appearance=\\\"fill\\\">\\n                        <select matNativeControl formControlName=\\\"abonne\\\" [(ngModel)]=\\\"contact.abonne\\\">\\n                            <option selected></option>\\n                            <option>Oui</option>\\n                            <option>Non</option>\\n                        </select>\\n                    </mat-form-field>\\n                </td>\\n\\n                <td class=\\\"decalage-label\\\">Assigné à</td>\\n                <td>\\n                    <mat-form-field appearance=\\\"fill\\\">\\n                        <select matNativeControl formControlName=\\\"assigne\\\" [(ngModel)]=\\\"contact.assigne\\\">\\n                            <option value=\\\"\\\" selected></option>\\n                            <option>Germaine</option>\\n                            <option>Alexandra</option>\\n                            <option>Amina</option>\\n                        </select>\\n                    </mat-form-field>\\n                </td>\\n\\n            </tr>\\n\\n            <tr>\\n                <td class=\\\"decalage-label\\\">Début Abonnement</td>\\n                <td>\\n                    <mat-form-field appearance=\\\"fill\\\">\\n                        <input matInput [matDatepicker]=\\\"pickerDebAbonnement\\\" formControlName=\\\"debutAbonnement\\\"\\n                            [(ngModel)]=\\\"contact.debutAbonnement\\\">\\n                        <mat-datepicker-toggle matSuffix [for]=\\\"pickerDebAbonnement\\\"></mat-datepicker-toggle>\\n                        <mat-datepicker #pickerDebAbonnement></mat-datepicker>\\n                    </mat-form-field>\\n                </td>\\n                <td class=\\\"decalage-label\\\">Renouvellement Abonnement</td>\\n                <td>\\n                    <mat-form-field appearance=\\\"fill\\\">\\n                        <input matInput [matDatepicker]=\\\"pickerRenAbonnement\\\" formControlName=\\\"renAbonnement\\\"\\n                            [(ngModel)]=\\\"contact.renAbonnement\\\">\\n                        <mat-datepicker-toggle matSuffix [for]=\\\"pickerRenAbonnement\\\"></mat-datepicker-toggle>\\n                        <mat-datepicker #pickerRenAbonnement></mat-datepicker>\\n                    </mat-form-field>\\n                </td>\\n            </tr>\\n\\n            <tr>\\n                <td class=\\\"decalage-label\\\">Type Abonnement</td>\\n                <td>\\n                    <mat-form-field appearance=\\\"fill\\\">\\n                        <select matNativeControl formControlName=\\\"typeAbonnement\\\" [(ngModel)]=\\\"contact.typeAbonnement\\\">\\n                            <option value=\\\"\\\" selected></option>\\n                            <option value=\\\"Corporate\\\">Corporate</option>\\n                            <option value=\\\"Decouverte\\\">Découverte</option>\\n                            <option value=\\\"Droit d'entrée\\\">Droit d'entrée</option>\\n                            <option value=\\\"Evasion\\\">Evasion</option>\\n                            <option value=\\\"Nomade\\\">Nomade</option>\\n                        </select>\\n                    </mat-form-field>\\n                </td>\\n                <td class=\\\"decalage-label\\\">Source</td>\\n                <td>\\n                    <mat-form-field>\\n                        <input matInput formControlName=\\\"source\\\" [(ngModel)]=\\\"contact.source\\\" placeholder=\\\"source...\\\">\\n                    </mat-form-field>\\n                </td>\\n            </tr>\\n\\n            <tr>\\n                <mat-checkbox>Prospect</mat-checkbox>\\n            </tr>\\n\\n        </table>\\n    </mat-card>\\n\\n    <br>\\n    <div>\\n        <mat-card>\\n            <mat-tab-group>\\n                <mat-tab label=\\\"Beneficiaires\\\">\\n                    <div class=\\\"example-button-row\\\">\\n                        <button mat-button color=\\\"primary\\\" (click)=\\\"openAddBeneficiareDialog()\\\">Ajouter</button>\\n                    </div>\\n                </mat-tab>\\n                <mat-tab label=\\\"Centres d'intérêts\\\">\\n                    <br>\\n                    <table>\\n                        <tr>\\n                            <td class=\\\"decalage-label\\\">Type Restaurant Favori</td>\\n                            <td>\\n                                <mat-form-field appearance=\\\"fill\\\">\\n                                    <mat-select multiple formControlName=\\\"typeRestaurantPrefere\\\">\\n                                        <mat-option>Africain</mat-option>\\n                                        <mat-option>Bresilien</mat-option>\\n                                        <mat-option>Fast food</mat-option>\\n                                        <mat-option>Japonais</mat-option>\\n                                        <mat-option>Indien</mat-option>\\n                                        <mat-option>Français</mat-option>\\n                                        <mat-option>Pas vraiment</mat-option>\\n                                    </mat-select>\\n                                </mat-form-field>\\n                            </td>\\n                        </tr>\\n\\n                        <tr>\\n                            <td class=\\\"decalage-label\\\">Type hebergement Favori</td>\\n                            <td>\\n                                <mat-form-field appearance=\\\"fill\\\">\\n                                    <mat-select multiple formControlName=\\\"typeHebergementPrefere\\\">\\n                                        <mat-option>Camping</mat-option>\\n                                        <mat-option>Hotel 3*</mat-option>\\n                                        <mat-option>Hotel 4*</mat-option>\\n                                        <mat-option>Hotel 5*</mat-option>\\n                                        <mat-option>Palace</mat-option>\\n                                        <mat-option>Appartement saisonnier</mat-option>\\n                                    </mat-select>\\n                                </mat-form-field>\\n                            </td>\\n                        </tr>\\n                    </table>\\n                </mat-tab>\\n\\n                <mat-tab label=\\\"Note\\\">\\n                    <mat-form-field style=\\\"width: 100% !important;\\\">\\n                        <textarea matInput formControlName=\\\"notes\\\" placeholder=\\\"Ajouter Note...\\\"></textarea>\\n                    </mat-form-field>\\n                </mat-tab>\\n\\n                <mat-tab label=\\\"Descriptif\\\">\\n                    \\n                </mat-tab>\\n\\n            </mat-tab-group>\\n        </mat-card>\\n    </div>\\n</form>\"","export default \"<div>\\n    <mat-card style=\\\"background: azure;\\\">\\n        <h2>Contact</h2>\\n        <button mat-raised-button color=\\\"primary\\\" (click)=\\\"updateContact()\\\">MODIFIER</button>\\n        <button mat-button color=\\\"warn\\\" (click)=\\\"cancel()\\\">Annuler</button>\\n    </mat-card>\\n</div>\\n\\n<br>\\n\\n<p>{{contact?.prenom}} - {{contact?.nom}}</p>\\n\\n<mat-radio-group *ngIf=\\\"contact\\\" aria-label=\\\"Select a type\\\" [(ngModel)]=\\\"contact.typeContact\\\" disabled>\\n    <mat-radio-button value=\\\"PARTICULIER\\\">PARTICULIER</mat-radio-button>\\n    <mat-radio-button value=\\\"SOCIETE\\\">SOCIETE</mat-radio-button>\\n</mat-radio-group>\\n<mat-card>\\n\\n    <table *ngIf=\\\"contact\\\">\\n\\n        <tr *ngIf=\\\"isParticulier\\\">\\n            <td class=\\\"decalage-label\\\">Civilité</td>\\n            <td>\\n                <mat-form-field appearance=\\\"none\\\" style=\\\"width: 13% !important\\\">\\n                    <input matInput [(ngModel)]=\\\"contact.civilite\\\" readonly>\\n                </mat-form-field>\\n                <mat-form-field appearance=\\\"none\\\" style=\\\"padding-left: 1em;width: 45% !important\\\">\\n                    <input matInput placeholder=\\\"Nom\\\" [(ngModel)]=\\\"contact.nom\\\">\\n                </mat-form-field>\\n            </td>\\n            <td class=\\\"decalage-label\\\">Prénom</td>\\n            <td>\\n                <mat-form-field appearance=\\\"none\\\">\\n                    <input matInput [(ngModel)]=\\\"contact.prenom\\\" >\\n                </mat-form-field>\\n            </td>\\n        </tr>\\n\\n        <tr *ngIf=\\\"!isParticulier\\\">\\n            <td class=\\\"decalage-label\\\">Raison Sociale</td>\\n            <td>\\n                <mat-form-field appearance=\\\"none\\\">\\n                    <input matInput [(ngModel)]=\\\"contact.raisonSociale\\\" readonly>\\n                </mat-form-field>\\n            </td>\\n            <td class=\\\"decalage-label\\\">Siren</td>\\n            <td>\\n                <mat-form-field appearance=\\\"none\\\">\\n                    <input matInput [(ngModel)]=\\\"contact.siren\\\" readonly>\\n                </mat-form-field>\\n            </td>\\n        </tr>\\n\\n        <tr *ngIf=\\\"!isParticulier\\\">\\n            <td class=\\\"decalage-label\\\">Activité Principale</td>\\n            <td>\\n                <mat-form-field appearance=\\\"none\\\">\\n                    <input matInput [(ngModel)]=\\\"contact.activitePrincipale\\\" readonly>\\n                </mat-form-field>\\n            </td>\\n\\n            <td class=\\\"decalage-label\\\">Effectif</td>\\n            <td>\\n                <mat-form-field appearance=\\\"none\\\">\\n                    <input matInput [(ngModel)]=\\\"contact.tailleEntreprise\\\" readonly>\\n                </mat-form-field>\\n            </td>\\n        </tr>\\n\\n        <tr>\\n            <td *ngIf=\\\"isParticulier\\\" class=\\\"decalage-label\\\">Fonction</td>\\n            <td *ngIf=\\\"isParticulier\\\">\\n                <mat-form-field appearance=\\\"none\\\">\\n                    <input matInput [(ngModel)]=\\\"contact.fonction\\\" readonly>\\n                </mat-form-field>\\n            </td>\\n\\n            <td class=\\\"decalage-label\\\">Tél Fixe</td>\\n            <td>\\n                <mat-form-field appearance=\\\"none\\\">\\n                    <input type=\\\"tel\\\" matInput  [(ngModel)]=\\\"contact.telephoneFixe\\\" readonly>\\n                    <mat-icon matSuffix>phone</mat-icon>\\n                </mat-form-field>\\n            </td>\\n            <td *ngIf=\\\"!isParticulier\\\" class=\\\"decalage-label\\\">Contact Principal</td>\\n            <td *ngIf=\\\"!isParticulier\\\">\\n                <mat-form-field appearance=\\\"none\\\">\\n                    <input matInput [(ngModel)]=\\\"contact.contactPrincipalNom\\\" readonly>\\n                </mat-form-field>\\n            </td>\\n        </tr>\\n\\n        <tr *ngIf=\\\"isParticulier\\\">\\n            <td class=\\\"decalage-label\\\">Tél Mobile 1</td>\\n            <td>\\n                <mat-form-field appearance=\\\"none\\\">\\n                    <input type=\\\"tel\\\" matInput [(ngModel)]=\\\"contact.telephoneMobile1\\\" readonly>\\n                    <mat-icon matSuffix>phone</mat-icon>\\n                </mat-form-field>\\n            </td>\\n            <td class=\\\"decalage-label\\\">Tél Mobile 2</td>\\n            <td>\\n                <mat-form-field appearance=\\\"none\\\">\\n                    <input type=\\\"tel\\\" matInput [(ngModel)]=\\\"contact.telephoneMobile2\\\" readonly>\\n                    <mat-icon matSuffix>phone</mat-icon>\\n                </mat-form-field>\\n            </td>\\n        </tr>\\n\\n        <tr *ngIf=\\\"isParticulier\\\">\\n            <td class=\\\"decalage-label\\\">Email Perso</td>\\n            <td>\\n                <mat-form-field appearance=\\\"none\\\">\\n                    <input type=\\\"tel\\\" matInput [(ngModel)]=\\\"contact.emailPerso\\\" readonly>\\n                    <mat-icon matSuffix>email</mat-icon>\\n                </mat-form-field>\\n            </td>\\n\\n            <td class=\\\"decalage-label\\\">Email Pro</td>\\n            <td>\\n                <mat-form-field appearance=\\\"none\\\">\\n                    <input type=\\\"tel\\\" matInput  [(ngModel)]=\\\"contact.emailPro\\\" readonly>\\n                    <mat-icon matSuffix>email</mat-icon>\\n                </mat-form-field>\\n                \\n            </td>\\n        </tr>\\n\\n        <tr *ngIf=\\\"isParticulier\\\">\\n            <td class=\\\"decalage-label\\\">Structure</td>\\n            <td>\\n                <mat-form-field appearance=\\\"none\\\">\\n                    <input matInput [(ngModel)]=\\\"contact.structure\\\" readonly>\\n                </mat-form-field>\\n            </td>\\n\\n            <td class=\\\"decalage-label\\\">Activité</td>\\n            <td>\\n                <mat-form-field appearance=\\\"none\\\">\\n                    <input matInput [(ngModel)]=\\\"contact.activite\\\" readonly>\\n                </mat-form-field>\\n            </td>\\n        </tr>\\n\\n\\n        <tr>\\n            <td *ngIf=\\\"isParticulier\\\" class=\\\"decalage-label\\\">Adresse Perso</td>\\n            <td *ngIf=\\\"isParticulier\\\">\\n                <mat-form-field appearance=\\\"none\\\">\\n                    <input matInput [(ngModel)]=\\\"contact.adressePerso\\\" readonly>\\n                </mat-form-field>\\n            </td>\\n            <td class=\\\"decalage-label\\\">Adresse Pro</td>\\n            <td>\\n                <mat-form-field appearance=\\\"none\\\">\\n                    <input matInput [(ngModel)]=\\\"contact.adressePro\\\" readonly>\\n                </mat-form-field>\\n            </td>\\n\\n            <td *ngIf=\\\"!isParticulier\\\" class=\\\"decalage-label\\\"></td>\\n            <td *ngIf=\\\"!isParticulier\\\">\\n                <mat-form-field appearance=\\\"none\\\" style=\\\"padding-left: 1em;\\\">\\n                    <input matInput [(ngModel)]=\\\"contact.contactPrincipalTelephoneMobile\\\" readonly>\\n                    <mat-icon matSuffix>phone</mat-icon>\\n                </mat-form-field>\\n            </td>\\n        </tr>\\n\\n        <tr>\\n            <td *ngIf=\\\"isParticulier\\\" class=\\\"decalage-label\\\">Code Postal</td>\\n            <td *ngIf=\\\"isParticulier\\\">\\n                <mat-form-field appearance=\\\"none\\\" style=\\\"padding-left: 1em;\\\">\\n                    <input matInput [(ngModel)]=\\\"contact.adressePersoCodePostal\\\" readonly>\\n                </mat-form-field>\\n            </td>\\n\\n            <td class=\\\"decalage-label\\\">Code Postal</td>\\n            <td>\\n                <mat-form-field appearance=\\\"none\\\" style=\\\"padding-left: 1em;\\\">\\n                    <input matInput  [(ngModel)]=\\\"contact.adresseProCodePostal\\\" readonly>\\n                </mat-form-field>\\n            </td>\\n\\n            <td *ngIf=\\\"!isParticulier\\\" class=\\\"decalage-label\\\"></td>\\n            <td *ngIf=\\\"!isParticulier\\\">\\n                <mat-form-field appearance=\\\"none\\\">\\n                    <input matInput  [(ngModel)]=\\\"contact.contactPrincipalEmail\\\" readonly>\\n                    <mat-icon matSuffix>email</mat-icon>\\n                </mat-form-field>\\n            </td>\\n        </tr>\\n        <tr>\\n            <td *ngIf=\\\"isParticulier\\\" class=\\\"decalage-label\\\">Ville</td>\\n            <td *ngIf=\\\"isParticulier\\\">\\n                <mat-form-field appearance=\\\"none\\\">\\n                    <input matInput [(ngModel)]=\\\"contact.adressePersoVille\\\" readonly>\\n                </mat-form-field>\\n\\n            <td class=\\\"decalage-label\\\"> Ville</td>\\n            <td>\\n                <mat-form-field appearance=\\\"none\\\">\\n                    <input matInput  [(ngModel)]=\\\"contact.adresseProVille\\\" readonly>\\n                </mat-form-field>\\n\\n            </td>\\n\\n            <td *ngIf=\\\"!isParticulier\\\" class=\\\"decalage-label\\\">Contact Sécondaire</td>\\n            <td *ngIf=\\\"!isParticulier\\\">\\n                <mat-form-field appearance=\\\"none\\\">\\n                    <input matInput [(ngModel)]=\\\"contact.contactSecondaireNom\\\" readonly>\\n                </mat-form-field>\\n            </td>\\n\\n        </tr>\\n\\n        <tr>\\n            <td *ngIf=\\\"isParticulier\\\" class=\\\"decalage-label\\\">Pays</td>\\n            <td *ngIf=\\\"isParticulier\\\">\\n                <mat-form-field appearance=\\\"none\\\">\\n                    <input matInput [(ngModel)]=\\\"contact.adressePersoPays\\\" readonly>\\n                </mat-form-field>\\n\\n            <td class=\\\"decalage-label\\\">Pays</td>\\n            <td>\\n                <mat-form-field appearance=\\\"none\\\">\\n                    <input matInput  [(ngModel)]=\\\"contact.adresseProPays\\\" readonly>\\n                </mat-form-field>\\n\\n            </td>\\n            <td *ngIf=\\\"!isParticulier\\\" class=\\\"decalage-label\\\"></td>\\n            <td *ngIf=\\\"!isParticulier\\\">\\n                <mat-form-field appearance=\\\"none\\\" style=\\\"padding-left: 1em;\\\">\\n                    <input matInput  [(ngModel)]=\\\"contact.contactSecondaireTelephoneMobile\\\" readonly>\\n                    <mat-icon matSuffix>phone</mat-icon>\\n                </mat-form-field>\\n            </td>\\n        </tr>\\n\\n        <tr>\\n            <td *ngIf=\\\"isParticulier\\\" class=\\\"decalage-label\\\">Zone géographique</td>\\n            <td *ngIf=\\\"isParticulier\\\">\\n                <mat-form-field appearance=\\\"none\\\">\\n                    <input matInput [(ngModel)]=\\\"contact.adressePersoZoneGeo\\\" readonly>\\n                </mat-form-field>\\n\\n            <td class=\\\"decalage-label\\\">Zone géographique</td>\\n            <td>\\n                <mat-form-field appearance=\\\"none\\\">\\n                    <input matInput [(ngModel)]=\\\"contact.adresseProZoneGeo\\\" readonly>\\n                </mat-form-field>\\n\\n            </td>\\n\\n            <td *ngIf=\\\"!isParticulier\\\" class=\\\"decalage-label\\\"></td>\\n            <td *ngIf=\\\"!isParticulier\\\">\\n                <mat-form-field appearance=\\\"none\\\">\\n                    <input matInput [(ngModel)]=\\\"contact.contactSecondaireEmail\\\" readonly>\\n                    <mat-icon matSuffix>email</mat-icon>\\n                </mat-form-field>\\n            </td>\\n        </tr>\\n\\n        <tr>\\n            <td *ngIf=\\\"isParticulier\\\" class=\\\"decalage-label\\\"></td>\\n            <td *ngIf=\\\"isParticulier\\\">\\n                <mat-form-field appearance=\\\"none\\\">\\n                    <input matInput [(ngModel)]=\\\"contact.adressePersoZoneGeoSuite\\\" readonly>\\n                </mat-form-field>\\n            </td>\\n            <td class=\\\"decalage-label\\\"></td>\\n            <td>\\n                <mat-form-field appearance=\\\"none\\\">\\n                    <input matInput  [(ngModel)]=\\\"contact.adresseProZoneGeoSuite\\\" readonly>\\n                </mat-form-field>\\n            </td>\\n\\n        </tr>\\n        <tr *ngIf=\\\"isParticulier\\\">\\n            <td class=\\\"decalage-label\\\">Date de naissance</td>\\n            <td>\\n                <mat-form-field appearance=\\\"none\\\">\\n                    <input matInput [(ngModel)]=\\\"contact.naissance\\\" readonly>\\n                </mat-form-field>\\n            </td>\\n            <td class=\\\"decalage-label\\\">Nationalité</td>\\n            <td>\\n                <mat-form-field appearance=\\\"none\\\">\\n                    <input matInput [(ngModel)]=\\\"contact.nationalite\\\" readonly>\\n                </mat-form-field>\\n            </td>\\n        </tr>\\n\\n\\n        <tr *ngIf=\\\"isParticulier\\\">\\n            <td class=\\\"decalage-label\\\">Situation familiale</td>\\n            <td>\\n                <mat-form-field appearance=\\\"none\\\">\\n                    <input matInput [(ngModel)]=\\\"contact.situationFamiliale\\\" readonly> \\n                </mat-form-field>\\n            </td>\\n        </tr>\\n\\n        <tr>\\n            <td class=\\\"decalage-label\\\">Abonné</td>\\n            <td>\\n                <mat-form-field appearance=\\\"none\\\">\\n                    <input matInput [(ngModel)]=\\\"contact.abonne\\\" readonly> \\n                </mat-form-field>\\n            </td>\\n\\n            <td class=\\\"decalage-label\\\">Assigné à</td>\\n            <td>\\n                <mat-form-field appearance=\\\"none\\\">\\n                    <input matInput [(ngModel)]=\\\"contact.assigne\\\" readonly>\\n                </mat-form-field>\\n            </td>\\n\\n        </tr>\\n\\n        <tr>\\n            <td class=\\\"decalage-label\\\">Début Abonnement</td>\\n            <td>\\n                <mat-form-field appearance=\\\"none\\\">\\n                    <input matInput [(ngModel)]=\\\"contact.debutAbonnement\\\" readonly>\\n                </mat-form-field>\\n            </td>\\n            <td class=\\\"decalage-label\\\">Renouvellement Abonnement</td>\\n            <td>\\n                <mat-form-field appearance=\\\"none\\\">\\n                    <input matInput [(ngModel)]=\\\"contact.renAbonnement\\\" readonly>\\n                </mat-form-field>\\n            </td>\\n        </tr>\\n\\n        <tr>\\n            <td class=\\\"decalage-label\\\">Type Abonnement</td>\\n            <td>\\n                <mat-form-field appearance=\\\"none\\\">\\n                    <input matInput [(ngModel)]=\\\"contact.typeAbonnement\\\" readonly>\\n                </mat-form-field>\\n            </td>\\n            <td class=\\\"decalage-label\\\">Source</td>\\n            <td>\\n                <mat-form-field appearance=\\\"none\\\">\\n                    <input matInput [(ngModel)]=\\\"contact.source\\\" readonly>\\n                </mat-form-field>\\n            </td>\\n        </tr>\\n\\n        <tr>\\n            <mat-checkbox disabled>Prospect</mat-checkbox>\\n        </tr>\\n\\n\\n\\n    </table>\\n</mat-card>\\n\\n\\n<mat-card *ngIf=\\\"contact\\\">\\n    <mat-tab-group>\\n        <mat-tab label=\\\"Beneficiaires\\\">\\n\\n        </mat-tab>\\n        <mat-tab label=\\\"Favoris\\\">\\n            <table>\\n                <tr>\\n                    <td class=\\\"decalage-label\\\">Type Restaurant Favori</td>\\n                    <td>\\n                        <mat-form-field appearance=\\\"none\\\">\\n                            <input matInput [(ngModel)]=\\\"contact.typeRestaurantPrefere\\\" readonly>\\n                        </mat-form-field>\\n                    </td>\\n                </tr>\\n\\n                <tr>\\n                    <td class=\\\"decalage-label\\\">Type hebergement Favori</td>\\n                    <td>\\n                        <mat-form-field appearance=\\\"none\\\">\\n                            <input matInput [(ngModel)]=\\\"contact.typeHebergementPrefere\\\" readonly>\\n                        </mat-form-field>\\n                    </td>\\n                </tr>\\n            </table>\\n\\n        </mat-tab>\\n        <mat-tab label=\\\"Note\\\">\\n            <mat-form-field appearance=\\\"none\\\">\\n                <input matInput [(ngModel)]=\\\"contact.notes\\\" placeholder=\\\"Ajouter notes...\\\" readonly>\\n            </mat-form-field>\\n        </mat-tab>\\n    </mat-tab-group>\\n</mat-card>\"","export default \"<div style=\\\"padding-bottom: 2em;\\\">\\n    <mat-card style=\\\"background: azure;\\\">\\n        <p>Contacts</p>\\n        <button mat-raised-button color=\\\"primary\\\">\\n            <a routerLink=\\\"/contact\\\">CREER</a>\\n        </button>\\n    </mat-card>\\n</div>\\n\\n<mat-card style=\\\"background: azure;\\\">\\n    <table class=\\\"table table-bordered table-hover\\\">\\n         <thead>\\n            <tr>\\n                <th>ID</th>\\n                <th>Nom</th>\\n                <th>Prenom</th>\\n                <th>E-mail</th>\\n                <th>Telephone Fixe</th>\\n                <th>Telephone</th>\\n                <th>adresse</th>\\n            </tr>\\n        </thead>\\n        <tbody>\\n            <tr *ngFor=\\\"let contact of contacts; let i = index\\\" (click)=\\\"ClickedRow(i,contact.id)\\\"\\n                [class.active]=\\\"i == HighlightRow\\\">\\n                <td>{{contact.id}}</td>\\n                <td>{{contact.nom}}</td>\\n                <td>{{contact.prenom}}</td>\\n                <td>{{contact.email}}</td>\\n                <td>{{contact.telephoneFixe}}</td>\\n                <td>{{contact.telephoneMobile}}</td>\\n                <td>{{contact.adresseRue1}}</td>\\n            </tr>\\n        </tbody>\\n    </table>\\n</mat-card>\"","export default \"<mat-card style=\\\"background: azure;\\\">\\n    <nav class=\\\"navbar navbar-expand navbar-light bg-light\\\">\\n        <!--a href=\\\"#\\\" class=\\\"navbar-brand\\\">Peniel CRM</a-->\\n        <ul class=\\\"navbar-nav mr-auto\\\" routerLinkActive=\\\"active\\\">\\n            <li class=\\\"nav-item\\\">\\n                <button mat-icon-button [matMenuTriggerFor]=\\\"menu\\\" aria-label=\\\"Example icon-button with a menu\\\">\\n                    <mat-icon>menu</mat-icon>\\n                  </button>\\n                  <mat-menu #menu=\\\"matMenu\\\">\\n                    <button mat-menu-item>\\n                      <mat-icon>dialpad</mat-icon>\\n                      <span><a routerLink=\\\"/m-contacts\\\">Contacts</a></span>\\n                    </button>\\n\\n                    <button mat-menu-item>\\n                        <mat-icon>dialpad</mat-icon>\\n                        <span>Prestataires</span>\\n                    </button>\\n\\n                    <button mat-menu-item>\\n                      <mat-icon>work</mat-icon>\\n                      <span>Taches</span>\\n                    </button>\\n                    <button mat-menu-item>\\n                      <mat-icon>notifications</mat-icon>\\n                      <span>notifications</span>\\n                    </button>\\n                    <button mat-menu-item>\\n                        <span>Comptabilité</span>\\n                    </button>\\n                    <button mat-menu-item>\\n                        <mat-icon>person</mat-icon>\\n                        <span>Mon compte</span>\\n                      </button>\\n                      <button mat-menu-item>\\n                        <span>Newsletter</span>\\n                      </button>\\n                      <button mat-menu-item>\\n                        <span>Evénements</span>\\n                      </button>\\n                      <button mat-menu-item>\\n                        <span>Documents</span>\\n                      </button>\\n                  </mat-menu>\\n            </li>\\n            <li class=\\\"nav-item\\\">\\n                <a href=\\\"/home\\\" class=\\\"nav-link\\\" routerLink=\\\"home\\\">Home </a>\\n            </li>\\n            <li class=\\\"nav-item\\\" *ngIf=\\\"showAdminBoard\\\">\\n                <a href=\\\"/admin\\\" class=\\\"nav-link\\\" routerLink=\\\"admin\\\">Admin Board</a>\\n            </li>\\n            <li class=\\\"nav-item\\\" *ngIf=\\\"showModeratorBoard\\\">\\n                <a href=\\\"/mod\\\" class=\\\"nav-link\\\" routerLink=\\\"mod\\\">Moderator Board</a>\\n            </li>\\n            <li class=\\\"nav-item\\\">\\n                <a href=\\\"/user\\\" class=\\\"nav-link\\\" *ngIf=\\\"isLoggedIn\\\" routerLink=\\\"user\\\">User</a>\\n            </li>\\n        </ul>\\n    \\n        <ul class=\\\"navbar-nav ml-auto\\\" *ngIf=\\\"!isLoggedIn\\\">\\n            <li class=\\\"nav-item\\\">\\n                <a href=\\\"/register\\\" class=\\\"nav-link\\\" routerLink=\\\"register\\\">Sign Up</a>\\n            </li>\\n            <li class=\\\"nav-item\\\">\\n                <a href=\\\"/login\\\" class=\\\"nav-link\\\" routerLink=\\\"login\\\">Login</a>\\n            </li>\\n        </ul>\\n    \\n        <ul class=\\\"navbar-nav ml-auto\\\" *ngIf=\\\"isLoggedIn\\\">\\n            <li class=\\\"nav-item\\\">\\n                <a href=\\\"/profile\\\" class=\\\"nav-link\\\" routerLink=\\\"profile\\\">{{ username }}</a>\\n            </li>\\n            <li class=\\\"nav-item\\\">\\n                <a href class=\\\"nav-link\\\" (click)=\\\"logout()\\\">LogOut</a>\\n            </li>\\n        </ul>\\n    </nav>\\n</mat-card>\"","export default \"<div class=\\\"container\\\">\\n  <header class=\\\"jumbotron\\\">\\n    <p>{{ content }}</p>\\n  </header>\\n</div>\\n\"","export default \"<div class=\\\"col-md-12\\\">\\n  <div class=\\\"card card-container\\\">\\n    <img id=\\\"profile-img\\\" src=\\\"//ssl.gstatic.com/accounts/ui/avatar_2x.png\\\" class=\\\"profile-img-card\\\" />\\n    \\n    <form *ngIf=\\\"!isLoggedIn\\\" name=\\\"form\\\" (ngSubmit)=\\\"f.form.valid && onSubmit()\\\" #f=\\\"ngForm\\\" novalidate>\\n      <div class=\\\"form-group\\\">\\n        <label for=\\\"username\\\">Username</label>\\n        <input type=\\\"text\\\" class=\\\"form-control\\\" name=\\\"username\\\" [(ngModel)]=\\\"form.username\\\" required\\n          #username=\\\"ngModel\\\" />\\n        <div class=\\\"alert alert-danger\\\" role=\\\"alert\\\" *ngIf=\\\"f.submitted && username.invalid\\\">\\n          Username is required!\\n        </div>\\n      </div>\\n      <div class=\\\"form-group\\\">\\n        <label for=\\\"password\\\">Password</label>\\n        <input type=\\\"password\\\" class=\\\"form-control\\\" name=\\\"password\\\" [(ngModel)]=\\\"form.password\\\" required minlength=\\\"6\\\"\\n          #password=\\\"ngModel\\\" />\\n        <div class=\\\"alert alert-danger\\\" role=\\\"alert\\\" *ngIf=\\\"f.submitted && password.invalid\\\">\\n          <div *ngIf=\\\"password.errors.required\\\">Password is required</div>\\n          <div *ngIf=\\\"password.errors.minlength\\\">\\n            Password must be at least 6 characters\\n          </div>\\n        </div>\\n      </div>\\n      <div class=\\\"form-group\\\">\\n        <button class=\\\"btn btn-primary btn-block\\\">\\n          Login\\n        </button>\\n      </div>\\n      <div class=\\\"form-group\\\">\\n        <div class=\\\"alert alert-danger\\\" role=\\\"alert\\\" *ngIf=\\\"f.submitted && isLoginFailed\\\">\\n          Login failed: {{ errorMessage }}\\n        </div>\\n      </div>\\n    </form>\\n\\n    <div class=\\\"alert alert-success\\\" *ngIf=\\\"isLoggedIn\\\">\\n      Logged in as {{ roles }}.\\n    </div>\\n  </div>\\n</div>\"","export default \"<!--div id=\\\"accordion\\\" class=\\\"menu\\\">\\n    <div class=\\\"card\\\">\\n        <div class=\\\"card-header\\\" id=\\\"headingContact\\\">\\n            <h5 class=\\\"mb-0\\\">\\n                <button (click)=\\\"closeAllCollapsedWithout('contact')\\\" class=\\\"btn btn-link collapsed\\\"\\n                    data-toggle=\\\"collapse\\\" data-target=\\\"#collapseContact\\\" aria-expanded=\\\"false\\\"\\n                    aria-controls=\\\"collapseContact\\\">\\n                    <i class=\\\"fa fa-plus\\\" ></i><a routerLink=\\\"/m-contacts\\\">Contact</a>\\n                </button>\\n            </h5>\\n        </div>\\n        <div *ngIf=\\\"menus.contact\\\">\\n            <div id=\\\"collapseContact\\\" class=\\\"collapse\\\" aria-labelledby=\\\"headingContact\\\" data-parent=\\\"#accordion\\\">\\n                <div class=\\\"card-body\\\">\\n                    <i class=\\\"fa fa-user-plus\\\"></i><a>Nouveau</a>\\n                </div>\\n            </div>\\n            <div id=\\\"collapseContact\\\" class=\\\"collapse\\\" aria-labelledby=\\\"headingContact\\\" data-parent=\\\"#accordion\\\">\\n                <div class=\\\"card-body\\\">\\n                    <i class=\\\"fa fa-folder\\\"></i><a routerLink=\\\"/folderform\\\">Dossier</a>\\n                </div>\\n            </div>\\n            <div id=\\\"collapseContact\\\" class=\\\"collapse\\\" aria-labelledby=\\\"headingContact\\\" data-parent=\\\"#accordion\\\">\\n                <div class=\\\"card-body\\\">\\n                    <i class=\\\"fa fa-fax\\\"></i><a routerLink=\\\"/income\\\">Facture</a>\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n    <div class=\\\"card\\\">\\n        <div class=\\\"card-header\\\" id=\\\"headingMesTaches\\\">\\n            <h5 class=\\\"mb-0\\\">\\n                <button (click)=\\\"closeAllCollapsedWithout('mesTaches')\\\" class=\\\"btn btn-link collapsed\\\"\\n                    data-toggle=\\\"collapse\\\" data-target=\\\"#collapseMesTaches\\\" aria-expanded=\\\"false\\\"\\n                    aria-controls=\\\"collapseMesTaches\\\">\\n                    <i class=\\\"fa fa-tasks\\\"></i><a routerLink=\\\"/tasks\\\">Mes Tâches</a>\\n                </button>\\n            </h5>\\n        </div>\\n    </div>\\n\\n    <div class=\\\"card\\\">\\n        <div class=\\\"card-header\\\" id=\\\"headingMesNotifications\\\">\\n            <h5 class=\\\"mb-0\\\">\\n                <button (click)=\\\"closeAllCollapsedWithout('mesNotifications')\\\" class=\\\"btn btn-link collapsed\\\"\\n                    data-toggle=\\\"collapse\\\" data-target=\\\"#collapseMesNotifications\\\" aria-expanded=\\\"false\\\"\\n                    aria-controls=\\\"collapseMesNotifications\\\">\\n                    <i class=\\\"fa fa-envelope-o\\\"></i><a routerLink=\\\"/Notifications\\\">Mes Notifications</a>\\n                </button>\\n            </h5>\\n        </div>\\n    </div>\\n\\n    <div class=\\\"card\\\">\\n        <div class=\\\"card-header\\\" id=\\\"headingComptabilite\\\">\\n            <h5 class=\\\"mb-0\\\">\\n                <button (click)=\\\"closeAllCollapsedWithout('comptabilite')\\\" class=\\\"btn btn-link collapsed\\\"\\n                    data-toggle=\\\"collapse\\\" data-target=\\\"#collapseComptabilite\\\" aria-expanded=\\\"false\\\"\\n                    aria-controls=\\\"collapseComptabilite\\\">\\n                    <i class=\\\"fa fa-balance-scale\\\"> </i><a>Comptabilité</a>\\n                </button>\\n            </h5>\\n        </div>\\n    </div>\\n\\n\\n    <div class=\\\"card\\\">\\n        <div class=\\\"card-header\\\" id=\\\"headingMonCompte\\\">\\n            <h5 class=\\\"mb-0\\\">\\n                <button (click)=\\\"closeAllCollapsedWithout('monCompte')\\\" class=\\\"btn btn-link collapsed\\\"\\n                    data-toggle=\\\"collapse\\\" data-target=\\\"#collapseMonCompte\\\" aria-expanded=\\\"false\\\"\\n                    aria-controls=\\\"collapseMonCompte\\\">\\n                    Mon compte\\n                </button>\\n            </h5>\\n        </div>\\n        <div *ngIf=\\\"menus.monCompte\\\">\\n            <div id=\\\"collapseMonCompte\\\" class=\\\"collapse\\\" aria-labelledby=\\\"headingMonCompte\\\" data-parent=\\\"#accordion\\\">\\n                <div class=\\\"card-body\\\">\\n                    <i class=\\\"fa fa-user\\\"></i><a routerLink=\\\"/personalInfo\\\">Infos personnelles</a>\\n                </div>\\n            </div>\\n            <div id=\\\"collapseMonCompte\\\" class=\\\"collapse\\\" aria-labelledby=\\\"headingMonCompte\\\" data-parent=\\\"#accordion\\\">\\n                <div class=\\\"card-body\\\">\\n                    <a routerLink=\\\"/mdp\\\">Mot de passe</a>\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n</div-->\\n\\n    <!--div class=\\\"card\\\" *ngIf=\\\"authService.admin\\\">\\n        <div class=\\\"card-header\\\" id=\\\"headingAdmin\\\">\\n            <h5 class=\\\"mb-0\\\">\\n                <button (click)=\\\"closeAllCollapsedWithout('admin')\\\" class=\\\"btn btn-link\\\" data-toggle=\\\"collapse\\\"\\n                    data-target=\\\"#collapseAdmin\\\" aria-expanded=\\\"false\\\" aria-controls=\\\"collapseAdmin\\\">\\n                    <i class=\\\"fa fa-home\\\"></i><a routerLink=\\\"/admin\\\">Administration</a>\\n                </button>\\n            </h5>\\n        </div>\\n    </div-->\"","export default \"<div class=\\\"container\\\" *ngIf=\\\"currentUser; else loggedOut\\\">\\n  <header class=\\\"jumbotron\\\">\\n    <h3>\\n      <strong>{{ currentUser.username }}</strong> Profile\\n    </h3>\\n  </header>\\n  <p>\\n    <strong>Token:</strong>\\n    {{ currentUser.accessToken.substring(0, 20) }} ...\\n    {{ currentUser.accessToken.substr(currentUser.accessToken.length - 20) }}\\n  </p>\\n  <p>\\n    <strong>Email:</strong>\\n    {{ currentUser.email }}\\n  </p>\\n  <strong>Roles:</strong>\\n  <ul>\\n    <li *ngFor=\\\"let role of currentUser.roles\\\">\\n      {{ role }}\\n    </li>\\n  </ul>\\n</div>\\n\\n<ng-template #loggedOut>\\n  Please login.\\n</ng-template>\\n\"","export default \"<div class=\\\"container p-3\\\">\\n    <div class=\\\"row\\\">\\n        <div class=\\\"col-12\\\">\\n            <form [formGroup]=\\\"form\\\" (submit)=\\\"submit()\\\">\\n                <div class=\\\"card\\\">\\n                    <div class=\\\"card-header\\\"> Nouveau Prospect</div>\\n                    <div class=\\\"card-body\\\">\\n                        <div class=\\\"row\\\">\\n                            <div class=\\\"form-group col-4\\\">\\n                                <div class=\\\"input-group mb-3\\\">\\n                                    <div class=\\\"input-group-prepend\\\">\\n                                        <span class=\\\"input-group-text\\\" id=\\\"inputGroup-sizing-default\\\">Nom</span>\\n                                    </div>\\n                                    <input type=\\\"text\\\" class=\\\"form-control\\\" formControlName=\\\"name\\\">\\n                                </div>\\n                                <span class=\\\"text-danger\\\"\\n                                    *ngIf=\\\"form.controls['name'].touched && form.controls['name'].hasError('required')\\\">\\n                                    Name est obligatoire! </span>\\n                            </div>\\n                            <div class=\\\"form-group col-4\\\">\\n                                <div class=\\\"input-group mb-3\\\">\\n                                    <div class=\\\"input-group-prepend\\\">\\n                                        <span class=\\\"input-group-text\\\" id=\\\"inputGroup-sizing-default\\\">Prenom</span>\\n                                    </div>\\n                                    <input type=\\\"text\\\" class=\\\"form-control\\\" formControlName=\\\"prenom\\\">\\n                                </div>\\n                                <span class=\\\"text-danger\\\"\\n                                    *ngIf=\\\"form.controls['prenom'].touched && form.controls['prenom'].hasError('required')\\\">\\n                                    prenom est obligatoire! </span>\\n                            </div>\\n                        </div>\\n                    </div>\\n\\n                    <div class=\\\"card-body\\\">\\n                        <div class=\\\"row\\\">\\n                            <div class=\\\"form-group col-4\\\">\\n                                <div class=\\\"input-group mb-3\\\">\\n                                    <div class=\\\"input-group-prepend\\\">\\n                                        <span class=\\\"input-group-text\\\" id=\\\"inputGroup-sizing-default\\\">Assigné à</span>\\n                                    </div>\\n                                    <select class=\\\"custom-select\\\" formControlName=\\\"assigne\\\">\\n                                        <option value=\\\"1\\\">Concierge 1</option>\\n                                        <option value=\\\"2\\\">Concierge 2</option>\\n                                        <option value=\\\"3\\\">Concierge 3</option>\\n                                      </select>\\n                                </div>\\n                                <span class=\\\"text-danger\\\"\\n                                    *ngIf=\\\"form.controls['assigne'].touched && form.controls['assigne'].hasError('required')\\\">\\n                                    Le champ Assigne à est obligatoire! </span>\\n                            </div>\\n                        </div>\\n                    </div>\\n\\n                    <div class=\\\"card-body\\\">\\n                        <div class=\\\"row\\\">\\n                            <div class=\\\"form-group col-4\\\">\\n                                <div class=\\\"input-group mb-3\\\">\\n                                    <div class=\\\"input-group-prepend\\\">\\n                                        <span class=\\\"input-group-text\\\" id=\\\"inputGroup-sizing-default\\\">Telephone\\n                                            principal</span>\\n                                    </div>\\n                                    <input type=\\\"text\\\" class=\\\"form-control\\\" formControlName=\\\"telephone\\\">\\n                                </div>\\n                                <span class=\\\"text-danger\\\"\\n                                    *ngIf=\\\"form.controls['telephone'].touched && form.controls['telephone'].hasError('required')\\\">\\n                                    Telephone mobile est obligatoire! </span>\\n                            </div>\\n\\n                            <div class=\\\"form-group col-4\\\">\\n                                <div class=\\\"input-group mb-3\\\">\\n                                    <div class=\\\"input-group-prepend\\\">\\n                                        <span class=\\\"input-group-text\\\" id=\\\"inputGroup-sizing-default\\\">Société</span>\\n                                    </div>\\n                                    <input type=\\\"text\\\" class=\\\"form-control\\\" formControlName=\\\"name\\\">\\n                                </div>\\n                                <span class=\\\"text-danger\\\"\\n                                    *ngIf=\\\"form.controls['telephoneFixe'].touched && form.controls['telephoneFixe'].hasError('required')\\\">\\n                                    Telephone Fixe est obligatoire! </span>\\n                            </div>\\n                        </div>\\n                    </div>\\n\\n                    <div class=\\\"card-body\\\">\\n                        <div class=\\\"row\\\">\\n                            <div class=\\\"form-group col-4\\\">\\n                                <div class=\\\"input-group mb-3\\\">\\n                                    <div class=\\\"input-group-prepend\\\">\\n                                        <span class=\\\"input-group-text\\\" id=\\\"inputGroup-sizing-default\\\"> Telephone Mobile</span>\\n                                    </div>\\n                                    <input type=\\\"text\\\" class=\\\"form-control\\\" formControlName=\\\"email\\\">\\n                                </div>\\n                                <span class=\\\"text-danger\\\"\\n                                    *ngIf=\\\"form.controls['email'].touched && form.controls['email'].hasError('required')\\\">\\n                                    Telephone Mobile est obligatoire! </span>\\n                            </div>\\n                            <div class=\\\"form-group col-4\\\">\\n                                <div class=\\\"input-group mb-3\\\">\\n                                    <div class=\\\"input-group-prepend\\\">\\n                                        <span class=\\\"input-group-text\\\" id=\\\"inputGroup-sizing-default\\\">Fax</span>\\n                                    </div>\\n                                    <input type=\\\"text\\\" class=\\\"form-control\\\" formControlName=\\\"fax\\\">\\n                                </div>\\n                                <span class=\\\"text-danger\\\"\\n                                    *ngIf=\\\"form.controls['fax'].touched && form.controls['fax'].hasError('required')\\\">\\n                                    Fax est obligatoire! </span>\\n                            </div>\\n                        </div>\\n                    </div>\\n\\n                    <div class=\\\"card-body\\\">\\n                        <div class=\\\"row\\\">\\n                            <div class=\\\"form-group col-4\\\">\\n                                <div class=\\\"input-group mb-3\\\">\\n                                    <div class=\\\"input-group-prepend\\\">\\n                                        <span class=\\\"input-group-text\\\" id=\\\"inputGroup-sizing-default\\\">Source du prospect\\n                                            </span>\\n                                    </div>\\n                                    <select class=\\\"custom-select\\\" formControlName=\\\"assigne\\\">\\n                                        <option value=\\\"1\\\"> Prospection Téléphonique</option>\\n                                        <option value=\\\"2\\\">Client existant</option>\\n                                        <option value=\\\"3\\\">Auto Généré</option>\\n                                        <option value=\\\"3\\\">Employé</option>\\n                                        <option value=\\\"3\\\">Partenaire</option>\\n                                        <option value=\\\"3\\\">Rélations puliques</option>\\n                                        <option value=\\\"3\\\">Email direct</option>\\n                                        <option value=\\\"3\\\">Salon</option>\\n                                        <option value=\\\"3\\\">Site Internet</option>\\n                                        <option value=\\\"3\\\">Bouche à Oreilles</option>\\n                                        <option value=\\\"3\\\">Autre</option>\\n                                    </select>\\n                                </div>\\n                            </div>\\n                        </div>\\n                    </div>\\n\\n                    <div class=\\\"card-body\\\">\\n                        <div class=\\\"row\\\">\\n                            <div class=\\\"form-group col-4\\\">\\n                                <div class=\\\"input-group mb-3\\\">\\n                                    <div class=\\\"input-group-prepend\\\">\\n                                        <span class=\\\"input-group-text\\\" id=\\\"inputGroup-sizing-default\\\">Email Principal</span>\\n                                    </div>\\n                                    <input type=\\\"text\\\" class=\\\"form-control\\\">\\n                                </div>\\n                            </div>\\n                            <div class=\\\"form-group col-4\\\">\\n                                <div class=\\\"input-group mb-3\\\">\\n                                    <div class=\\\"input-group-prepend\\\">\\n                                        <span class=\\\"input-group-text\\\" id=\\\"inputGroup-sizing-default\\\">Secteur</span>\\n                                    </div>\\n                                    <select class=\\\"custom-select\\\" formControlName=\\\"assigne\\\">\\n                                        <option value=\\\"1\\\"> Banking</option>\\n                                        <option value=\\\"2\\\">Biotechnologie</option>\\n                                        <option value=\\\"3\\\">Produits chimiques</option>\\n                                        <option value=\\\"3\\\">Communications</option>\\n                                        <option value=\\\"3\\\">Construction</option>\\n                                        <option value=\\\"3\\\">Consulting</option>\\n                                        <option value=\\\"3\\\">Education</option>\\n                                        <option value=\\\"3\\\">Electronique</option>\\n                                        <option value=\\\"3\\\">Energie</option>\\n                                        <option value=\\\"3\\\">Ingénierie</option>\\n                                        <option value=\\\"3\\\">Divertissement</option>\\n                                    </select>\\n                                </div>\\n                            </div>\\n                        </div>\\n                    </div>\\n                    <div class=\\\"card-body\\\">\\n                        <div class=\\\"row\\\">\\n                            <div class=\\\"form-group col-4\\\">\\n                                <div class=\\\"input-group mb-3\\\">\\n                                    <div class=\\\"input-group-prepend\\\">\\n                                        <span class=\\\"input-group-text\\\" id=\\\"inputGroup-sizing-default\\\">Site Web</span>\\n                                    </div>\\n                                    <input type=\\\"text\\\" class=\\\"form-control\\\">\\n                                </div>\\n                            </div>\\n                            <div class=\\\"form-group col-4\\\">\\n                                <div class=\\\"input-group mb-3\\\">\\n                                    <div class=\\\"input-group-prepend\\\">\\n                                        <span class=\\\"input-group-text\\\"\\n                                            id=\\\"inputGroup-sizing-default\\\">Revenu annuel</span>\\n                                    </div>\\n                                    <input type=\\\"text\\\" class=\\\"form-control\\\">\\n                                </div>\\n                            </div>\\n                        </div>\\n                    </div>\\n                    <div class=\\\"card-body\\\">\\n                        <div class=\\\"row\\\">\\n                            <div class=\\\"form-group col-4\\\">\\n                                <div class=\\\"input-group mb-3\\\">\\n                                    <div class=\\\"input-group-prepend\\\">\\n                                        <span class=\\\"input-group-text\\\" id=\\\"inputGroup-sizing-default\\\">\\n                                            Statut</span>\\n                                    </div>\\n                                    <select class=\\\"custom-select\\\" formControlName=\\\"assigne\\\">\\n                                        <option value=\\\"1\\\"> Attente de contact</option>\\n                                        <option value=\\\"2\\\">Froid</option>\\n                                        <option value=\\\"3\\\">A contacter</option>\\n                                        <option value=\\\"3\\\">Coontacté</option>\\n                                        <option value=\\\"3\\\">Chaud</option>\\n                                        <option value=\\\"3\\\">En sommeil</option>\\n                                        <option value=\\\"3\\\">Perdu</option>\\n                                        <option value=\\\"3\\\">Non contacté</option>\\n                                        <option value=\\\"3\\\">Pré qualifié</option>\\n                                        <option value=\\\"3\\\">Qualifié</option>\\n                                        <option value=\\\"3\\\">Brûlant</option>\\n                                    </select>\\n                                </div>\\n                            </div>\\n                            <div class=\\\"form-group col-4\\\">\\n                                <div class=\\\"input-group mb-3\\\">\\n                                    <div class=\\\"input-group-prepend\\\">\\n                                        <span class=\\\"input-group-text\\\" id=\\\"inputGroup-sizing-default\\\">Effectif\\n                                            </span>\\n                                    </div>\\n                                    <input type=\\\"text\\\" class=\\\"form-control\\\">\\n                                </div>\\n                            </div>\\n                        </div>\\n                    </div>\\n                    <div class=\\\"card-body\\\">\\n                        <div class=\\\"row\\\">\\n                            <div class=\\\"form-group col-4\\\">\\n                                <div class=\\\"input-group mb-3\\\">\\n                                    <div class=\\\"input-group-prepend\\\">\\n                                        <span class=\\\"input-group-text\\\" id=\\\"inputGroup-sizing-default\\\">\\n                                            Note</span>\\n                                    </div>\\n                                    <select class=\\\"custom-select\\\">\\n                                        <option value=\\\"1\\\">Acquis</option>\\n                                        <option value=\\\"2\\\">Actif</option>\\n                                        <option value=\\\"3\\\">Echec du marché</option>\\n                                        <option value=\\\"3\\\">Projet annulé</option>\\n                                        <option value=\\\"3\\\">Fermer</option>\\n                                    </select>\\n                                </div>\\n                            </div>\\n                        </div>\\n                    </div>\\n\\n                    <div class=\\\"card-header\\\">Détails de l'adresse</div>\\n                    <div class=\\\"card-body\\\">\\n                        <div class=\\\"row\\\">\\n                            <div class=\\\"form-group col-6\\\">\\n                                <div class=\\\"input-group mb-3\\\">\\n                                    <div class=\\\"input-group-prepend\\\">\\n                                        <span class=\\\"input-group-text\\\" id=\\\"inputGroup-sizing-default\\\">Rue</span>\\n                                    </div>\\n                                    <textarea class=\\\"form-control\\\" id=\\\"exampleFormControlTextarea1\\\" rows=\\\"3\\\" formControlName=\\\"adresse\\\"></textarea>\\n                                </div>\\n                                <span class=\\\"text-danger\\\"\\n                                    *ngIf=\\\"form.controls['adresse'].touched && form.controls['adresse'].hasError('required')\\\">\\n                                    Rue est obligatoire! </span>\\n                            </div>\\n                            <div class=\\\"form-group col-6\\\">\\n                                <div class=\\\"input-group mb-3\\\">\\n                                    <div class=\\\"input-group-prepend\\\">\\n                                        <span class=\\\"input-group-text\\\" id=\\\"inputGroup-sizing-default\\\">Boite Postal</span>\\n                                    </div>\\n                                    <input type=\\\"text\\\" class=\\\"form-control\\\" formControlName=\\\"codePostal\\\">\\n                                </div>\\n                                <span class=\\\"text-danger\\\"\\n                                    *ngIf=\\\"form.controls['codePostal'].touched && form.controls['codePostal'].hasError('required')\\\">\\n                                    Boite Postal est obligatoire! </span>\\n                            </div>\\n                        </div>\\n                    </div>\\n                    <div class=\\\"card-body\\\">\\n                        <div class=\\\"row\\\">\\n                            <div class=\\\"form-group col-6\\\">\\n                                <div class=\\\"input-group mb-3\\\">\\n                                    <div class=\\\"input-group-prepend\\\">\\n                                        <span class=\\\"input-group-text\\\" id=\\\"inputGroup-sizing-default\\\">Code Postal</span>\\n                                    </div>\\n                                    <input type=\\\"text\\\" class=\\\"form-control\\\" formControlName=\\\"codePostal\\\">\\n                                </div>\\n                                <span class=\\\"text-danger\\\"\\n                                    *ngIf=\\\"form.controls['codePostal'].touched && form.controls['codePostal'].hasError('required')\\\">\\n                                    Code Postal est obligatoire! </span>\\n                            </div>\\n                            <div class=\\\"form-group col-6\\\">\\n                                <div class=\\\"input-group mb-3\\\">\\n                                    <div class=\\\"input-group-prepend\\\">\\n                                        <span class=\\\"input-group-text\\\" id=\\\"inputGroup-sizing-default\\\">Ville</span>\\n                                    </div>\\n                                    <input type=\\\"text\\\" class=\\\"form-control\\\" formControlName=\\\"ville\\\">\\n                                </div>\\n                                <span class=\\\"text-danger\\\"\\n                                    *ngIf=\\\"form.controls['ville'].touched && form.controls['ville'].hasError('required')\\\">\\n                                    Ville est obligatoire! </span>\\n                            </div>\\n                        </div>\\n                    </div>\\n                    <div class=\\\"card-body\\\">\\n                        <div class=\\\"row\\\">\\n                            <div class=\\\"form-group col-6\\\">\\n                                <div class=\\\"input-group mb-3\\\">\\n                                    <div class=\\\"input-group-prepend\\\">\\n                                        <span class=\\\"input-group-text\\\" id=\\\"inputGroup-sizing-default\\\">Pays</span>\\n                                    </div>\\n                                    <input type=\\\"text\\\" class=\\\"form-control\\\" formControlName=\\\"pays\\\">\\n                                </div>\\n                                <span class=\\\"text-danger\\\"\\n                                    *ngIf=\\\"form.controls['pays'].touched && form.controls['pays'].hasError('required')\\\">\\n                                    Pays est obligatoire! </span>\\n                            </div>\\n                            <div class=\\\"form-group col-6\\\">\\n                                <div class=\\\"input-group mb-3\\\">\\n                                    <div class=\\\"input-group-prepend\\\">\\n                                        <span class=\\\"input-group-text\\\" id=\\\"inputGroup-sizing-default\\\">Departement</span>\\n                                    </div>\\n                                    <input type=\\\"text\\\" class=\\\"form-control\\\">\\n                                </div>\\n                            </div>\\n                        </div>\\n                    </div>\\n\\n                    <div class=\\\"card-header\\\">Description détaillée</div>\\n                    <div class=\\\"card-body\\\">\\n                        <div class=\\\"row\\\">\\n                            <div class=\\\"form-group col-6\\\">\\n                                <div class=\\\"input-group mb-3\\\">\\n                                    <div class=\\\"input-group-prepend\\\">\\n                                        <span class=\\\"input-group-text\\\" id=\\\"inputGroup-sizing-default\\\">Description</span>\\n                                    </div>\\n                                    <textarea class=\\\"form-control\\\" id=\\\"exampleFormControlTextarea1\\\"></textarea>\\n                                </div>\\n                            </div>\\n                        </div>\\n                    </div>\\n\\n                    <div class=\\\"card-header\\\"></div>\\n                    <div class=\\\"card-body\\\">\\n                        <div class=\\\"row\\\">\\n                            <div class=\\\"col-6\\\">\\n                                <button class=\\\"btn btn-success m-1\\\" \\n                                    type=\\\"submit\\\">Enregistrer</button>\\n                            </div>\\n                            <div class=\\\"col-6\\\">\\n                                <button class=\\\"btn btn-danger\\\" type=\\\"submit\\\">Annuler</button>\\n                            </div>\\n                        </div>\\n                    </div>\\n                </div>\\n            </form>\\n        </div>\\n    </div>\\n</div>\"","export default \"<div class=\\\"col-md-12\\\">\\n  <div class=\\\"card card-container\\\">\\n    <img\\n      id=\\\"profile-img\\\"\\n      src=\\\"//ssl.gstatic.com/accounts/ui/avatar_2x.png\\\"\\n      class=\\\"profile-img-card\\\"\\n    />\\n    <form\\n      *ngIf=\\\"!isSuccessful\\\"\\n      name=\\\"form\\\"\\n      (ngSubmit)=\\\"f.form.valid && onSubmit()\\\"\\n      #f=\\\"ngForm\\\"\\n      novalidate\\n    >\\n      <div class=\\\"form-group\\\">\\n        <label for=\\\"username\\\">Username</label>\\n        <input\\n          type=\\\"text\\\"\\n          class=\\\"form-control\\\"\\n          name=\\\"username\\\"\\n          [(ngModel)]=\\\"form.username\\\"\\n          required\\n          minlength=\\\"3\\\"\\n          maxlength=\\\"20\\\"\\n          #username=\\\"ngModel\\\"\\n        />\\n        <div class=\\\"alert-danger\\\" *ngIf=\\\"f.submitted && username.invalid\\\">\\n          <div *ngIf=\\\"username.errors.required\\\">Username is required</div>\\n          <div *ngIf=\\\"username.errors.minlength\\\">\\n            Username must be at least 3 characters\\n          </div>\\n          <div *ngIf=\\\"username.errors.maxlength\\\">\\n            Username must be at most 20 characters\\n          </div>\\n        </div>\\n      </div>\\n      <div class=\\\"form-group\\\">\\n        <label for=\\\"email\\\">Email</label>\\n        <input\\n          type=\\\"email\\\"\\n          class=\\\"form-control\\\"\\n          name=\\\"email\\\"\\n          [(ngModel)]=\\\"form.email\\\"\\n          required\\n          email\\n          #email=\\\"ngModel\\\"\\n        />\\n        <div class=\\\"alert-danger\\\" *ngIf=\\\"f.submitted && email.invalid\\\">\\n          <div *ngIf=\\\"email.errors.required\\\">Email is required</div>\\n          <div *ngIf=\\\"email.errors.email\\\">\\n            Email must be a valid email address\\n          </div>\\n        </div>\\n      </div>\\n      <div class=\\\"form-group\\\">\\n        <label for=\\\"password\\\">Password</label>\\n        <input\\n          type=\\\"password\\\"\\n          class=\\\"form-control\\\"\\n          name=\\\"password\\\"\\n          [(ngModel)]=\\\"form.password\\\"\\n          required\\n          minlength=\\\"6\\\"\\n          #password=\\\"ngModel\\\"\\n        />\\n        <div class=\\\"alert-danger\\\" *ngIf=\\\"f.submitted && password.invalid\\\">\\n          <div *ngIf=\\\"password.errors.required\\\">Password is required</div>\\n          <div *ngIf=\\\"password.errors.minlength\\\">\\n            Password must be at least 6 characters\\n          </div>\\n        </div>\\n      </div>\\n      <div class=\\\"form-group\\\">\\n        <button class=\\\"btn btn-primary btn-block\\\">Sign Up</button>\\n      </div>\\n\\n      <div class=\\\"alert alert-warning\\\" *ngIf=\\\"f.submitted && isSignUpFailed\\\">\\n        Signup failed!<br />{{ errorMessage }}\\n      </div>\\n    </form>\\n\\n    <div class=\\\"alert alert-success\\\" *ngIf=\\\"isSuccessful\\\">\\n      Your registration is successful!\\n    </div>\\n  </div>\\n</div>\\n\"","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { HttpInterceptor, HttpHandler, HttpRequest } from '@angular/common/http';\n\nimport { TokenStorageService } from '../_services/token-storage.service';\n\nconst TOKEN_HEADER_KEY = 'Authorization';       // for Spring Boot back-end\n// const TOKEN_HEADER_KEY = 'x-access-token';   // for Node.js Express back-end\n\n@Injectable()\nexport class AuthInterceptor implements HttpInterceptor {\n  constructor(private token: TokenStorageService) { }\n\n  intercept(req: HttpRequest<any>, next: HttpHandler) {\n    let authReq = req;\n    const token = this.token.getToken();\n    if (token != null) {\n      // for Spring Boot back-end\n      authReq = req.clone({ headers: req.headers.set(TOKEN_HEADER_KEY, 'Bearer ' + token) });\n\n      // for Node.js Express back-end\n      // authReq = req.clone({ headers: req.headers.set(TOKEN_HEADER_KEY, token) });\n    }\n    return next.handle(authReq);\n  }\n}\n\nexport const authInterceptorProviders = [\n  { provide: HTTP_INTERCEPTORS, useClass: AuthInterceptor, multi: true }\n];\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\nconst AUTH_API = 'http://localhost:8080/api/auth/';\n\nconst httpOptions = {\n  headers: new HttpHeaders({ 'Content-Type': 'application/json' })\n};\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n\n  constructor(private http: HttpClient) { }\n\n  login(credentials): Observable<any> {\n    return this.http.post(AUTH_API + 'signin', {\n      username: credentials.username,\n      password: credentials.password\n    }, httpOptions);\n  }\n\n  register(user): Observable<any> {\n    return this.http.post(AUTH_API + 'signup', {\n      username: user.username,\n      email: user.email,\n      password: user.password\n    }, httpOptions);\n  }\n}\n","import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { Contact } from '../models/contact.model';\n\n\nconst httpOptions = {\n  headers: new HttpHeaders({ 'Content-Type': 'application/json' })\n};\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ContactService {\n\n\n  private URL_CONTACT = 'http://localhost:8080/api/contact';\n\n  private httpOptions = {\n    headers: new HttpHeaders({ 'Content-Type': 'application/json' })\n  };\n\n\n  constructor(private http: HttpClient) { }\n\n  register(contact): Observable<any> {\n\n    return this.http.post(this.URL_CONTACT + '/create', contact,this.httpOptions);\n  }\n\n  allContacts(): Observable<Contact[]> {\n    return this.http.get<Contact[]>(this.URL_CONTACT + '/all');\n  }\n\n\n  findById(contactId: any): Observable<Contact> {\n    const urlTo = `${this.URL_CONTACT}/${contactId}`;\n    return this.http.get<Contact>(urlTo);\n  }\n}\n","import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { Pays } from '../models/pays.model';\n\n\nconst httpOptions = {\n  headers: new HttpHeaders({ 'Content-Type': 'application/json' })\n};\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class PaysService {\n\n  private URL_PAYS = 'http://localhost:8080/api/pays';\n\n  private httpOptions = {\n    headers: new HttpHeaders({ 'Content-Type': 'application/json' })\n  };\n\n\n  constructor(private http: HttpClient) { }\n\n\n  allPays(): Observable<Pays[]> {\n    return this.http.get<Pays[]>(this.URL_PAYS + '/all');\n  }\n\n}\n","import { Injectable } from '@angular/core';\n\nconst TOKEN_KEY = 'auth-token';\nconst USER_KEY = 'auth-user';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TokenStorageService {\n\n  constructor() { }\n\n  signOut() {\n    window.sessionStorage.clear();\n  }\n\n  public saveToken(token: string) {\n    window.sessionStorage.removeItem(TOKEN_KEY);\n    window.sessionStorage.setItem(TOKEN_KEY, token);\n  }\n\n  public getToken(): string {\n    return sessionStorage.getItem(TOKEN_KEY);\n  }\n\n  public saveUser(user) {\n    window.sessionStorage.removeItem(USER_KEY);\n    window.sessionStorage.setItem(USER_KEY, JSON.stringify(user));\n  }\n\n  public getUser() {\n    return JSON.parse(sessionStorage.getItem(USER_KEY));\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\nconst API_URL = 'http://localhost:8080/api/test/';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UserService {\n\n  constructor(private http: HttpClient) { }\n\n  getPublicContent(): Observable<any> {\n    return this.http.get(API_URL + 'all', { responseType: 'text' });\n  }\n\n  getUserBoard(): Observable<any> {\n    return this.http.get(API_URL + 'user', { responseType: 'text' });\n  }\n\n  getModeratorBoard(): Observable<any> {\n    return this.http.get(API_URL + 'mod', { responseType: 'text' });\n  }\n\n  getAdminBoard(): Observable<any> {\n    return this.http.get(API_URL + 'admin', { responseType: 'text' });\n  }\n}\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2FmZmljaGVyLWNvbnRhY3QvYWZmaWNoZXItY29udGFjdC5jb21wb25lbnQuY3NzIn0= */\"","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-afficher-contact',\n  templateUrl: './afficher-contact.component.html',\n  styleUrls: ['./afficher-contact.component.css']\n})\nexport class AfficherContactComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { RegisterComponent } from './register/register.component';\nimport { LoginComponent } from './login/login.component';\nimport { HomeComponent } from './home/home.component';\nimport { ProfileComponent } from './profile/profile.component';\nimport { BoardUserComponent } from './board-user/board-user.component';\nimport { BoardModeratorComponent } from './board-moderator/board-moderator.component';\nimport { BoardAdminComponent } from './board-admin/board-admin.component';\nimport { ContactComponent } from './contact/contact.component';\nimport { ProspectsComponent } from './prospects/prospects.component';\nimport { EntryContactComponent } from './entry-contact/entry-contact.component';\nimport { DisplayContactDetailsComponent } from './display-contact-details/display-contact-details.component';\n\nconst routes: Routes = [\n  { path: 'home', component: HomeComponent },\n  { path: 'login', component: LoginComponent },\n  { path: 'contact', component: ContactComponent},\n  { path: 'contact/update/:contactId', component: ContactComponent},\n  { path: 'm-contacts', component: EntryContactComponent},\n  { path: 'displayContactDetails/:contactId', component: DisplayContactDetailsComponent},\n  { path: 'prospects', component: ProspectsComponent},\n  { path: 'register', component: RegisterComponent },\n  { path: 'profile', component: ProfileComponent },\n  { path: 'user', component: BoardUserComponent },\n  { path: 'mod', component: BoardModeratorComponent },\n  { path: 'admin', component: BoardAdminComponent },\n  { path: '', redirectTo: 'home', pathMatch: 'full' }\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2FwcC5jb21wb25lbnQuY3NzIn0= */\"","import { Component, OnInit } from '@angular/core';\nimport { TokenStorageService } from './_services/token-storage.service';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent implements OnInit {\n  private roles: string[];\n  isLoggedIn = false;\n  showAdminBoard = false;\n  showModeratorBoard = false;\n  username: string;\n\n  constructor(private tokenStorageService: TokenStorageService) { }\n\n  ngOnInit() {\n    this.isLoggedIn = !!this.tokenStorageService.getToken();\n\n    if (this.isLoggedIn) {\n      const user = this.tokenStorageService.getUser();\n      this.roles = user.roles;\n\n      this.showAdminBoard = this.roles.includes('ROLE_ADMIN');\n      this.showModeratorBoard = this.roles.includes('ROLE_MODERATOR');\n\n      this.username = user.username;\n    }\n  }\n\n  logout() {\n    this.tokenStorageService.signOut();\n    window.location.reload();\n  }\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { HttpClientModule } from '@angular/common/http';\n\nimport { AppComponent } from './app.component';\nimport { LoginComponent } from './login/login.component';\nimport { RegisterComponent } from './register/register.component';\nimport { HomeComponent } from './home/home.component';\nimport { BoardAdminComponent } from './board-admin/board-admin.component';\nimport { BoardUserComponent } from './board-user/board-user.component';\nimport { BoardModeratorComponent } from './board-moderator/board-moderator.component';\nimport { ProfileComponent } from './profile/profile.component';\n\nimport { authInterceptorProviders } from './_helpers/auth.interceptor';\nimport { ContactComponent } from './contact/contact.component';\nimport { HeaderComponent } from './header/header.component';\nimport { MenuComponent } from './menu/menu.component';\nimport { ProspectsComponent } from './prospects/prospects.component';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport {MatInputModule} from '@angular/material/input'; \nimport { MatCardModule, MatCheckboxModule, MatDatepickerModule, MatIconModule, MatMenuModule, MatNativeDateModule, MatOptionModule, MatRadioModule, MatSelectModule, MatTableModule, MatTabsModule, MAT_FORM_FIELD_DEFAULT_OPTIONS } from '@angular/material';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatDividerModule} from '@angular/material/divider';\nimport { AddBeneficiaireDialogComponent } from './contact/AddBeneficiaireDialogComponent';\nimport { EntryContactComponent } from './entry-contact/entry-contact.component';\nimport { AfficherContactComponent } from './afficher-contact/afficher-contact.component';\nimport { DisplayContactDetailsComponent } from './display-contact-details/display-contact-details.component';\nimport { FileUploadModule } from 'ng2-file-upload';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    LoginComponent,\n    RegisterComponent,\n    HomeComponent,\n    BoardAdminComponent,\n    BoardUserComponent,\n    BoardModeratorComponent,\n    ProfileComponent,\n    ContactComponent,\n    HeaderComponent,\n    MenuComponent,\n    ProspectsComponent,\n    AddBeneficiaireDialogComponent,\n    EntryContactComponent,\n    AfficherContactComponent,\n    DisplayContactDetailsComponent\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    FormsModule,\n    HttpClientModule,\n    ReactiveFormsModule,\n    BrowserAnimationsModule,\n    MatInputModule,\n    MatButtonModule,\n    MatDividerModule,\n    MatIconModule,\n    MatOptionModule,\n    MatSelectModule,\n    MatRadioModule,\n    MatDatepickerModule,\n    MatNativeDateModule,\n    MatTabsModule,\n    MatCardModule,\n    MatTableModule,\n    MatMenuModule,\n    FileUploadModule,\n    MatCheckboxModule\n  ],\n  entryComponents:[AddBeneficiaireDialogComponent],\n  providers: [authInterceptorProviders,\n    { provide: MAT_FORM_FIELD_DEFAULT_OPTIONS, useValue: { appearance: 'fill' } }],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2JvYXJkLWFkbWluL2JvYXJkLWFkbWluLmNvbXBvbmVudC5jc3MifQ== */\"","import { Component, OnInit } from '@angular/core';\nimport { UserService } from '../_services/user.service';\n\n@Component({\n  selector: 'app-board-admin',\n  templateUrl: './board-admin.component.html',\n  styleUrls: ['./board-admin.component.css']\n})\nexport class BoardAdminComponent implements OnInit {\n  content = '';\n\n  constructor(private userService: UserService) { }\n\n  ngOnInit() {\n    this.userService.getAdminBoard().subscribe(\n      data => {\n        this.content = data;\n      },\n      err => {\n        this.content = JSON.parse(err.error).message;\n      }\n    );\n  }\n}\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2JvYXJkLW1vZGVyYXRvci9ib2FyZC1tb2RlcmF0b3IuY29tcG9uZW50LmNzcyJ9 */\"","import { Component, OnInit } from '@angular/core';\nimport { UserService } from '../_services/user.service';\n\n@Component({\n  selector: 'app-board-moderator',\n  templateUrl: './board-moderator.component.html',\n  styleUrls: ['./board-moderator.component.css']\n})\nexport class BoardModeratorComponent implements OnInit {\n  content: any;\n\n  constructor(private userService: UserService) { }\n\n  ngOnInit() {\n    this.userService.getModeratorBoard().subscribe(\n      data => {\n        this.content = data;\n      },\n      err => {\n        this.content = JSON.parse(err.error).message;\n      }\n    );\n  }\n}\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2JvYXJkLXVzZXIvYm9hcmQtdXNlci5jb21wb25lbnQuY3NzIn0= */\"","import { Component, OnInit } from '@angular/core';\nimport { UserService } from '../_services/user.service';\n\n@Component({\n  selector: 'app-board-user',\n  templateUrl: './board-user.component.html',\n  styleUrls: ['./board-user.component.css']\n})\nexport class BoardUserComponent implements OnInit {\n  content = '';\n\n  constructor(private userService: UserService) { }\n\n  ngOnInit() {\n    this.userService.getUserBoard().subscribe(\n      data => {\n        this.content = data;\n      },\n      err => {\n        this.content = JSON.parse(err.error).message;\n      }\n    );\n  }\n}\n","import { Inject } from '@angular/core';\nimport { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport {MAT_DIALOG_DATA} from '@angular/material';\nimport { ContactService } from '../_services/contact.service';\n\n\n\n@Component({\n  selector: 'add-benificaire',\n  templateUrl: 'add-benificaire-dialog.html',\n})\nexport class AddBeneficiaireDialogComponent implements OnInit{\n    \n    public form: FormGroup;\n    \n\n    constructor(private fb: FormBuilder,\n      @Inject(MAT_DIALOG_DATA) public data: any,\n      public contactService: ContactService) {}\n\n\n    ngOnInit(): void {\n        this.form = this.fb.group({\n            nom: [null, Validators.compose([Validators.required])],\n            prenom: [null, Validators.compose([Validators.required])],\n            assigne: [null, Validators.compose([Validators.required])],\n            adresse: [null, Validators.compose([Validators.required])],\n            codePostal: [null, Validators.compose([Validators.required])],\n            ville: [null, Validators.compose([Validators.required])],\n            pays: [null, Validators.compose([Validators.required])],\n            telephone: [null, Validators.compose([Validators.required])],\n            telephoneFixe: [null, Validators.compose([Validators.required])],\n            email: [null, Validators.compose([Validators.required, Validators.email])],\n            fax: [null, Validators.compose([Validators.required])],\n            siteInternet: [null, Validators.compose([Validators.required])]\n          });\n    }\n\n    addBeneficiaires(){\n      \n    }\n\n    submit() {\n      console.log(\"addBeneficiaires\");\n      this.data.dataKey.beneficiaires.push(this.form.value);\n\n      console.log(\"this.data.dataKey\")\n      console.log(this.data.dataKey)\n\n      this.contactService.register(this.data.dataKey).subscribe(\n        data => {\n          \n        },\n        err => {\n  \n        }\n      );\n      console.log(this.data);\n    }\n}\n","export default \"input, select, mat-option, textarea, mat-label, mat-select {\\n    font-size: 15px !important;\\n  \\n}\\n\\nmat-icon{\\n    font-size: 22px !important;\\n}\\n\\n\\n\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvY29udGFjdC9jb250YWN0LmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7SUFDSSwwQkFBMEI7O0FBRTlCOztBQUVBO0lBQ0ksMEJBQTBCO0FBQzlCIiwiZmlsZSI6InNyYy9hcHAvY29udGFjdC9jb250YWN0LmNvbXBvbmVudC5jc3MiLCJzb3VyY2VzQ29udGVudCI6WyJpbnB1dCwgc2VsZWN0LCBtYXQtb3B0aW9uLCB0ZXh0YXJlYSwgbWF0LWxhYmVsLCBtYXQtc2VsZWN0IHtcbiAgICBmb250LXNpemU6IDE1cHggIWltcG9ydGFudDtcbiAgXG59XG5cbm1hdC1pY29ue1xuICAgIGZvbnQtc2l6ZTogMjJweCAhaW1wb3J0YW50O1xufVxuXG5cbiJdfQ== */\"","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { FormArray, FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\nimport { MatDialog, MatRadioChange } from '@angular/material';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { FileUploader } from 'ng2-file-upload';\nimport { Contact } from '../models/contact.model';\nimport { ContactService } from '../_services/contact.service';\nimport { PaysService } from '../_services/pays.service';\nimport { AddBeneficiaireDialogComponent } from './AddBeneficiaireDialogComponent';\n\n@Component({\n  selector: 'app-contact',\n  templateUrl: './contact.component.html',\n  styleUrls: ['./contact.component.css']\n})\nexport class ContactComponent implements OnInit {\n\n  public form: FormGroup;\n  public contactList: FormArray;\n  public contact: Contact;\n  public uploader: FileUploader;\n  public hasDragOver = false;\n  public typeContact: string;\n  public isParticulier: boolean = true;\n\n\n  @Input()\n  private editmode = false;\n\n  @Input()\n  private url = '';\n\n  @Output()\n  private urlChange = new EventEmitter();\n\n\n  public civilites = [\n    { value: 'Mr', viewValue: 'MR' },\n    { value: 'Mme', viewValue: 'MME' },\n    { value: 'Mlle', viewValue: 'MLLE' }\n  ];\n  allPays: import(\"/Users/Sacko/Documents/Larissa/peniellarissa/peniel-crm-front/src/app/models/pays.model\").Pays[];\n\n  get contactFormGroup() {\n    return this.form.get('contacts') as FormArray;\n  }\n\n  constructor(private fb: FormBuilder,\n    public dialog: MatDialog,\n    public contactService: ContactService,\n    public paysService: PaysService,\n    private route: ActivatedRoute,\n    private router: Router) {\n\n    this.contact = new Contact();\n\n    this.route.params.subscribe(params => {\n      console.log(params);\n      if (params['contactId']) {\n        contactService.findById(params['contactId']).subscribe(\n          data => {\n            this.contact = data;\n          },\n          err => {\n\n          }\n        );\n      }\n    });\n\n    this.uploader = new FileUploader({\n      url: 'http://localhost:4200/upload',\n      disableMultipart: false,\n      autoUpload: true\n    });\n\n    this.uploader.response.subscribe(res => {\n      // Upload returns a JSON with the image ID\n      this.url = 'http://localhost:4200/get/' + JSON.parse(res).id;\n      this.urlChange.emit(this.url);\n    });\n  }\n\n  public fileOver(e: any): void {\n    this.hasDragOver = e;\n  }\n\n  ngOnInit() {\n    this.form = this.fb.group({\n      typeContact: [null, Validators.compose([Validators.required])],\n      nom: [null, Validators.compose([Validators.required])],\n      prenom: [null, Validators.compose([Validators.required])],\n      assigne: [null, Validators.compose([Validators.required])],\n      telephoneMobile1: [null, Validators.compose([Validators.required])],\n      telephoneMobile2: [null, Validators.compose([Validators.required])],\n      telephoneFixe: [null, Validators.compose([Validators.required])],\n      emailPerso: [null, Validators.compose([Validators.required, Validators.email])],\n      emailPro: [null, Validators.compose([Validators.required, Validators.email])],\n      structure: [null, Validators.compose([Validators.required])],\n      activite: [null, Validators.compose([Validators.required])],\n      adressePerso: [null, Validators.compose([Validators.required])],\n      adressePro: [null, Validators.compose([Validators.required])],\n      adressePersoCodePostal: [null, Validators.compose([Validators.required])],\n      adresseProCodePostal: [null, Validators.compose([Validators.required])],\n      adressePersoVille: [null, Validators.compose([Validators.required])],\n      adresseProVille: [null, Validators.compose([Validators.required])],\n      adressePersoPays: [null, Validators.compose([Validators.required])],\n      adresseProPays: [null, Validators.compose([Validators.required])],\n      adressePersoZoneGeo: [null, Validators.compose([Validators.required])],\n      adresseProZoneGeo: [null, Validators.compose([Validators.required])],\n      adressePersoZoneGeoSuite: [null, Validators.compose([Validators.required])],\n      adresseProZoneGeoSuite: [null, Validators.compose([Validators.required])],\n      siteInternet: [null, Validators.compose([Validators.required])],\n      debutAbonnement: [null, Validators.compose([Validators.required])],\n      renAbonnement: [null, Validators.compose([Validators.required])],\n      source: [null, Validators.compose([Validators.required])],\n      typeAbonnement: [null, Validators.compose([Validators.required])],\n      notes: [null, Validators.compose([Validators.required])],\n      siren: [null, Validators.compose([Validators.required])],\n      raisonSociale: [null, Validators.compose([Validators.required])],\n      activitePrincipale: [null, Validators.compose([Validators.required])],\n      naissance: [null, Validators.compose([Validators.required])],\n      nationalite: [null, Validators.compose([Validators.required])],\n      civilite: [null, Validators.compose([Validators.required])],\n      statut: [null, Validators.compose([Validators.required])],\n      fonction: [null, Validators.compose([Validators.required])],\n      abonne: [null, Validators.compose([Validators.required])],\n      situationFamiliale: [null, Validators.compose([Validators.required])],\n      typeHebergementPrefere: [null, Validators.compose([Validators.required])],\n      typeRestaurantPrefere: [null, Validators.compose([Validators.required])],\n      tailleEntreprise: [null, Validators.compose([Validators.required])],\n      contactPrincipalNom: [null, Validators.compose([Validators.required])],\n      contactSecondaireNom: [null, Validators.compose([Validators.required])],\n      contactPrincipalTelephoneMobile: [null, Validators.compose([Validators.required])],\n      contactSecondaireTelephoneMobile: [null, Validators.compose([Validators.required])],\n      contactPrincipalEmail: [null, Validators.compose([Validators.required, Validators.email])],\n      contactSecondaireEmail: [null, Validators.compose([Validators.required, Validators.email])],\n      contacts: this.fb.array([this.createContact()])\n    });\n\n    // set contactlist to this field\n    this.contactList = this.form.get('contacts') as FormArray;\n\n    this.paysService.allPays().subscribe(\n      data => {\n        this.allPays = data;\n      },\n      err => {\n        \n      }\n    );\n  }\n\n  // contact formgroup\n  createContact(): FormGroup {\n    return this.fb.group({\n      //type: ['email', Validators.compose([Validators.required])], // i.e Email, Phone\n      name: [null, Validators.compose([Validators.required])], // i.e. Home, Office\n      prenom: [null, Validators.compose([Validators.required])],\n      telephone: [null, Validators.compose([Validators.required, Validators.required])],\n      email: [null, Validators.compose([Validators.required, Validators.email])]\n    });\n  }\n\n\n  // add a contact form group\n  addBeneficiare() {\n    this.contactList.push(this.createContact());\n  }\n\n  // remove contact from group\n  removeContact(index) {\n    // this.contactList = this.form.get('contacts') as FormArray;\n    this.contactList.removeAt(index);\n  }\n\n  // triggered to change validation of value field type\n  changedFieldType(index) {\n    let validators = null;\n\n    if (this.getContactsFormGroup(index).controls['type'].value === 'email') {\n      validators = Validators.compose([Validators.required, Validators.email]);\n    } else {\n      validators = Validators.compose([\n        Validators.required,\n        Validators.pattern(new RegExp('^\\\\+[0-9]?()[0-9](\\\\d[0-9]{9})$')) // pattern for validating international phone number\n      ]);\n    }\n\n    this.getContactsFormGroup(index).controls['value'].setValidators(\n      validators\n    );\n\n    this.getContactsFormGroup(index).controls['value'].updateValueAndValidity();\n  }\n\n  // get the formgroup under contacts form array\n  getContactsFormGroup(index): FormGroup {\n    // this.contactList = this.form.get('contacts') as FormArray;\n    const formGroup = this.contactList.controls[index] as FormGroup;\n    return formGroup;\n  }\n\n  // method triggered when form is submitted\n  submit() {\n    console.log(this.form.value);\n  }\n\n  openAddBeneficiareDialog() {\n    //const dialogRef = this.dialog.open(AddBeneficiaireDialogComponent);\n\n    const dialogRef = this.dialog.open(AddBeneficiaireDialogComponent, {\n      //width: '330px',\n      //height: '400px',\n      data: {\n        dataKey: this.contact\n      }\n    });\n\n    dialogRef.afterClosed().subscribe(result => {\n      console.log(\"result\");\n      console.log(result);\n    });\n  }\n\n  addBeneficiaires() {\n\n  }\n\n\n  sauvegarderContact() {\n    console.log(\"display contact....\");\n    this.form.value.id = this.contact.id;\n    this.contactService.register(this.form.value).subscribe(\n      data => {\n        this.router.navigate(['/m-contacts']);\n      },\n      err => {\n\n      }\n    );\n    return this.form.value;\n  }\n\n  cancel() {\n    this.router.navigate(['/m-contacts']);\n  }\n\n  typeContactChoosed($event: MatRadioChange) {\n    console.log($event.source.name, $event.value);\n\n    if ($event.value === 'PARTICULIER') {\n      this.isParticulier = true;\n    }\n    else if ($event.value === 'SOCIETE') {\n      this.isParticulier = false;\n    }\n\n    this.contact = new Contact();\n  }\n\n}\n\n\n","export default \"input.mat-input-element {\\n    font-size: 3em;\\n}\\n\\n.td-font-weight{\\n    font-weight:bold;\\n}\\n\\ninput, td{\\n    font-size: 15px !important;\\n  \\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvZGlzcGxheS1jb250YWN0LWRldGFpbHMvZGlzcGxheS1jb250YWN0LWRldGFpbHMuY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtJQUNJLGNBQWM7QUFDbEI7O0FBRUE7SUFDSSxnQkFBZ0I7QUFDcEI7O0FBRUE7SUFDSSwwQkFBMEI7O0FBRTlCIiwiZmlsZSI6InNyYy9hcHAvZGlzcGxheS1jb250YWN0LWRldGFpbHMvZGlzcGxheS1jb250YWN0LWRldGFpbHMuY29tcG9uZW50LmNzcyIsInNvdXJjZXNDb250ZW50IjpbImlucHV0Lm1hdC1pbnB1dC1lbGVtZW50IHtcbiAgICBmb250LXNpemU6IDNlbTtcbn1cblxuLnRkLWZvbnQtd2VpZ2h0e1xuICAgIGZvbnQtd2VpZ2h0OmJvbGQ7XG59XG5cbmlucHV0LCB0ZHtcbiAgICBmb250LXNpemU6IDE1cHggIWltcG9ydGFudDtcbiAgXG59Il19 */\"","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { Contact } from '../models/contact.model';\nimport { ContactService } from '../_services/contact.service';\n\n@Component({\n  selector: 'app-display-contact-details',\n  templateUrl: './display-contact-details.component.html',\n  styleUrls: ['./display-contact-details.component.css']\n})\nexport class DisplayContactDetailsComponent implements OnInit {\n\n  contact: Contact;\n  isParticulier: boolean;\n\n  constructor(private route: ActivatedRoute,\n              private contactService:ContactService,\n              private router: Router) { \n                \n    this.route.params.subscribe(params => {\n      console.log(params);\n      if (params['contactId']) { \n        contactService.findById(params['contactId']).subscribe(\n          data => {\n            this.contact = data;\n            this.isParticulier = (this.contact[\"typeContact\"]===\"PARTICULIER\"?true:false);\n          },\n          err => {\n            \n          }\n        );\n      }\n    });\n  }\n\n  ngOnInit() {\n\n  }\n\n  updateContact(){\n    this.router.navigate(['/contact/update', this.contact.id]);\n  }\n\n  cancel(){\n    this.router.navigate(['/m-contacts']);\n  }\n\n}\n","export default \"\\n    .table tr.active td {  \\n      background-color:#48da24 !important;  \\n      color: white;  \\n    }   \\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvZW50cnktY29udGFjdC9lbnRyeS1jb250YWN0LmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtJQUNJO01BQ0UsbUNBQW1DO01BQ25DLFlBQVk7SUFDZCIsImZpbGUiOiJzcmMvYXBwL2VudHJ5LWNvbnRhY3QvZW50cnktY29udGFjdC5jb21wb25lbnQuY3NzIiwic291cmNlc0NvbnRlbnQiOlsiXG4gICAgLnRhYmxlIHRyLmFjdGl2ZSB0ZCB7ICBcbiAgICAgIGJhY2tncm91bmQtY29sb3I6IzQ4ZGEyNCAhaW1wb3J0YW50OyAgXG4gICAgICBjb2xvcjogd2hpdGU7ICBcbiAgICB9ICAgIl19 */\"","import { trigger, state, style, transition, animate } from '@angular/animations';\nimport { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { Contact } from '../models/contact.model';\nimport { ContactService } from '../_services/contact.service';\n\n@Component({\n  selector: 'app-entry-contact',\n  templateUrl: './entry-contact.component.html',\n  styleUrls: ['./entry-contact.component.css']\n})\nexport class EntryContactComponent implements OnInit {\n\n  public contacts: Contact[];\n  HighlightRow : Number;  \n  Employee : any;  \n  ClickedRow:any;  \n\n  constructor(private contactService:ContactService, \n              private router: Router) {\n    this.ClickedRow = function(index,contactId){  \n      this.HighlightRow = index;  \n      this.router.navigate(['/displayContactDetails', contactId]);\n    } \n  }\n\n  ngOnInit() {\n    this.contactService.allContacts().subscribe(\n      data => {\n        this.contacts = data;\n      },\n      err => {\n        \n      }\n    );\n\n  }\n\n}","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2hlYWRlci9oZWFkZXIuY29tcG9uZW50LmNzcyJ9 */\"","import { Component, OnInit } from '@angular/core';\nimport { TokenStorageService } from '../_services/token-storage.service';\n\n@Component({\n  selector: 'app-header',\n  templateUrl: './header.component.html',\n  styleUrls: ['./header.component.css']\n})\nexport class HeaderComponent implements OnInit {\n\n  private roles: string[];\n  isLoggedIn = false;\n  showAdminBoard = false;\n  showModeratorBoard = false;\n  username: string;\n\n  constructor(private tokenStorageService: TokenStorageService) { }\n\n  ngOnInit() {\n    this.isLoggedIn = !!this.tokenStorageService.getToken();\n\n    if (this.isLoggedIn) {\n      const user = this.tokenStorageService.getUser();\n      this.roles = user.roles;\n\n      this.showAdminBoard = this.roles.includes('ROLE_ADMIN');\n      this.showModeratorBoard = this.roles.includes('ROLE_MODERATOR');\n\n      this.username = user.username;\n    }\n  }\n\n  logout() {\n    this.tokenStorageService.signOut();\n    //window.location.reload();\n  }\n}\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2hvbWUvaG9tZS5jb21wb25lbnQuY3NzIn0= */\"","import { Component, OnInit } from '@angular/core';\nimport { UserService } from '../_services/user.service';\n\n@Component({\n  selector: 'app-home',\n  templateUrl: './home.component.html',\n  styleUrls: ['./home.component.css']\n})\nexport class HomeComponent implements OnInit {\n  content: string;\n\n  constructor(private userService: UserService) { }\n\n  ngOnInit() {\n    this.userService.getPublicContent().subscribe(\n      data => {\n        this.content = data;\n      },\n      err => {\n        this.content = JSON.parse(err.error).message;\n      }\n    );\n  }\n}\n","export default \"label {\\n  display: block;\\n  margin-top: 10px;\\n}\\n\\n.card-container.card {\\n  max-width: 400px !important;\\n  padding: 40px 40px;\\n}\\n\\n.card {\\n  background-color: #f7f7f7;\\n  padding: 20px 25px 30px;\\n  margin: 0 auto 25px;\\n  margin-top: 50px;\\n  border-radius: 2px;\\n  box-shadow: 0px 2px 2px rgba(0, 0, 0, 0.3);\\n}\\n\\n.profile-img-card {\\n  width: 96px;\\n  height: 96px;\\n  margin: 0 auto 10px;\\n  display: block;\\n  border-radius: 50%;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvbG9naW4vbG9naW4uY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNFLGNBQWM7RUFDZCxnQkFBZ0I7QUFDbEI7O0FBRUE7RUFDRSwyQkFBMkI7RUFDM0Isa0JBQWtCO0FBQ3BCOztBQUVBO0VBQ0UseUJBQXlCO0VBQ3pCLHVCQUF1QjtFQUN2QixtQkFBbUI7RUFDbkIsZ0JBQWdCO0VBR2hCLGtCQUFrQjtFQUdsQiwwQ0FBMEM7QUFDNUM7O0FBRUE7RUFDRSxXQUFXO0VBQ1gsWUFBWTtFQUNaLG1CQUFtQjtFQUNuQixjQUFjO0VBR2Qsa0JBQWtCO0FBQ3BCIiwiZmlsZSI6InNyYy9hcHAvbG9naW4vbG9naW4uY29tcG9uZW50LmNzcyIsInNvdXJjZXNDb250ZW50IjpbImxhYmVsIHtcbiAgZGlzcGxheTogYmxvY2s7XG4gIG1hcmdpbi10b3A6IDEwcHg7XG59XG5cbi5jYXJkLWNvbnRhaW5lci5jYXJkIHtcbiAgbWF4LXdpZHRoOiA0MDBweCAhaW1wb3J0YW50O1xuICBwYWRkaW5nOiA0MHB4IDQwcHg7XG59XG5cbi5jYXJkIHtcbiAgYmFja2dyb3VuZC1jb2xvcjogI2Y3ZjdmNztcbiAgcGFkZGluZzogMjBweCAyNXB4IDMwcHg7XG4gIG1hcmdpbjogMCBhdXRvIDI1cHg7XG4gIG1hcmdpbi10b3A6IDUwcHg7XG4gIC1tb3otYm9yZGVyLXJhZGl1czogMnB4O1xuICAtd2Via2l0LWJvcmRlci1yYWRpdXM6IDJweDtcbiAgYm9yZGVyLXJhZGl1czogMnB4O1xuICAtbW96LWJveC1zaGFkb3c6IDBweCAycHggMnB4IHJnYmEoMCwgMCwgMCwgMC4zKTtcbiAgLXdlYmtpdC1ib3gtc2hhZG93OiAwcHggMnB4IDJweCByZ2JhKDAsIDAsIDAsIDAuMyk7XG4gIGJveC1zaGFkb3c6IDBweCAycHggMnB4IHJnYmEoMCwgMCwgMCwgMC4zKTtcbn1cblxuLnByb2ZpbGUtaW1nLWNhcmQge1xuICB3aWR0aDogOTZweDtcbiAgaGVpZ2h0OiA5NnB4O1xuICBtYXJnaW46IDAgYXV0byAxMHB4O1xuICBkaXNwbGF5OiBibG9jaztcbiAgLW1vei1ib3JkZXItcmFkaXVzOiA1MCU7XG4gIC13ZWJraXQtYm9yZGVyLXJhZGl1czogNTAlO1xuICBib3JkZXItcmFkaXVzOiA1MCU7XG59Il19 */\"","import { Component, OnInit } from '@angular/core';\nimport { AuthService } from '../_services/auth.service';\nimport { TokenStorageService } from '../_services/token-storage.service';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})\nexport class LoginComponent implements OnInit {\n  form: any = {};\n  isLoggedIn = false;\n  isLoginFailed = false;\n  errorMessage = '';\n  roles: string[] = [];\n\n  constructor(private authService: AuthService, private tokenStorage: TokenStorageService) { }\n\n  ngOnInit() {\n    if (this.tokenStorage.getToken()) {\n      this.isLoggedIn = true;\n      this.roles = this.tokenStorage.getUser().roles;\n    }\n  }\n\n  onSubmit() {\n    this.authService.login(this.form).subscribe(\n      data => {\n        this.tokenStorage.saveToken(data.accessToken);\n        this.tokenStorage.saveUser(data);\n\n        this.isLoginFailed = false;\n        this.isLoggedIn = true;\n        this.roles = this.tokenStorage.getUser().roles;\n        this.reloadPage();\n      },\n      err => {\n        this.errorMessage = err.error.message;\n        this.isLoginFailed = true;\n      }\n    );\n  }\n\n  reloadPage() {\n    window.location.reload();\n  }\n}\n","export default \"body, .btn {font-size:0.75em;font-family: Arial, Helvetica, sans-serif}\\n.card-body{\\n    font-size:0.9em;\\n    font-family: Arial, Helvetica, sans-serif; \\n    line-height: 0.2em; \\n    padding-top: 1em;\\n    height: 3em;\\n    padding-left: 26%;\\n    width: 15em\\n}\\n.menu{position:relative; left: -0.05em;}\\na{margin-left: 0.2em;}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvbWVudS9tZW51LmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsWUFBWSxnQkFBZ0IsQ0FBQyx5Q0FBeUM7QUFDdEU7SUFDSSxlQUFlO0lBQ2YseUNBQXlDO0lBQ3pDLGtCQUFrQjtJQUNsQixnQkFBZ0I7SUFDaEIsV0FBVztJQUNYLGlCQUFpQjtJQUNqQjtBQUNKO0FBQ0EsTUFBTSxpQkFBaUIsRUFBRSxhQUFhLENBQUM7QUFDdkMsRUFBRSxrQkFBa0IsQ0FBQyIsImZpbGUiOiJzcmMvYXBwL21lbnUvbWVudS5jb21wb25lbnQuY3NzIiwic291cmNlc0NvbnRlbnQiOlsiYm9keSwgLmJ0biB7Zm9udC1zaXplOjAuNzVlbTtmb250LWZhbWlseTogQXJpYWwsIEhlbHZldGljYSwgc2Fucy1zZXJpZn1cbi5jYXJkLWJvZHl7XG4gICAgZm9udC1zaXplOjAuOWVtO1xuICAgIGZvbnQtZmFtaWx5OiBBcmlhbCwgSGVsdmV0aWNhLCBzYW5zLXNlcmlmOyBcbiAgICBsaW5lLWhlaWdodDogMC4yZW07IFxuICAgIHBhZGRpbmctdG9wOiAxZW07XG4gICAgaGVpZ2h0OiAzZW07XG4gICAgcGFkZGluZy1sZWZ0OiAyNiU7XG4gICAgd2lkdGg6IDE1ZW1cbn1cbi5tZW51e3Bvc2l0aW9uOnJlbGF0aXZlOyBsZWZ0OiAtMC4wNWVtO31cbmF7bWFyZ2luLWxlZnQ6IDAuMmVtO30iXX0= */\"","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-menu',\n  templateUrl: './menu.component.html',\n  styleUrls: ['./menu.component.css']\n})\nexport class MenuComponent implements OnInit {\n\n  menus : any;\n\n  constructor() { \n\n    this.menus = {\n      contact: true,\n      mesTaches: true,\n      mesNotifications: true,\n      comptabilite: true,\n      monCompte: true,\n    }\n  }\n\n  ngOnInit() {\n  }\n\n  public closeAllCollapsedWithout(key: String): any{\n    for(var menuKey in this.menus){\n      if(menuKey === key){\n        this.menus[menuKey] = true;\n      }\n      else{\n        this.menus[menuKey] = false;\n      }\n    }\n    \n  }\n\n}\n","export class Contact {\n\n  raisonSociale: String;\n  siren: String;\n  activitePrincipale: String;\n  typePrestation: String;\n  typeContact: String;\n  id?: String;\n  nom: string;\n  prenom;\n  telephoneMobile: String;\n  siteInternet: String;\n  creationDate?: Date;\n  assigne: string;\n  telephoneFixe: string;\n  telephoneMobile1: string;\n  telephoneMobile2: string;\n  emailPerso: string;\n  emailPro: string;\n  structure: string;\n  activite: string;\n  adressePerso: string;\n  adressePro: string;\n  adressePersoCodePostal: string;\n  adresseProCodePostal: string;\n  adressePersoVille: string;\n  adresseProVille: string;\n  adressePersoPays: string;\n  adresseProPays: string;\n  adressePersoZoneGeo: string;\n  adresseProZoneGeo: string;\n  adressePersoZoneGeoSuite: string;\n  adresseProZoneGeoSuite: string;\n  debutAbonnement: string;\n  renAbonnement: string;\n  source: string;\n  typeAbonnement: string;\n  notes: string;\n  naissance: string;\n  nationalite: string;\n  civilite: string;\n  statut: string;\n  fonction: string;\n  situationFamiliale: string;\n  abonne: string;\n  typeHebergementPrefere: string;\n  typeRestaurantPrefere: string;\n  tailleEntreprise: string;\n  contactPrincipalNom: string;\n  contactPrincipalTelephoneMobile: string;\n  contactSecondaireTelephoneMobile: string;\n  contactPrincipalEmail: string;\n  contactSecondaireEmail: string;\n  beneficiaires: []\n}","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3Byb2ZpbGUvcHJvZmlsZS5jb21wb25lbnQuY3NzIn0= */\"","import { Component, OnInit } from '@angular/core';\n\nimport { TokenStorageService } from '../_services/token-storage.service';\n\n@Component({\n  selector: 'app-profile',\n  templateUrl: './profile.component.html',\n  styleUrls: ['./profile.component.css']\n})\nexport class ProfileComponent implements OnInit {\n  currentUser: any;\n\n  constructor(private token: TokenStorageService) { }\n\n  ngOnInit() {\n    this.currentUser = this.token.getUser();\n  }\n}\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3Byb3NwZWN0cy9wcm9zcGVjdHMuY29tcG9uZW50LmNzcyJ9 */\"","import { Component, OnInit } from '@angular/core';\nimport { FormGroup, FormArray, FormBuilder, Validators } from '@angular/forms';\n\n@Component({\n  selector: 'app-prospects',\n  templateUrl: './prospects.component.html',\n  styleUrls: ['./prospects.component.css']\n})\nexport class ProspectsComponent implements OnInit {\n\n  public form: FormGroup;\n  public contactList: FormArray;\n\n  // returns all form groups under contacts\n  get contactFormGroup() {\n    return this.form.get('contacts') as FormArray;\n  }\n\n  constructor(private fb: FormBuilder) {}\n\n  ngOnInit() {\n    this.form = this.fb.group({\n      name: [null, Validators.compose([Validators.required])],\n      prenom: [null, Validators.compose([Validators.required])],\n      assigne: [null, Validators.compose([Validators.required])],\n      adresse: [null, Validators.compose([Validators.required])],\n      codePostal: [null, Validators.compose([Validators.required])],\n      ville: [null, Validators.compose([Validators.required])],\n      pays: [null, Validators.compose([Validators.required])],\n      telephone: [null, Validators.compose([Validators.required])],\n      telephoneFixe: [null, Validators.compose([Validators.required])],\n      email: [null, Validators.compose([Validators.required])],\n      fax: [null, Validators.compose([Validators.required])],\n      siteInternet: [null, Validators.compose([Validators.required])],\n      contacts: this.fb.array([this.createContact()])\n    });\n\n    // set contactlist to this field\n    this.contactList = this.form.get('contacts') as FormArray;\n  }\n\n  // contact formgroup\n  createContact(): FormGroup {\n    return this.fb.group({\n      //type: ['email', Validators.compose([Validators.required])], // i.e Email, Phone\n      name: [null, Validators.compose([Validators.required])], // i.e. Home, Office\n      prenom: [null, Validators.compose([Validators.required])],\n      telephone: [null, Validators.compose([Validators.required, Validators.required])],\n      email: [null, Validators.compose([Validators.required, Validators.email])]\n    });\n  }\n\n  \n  // add a contact form group\n  addBeneficiare(){\n    this.contactList.push(this.createContact());\n  }\n\n  // remove contact from group\n  removeContact(index) {\n    // this.contactList = this.form.get('contacts') as FormArray;\n    this.contactList.removeAt(index);\n  }\n\n  // triggered to change validation of value field type\n  changedFieldType(index) {\n    let validators = null;\n\n    if (this.getContactsFormGroup(index).controls['type'].value === 'email') {\n      validators = Validators.compose([Validators.required, Validators.email]);\n    } else {\n      validators = Validators.compose([\n        Validators.required,\n        Validators.pattern(new RegExp('^\\\\+[0-9]?()[0-9](\\\\d[0-9]{9})$')) // pattern for validating international phone number\n      ]);\n    }\n\n    this.getContactsFormGroup(index).controls['value'].setValidators(\n      validators\n    );\n\n    this.getContactsFormGroup(index).controls['value'].updateValueAndValidity();\n  }\n\n  // get the formgroup under contacts form array\n  getContactsFormGroup(index): FormGroup {\n    // this.contactList = this.form.get('contacts') as FormArray;\n    const formGroup = this.contactList.controls[index] as FormGroup;\n    return formGroup;\n  }\n\n  // method triggered when form is submitted\n  submit() {\n    console.log(this.form.value);\n  }\n}\n","export default \"label {\\n  display: block;\\n  margin-top: 10px;\\n}\\n\\n.card-container.card {\\n  max-width: 400px !important;\\n  padding: 40px 40px;\\n}\\n\\n.card {\\n  background-color: #f7f7f7;\\n  padding: 20px 25px 30px;\\n  margin: 0 auto 25px;\\n  margin-top: 50px;\\n  border-radius: 2px;\\n  box-shadow: 0px 2px 2px rgba(0, 0, 0, 0.3);\\n}\\n\\n.profile-img-card {\\n  width: 96px;\\n  height: 96px;\\n  margin: 0 auto 10px;\\n  display: block;\\n  border-radius: 50%;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvcmVnaXN0ZXIvcmVnaXN0ZXIuY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNFLGNBQWM7RUFDZCxnQkFBZ0I7QUFDbEI7O0FBRUE7RUFDRSwyQkFBMkI7RUFDM0Isa0JBQWtCO0FBQ3BCOztBQUVBO0VBQ0UseUJBQXlCO0VBQ3pCLHVCQUF1QjtFQUN2QixtQkFBbUI7RUFDbkIsZ0JBQWdCO0VBR2hCLGtCQUFrQjtFQUdsQiwwQ0FBMEM7QUFDNUM7O0FBRUE7RUFDRSxXQUFXO0VBQ1gsWUFBWTtFQUNaLG1CQUFtQjtFQUNuQixjQUFjO0VBR2Qsa0JBQWtCO0FBQ3BCIiwiZmlsZSI6InNyYy9hcHAvcmVnaXN0ZXIvcmVnaXN0ZXIuY29tcG9uZW50LmNzcyIsInNvdXJjZXNDb250ZW50IjpbImxhYmVsIHtcbiAgZGlzcGxheTogYmxvY2s7XG4gIG1hcmdpbi10b3A6IDEwcHg7XG59XG5cbi5jYXJkLWNvbnRhaW5lci5jYXJkIHtcbiAgbWF4LXdpZHRoOiA0MDBweCAhaW1wb3J0YW50O1xuICBwYWRkaW5nOiA0MHB4IDQwcHg7XG59XG5cbi5jYXJkIHtcbiAgYmFja2dyb3VuZC1jb2xvcjogI2Y3ZjdmNztcbiAgcGFkZGluZzogMjBweCAyNXB4IDMwcHg7XG4gIG1hcmdpbjogMCBhdXRvIDI1cHg7XG4gIG1hcmdpbi10b3A6IDUwcHg7XG4gIC1tb3otYm9yZGVyLXJhZGl1czogMnB4O1xuICAtd2Via2l0LWJvcmRlci1yYWRpdXM6IDJweDtcbiAgYm9yZGVyLXJhZGl1czogMnB4O1xuICAtbW96LWJveC1zaGFkb3c6IDBweCAycHggMnB4IHJnYmEoMCwgMCwgMCwgMC4zKTtcbiAgLXdlYmtpdC1ib3gtc2hhZG93OiAwcHggMnB4IDJweCByZ2JhKDAsIDAsIDAsIDAuMyk7XG4gIGJveC1zaGFkb3c6IDBweCAycHggMnB4IHJnYmEoMCwgMCwgMCwgMC4zKTtcbn1cblxuLnByb2ZpbGUtaW1nLWNhcmQge1xuICB3aWR0aDogOTZweDtcbiAgaGVpZ2h0OiA5NnB4O1xuICBtYXJnaW46IDAgYXV0byAxMHB4O1xuICBkaXNwbGF5OiBibG9jaztcbiAgLW1vei1ib3JkZXItcmFkaXVzOiA1MCU7XG4gIC13ZWJraXQtYm9yZGVyLXJhZGl1czogNTAlO1xuICBib3JkZXItcmFkaXVzOiA1MCU7XG59Il19 */\"","import { Component, OnInit } from '@angular/core';\nimport { AuthService } from '../_services/auth.service';\n\n@Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.css']\n})\nexport class RegisterComponent implements OnInit {\n  form: any = {};\n  isSuccessful = false;\n  isSignUpFailed = false;\n  errorMessage = '';\n\n  constructor(private authService: AuthService) { }\n\n  ngOnInit() {\n  }\n\n  onSubmit() {\n    this.authService.register(this.form).subscribe(\n      data => {\n        console.log(data);\n        this.isSuccessful = true;\n        this.isSignUpFailed = false;\n      },\n      err => {\n        this.errorMessage = err.error.message;\n        this.isSignUpFailed = true;\n      }\n    );\n  }\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import 'hammerjs';\nimport { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"],"sourceRoot":"webpack:///"}