{"version":3,"sources":["./$_lazy_route_resource lazy namespace object","./src/app/afficher-contact/afficher-contact.component.html","./src/app/app.component.html","./src/app/board-admin/board-admin.component.html","./src/app/board-moderator/board-moderator.component.html","./src/app/board-user/board-user.component.html","./src/app/contact/add-benificaire-dialog.html","./src/app/contact/contact.component.html","./src/app/display-contact-details/display-contact-details.component.html","./src/app/entry-contact/entry-contact.component.html","./src/app/header/header.component.html","./src/app/home/home.component.html","./src/app/login/login.component.html","./src/app/menu/menu.component.html","./src/app/profile/profile.component.html","./src/app/prospects/prospects.component.html","./src/app/register/register.component.html","./node_modules/tslib/tslib.es6.js","./src/app/_helpers/auth.interceptor.ts","./src/app/_services/auth.service.ts","./src/app/_services/contact.service.ts","./src/app/_services/pays.service.ts","./src/app/_services/token-storage.service.ts","./src/app/_services/user.service.ts","./src/app/afficher-contact/afficher-contact.component.css","./src/app/afficher-contact/afficher-contact.component.ts","./src/app/app-routing.module.ts","./src/app/app.component.css","./src/app/app.component.ts","./src/app/app.module.ts","./src/app/board-admin/board-admin.component.css","./src/app/board-admin/board-admin.component.ts","./src/app/board-moderator/board-moderator.component.css","./src/app/board-moderator/board-moderator.component.ts","./src/app/board-user/board-user.component.css","./src/app/board-user/board-user.component.ts","./src/app/contact/AddBeneficiaireDialogComponent.ts","./src/app/contact/contact.component.css","./src/app/contact/contact.component.ts","./src/app/display-contact-details/display-contact-details.component.css","./src/app/display-contact-details/display-contact-details.component.ts","./src/app/entry-contact/entry-contact.component.css","./src/app/entry-contact/entry-contact.component.ts","./src/app/header/header.component.css","./src/app/header/header.component.ts","./src/app/home/home.component.css","./src/app/home/home.component.ts","./src/app/login/login.component.css","./src/app/login/login.component.ts","./src/app/menu/menu.component.css","./src/app/menu/menu.component.ts","./src/app/models/contact.model.ts","./src/app/profile/profile.component.css","./src/app/profile/profile.component.ts","./src/app/prospects/prospects.component.css","./src/app/prospects/prospects.component.ts","./src/app/register/register.component.css","./src/app/register/register.component.ts","./src/environments/environment.ts","./src/main.ts"],"names":[],"mappings":"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","file":"main-es2015.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","export default \"<p>afficher-contact works!</p>\\n\"","export default \"<div class=\\\"container-fluid\\\">\\n<div class=\\\"col-md-12\\\">\\n  <app-header></app-header>\\n</div>\\n<div class=\\\"row mr-2 ml-2\\\">\\n  <!--nav class=\\\"col-md-2\\\" *ngIf=\\\"isLoggedIn\\\">\\n    <app-menu></app-menu>\\n  </nav-->\\n  <section class=\\\"col-md-12\\\" [ngClass]=\\\"isLoggedIn?'col-md-12':'offset-1 col-md-12'\\\">\\n    <router-outlet></router-outlet>\\n  </section>\\n</div>\\n<footer class=\\\"row mr-2 ml-2 mt-3\\\" *ngIf=\\\"isLoggedIn\\\">\\n  <div class=\\\"col-md-12\\\" class=\\\"footer\\\">\\n    Pied de page\\n  </div>\\n</footer>\\n</div>\"","export default \"<div class=\\\"container\\\">\\n  <header class=\\\"jumbotron\\\">\\n    <p>{{ content }}</p>\\n  </header>\\n</div>\\n\"","export default \"<div class=\\\"container\\\">\\n  <header class=\\\"jumbotron\\\">\\n    <p>{{ content }}</p>\\n  </header>\\n</div>\\n\"","export default \"<div class=\\\"container\\\">\\n  <header class=\\\"jumbotron\\\">\\n    <p>{{ content }}</p>\\n  </header>\\n</div>\\n\"","export default \"<form [formGroup]=\\\"form\\\">\\n    <table>\\n        <tr>\\n            <td class=\\\"decalage-label\\\">Nom</td>\\n            <td>\\n                <mat-form-field>\\n                    <input matInput formControlName=\\\"nom\\\">\\n                    <mat-error *ngIf=\\\"form.controls['nom'].touched && form.controls['nom'].hasError('required')\\\">\\n                        Nom est <strong>obligatoire</strong>\\n                    </mat-error>\\n                </mat-form-field>\\n            </td>\\n            <td class=\\\"decalage-label\\\">Prenom</td>\\n            <td>\\n                <mat-form-field class=\\\"example-full-width\\\">\\n                    <input matInput formControlName=\\\"prenom\\\">\\n                    <mat-error *ngIf=\\\"form.controls['prenom'].touched && form.controls['prenom'].hasError('required')\\\">\\n                        Prenom est <strong>obligatoire</strong>\\n                    </mat-error>\\n                </mat-form-field>\\n            </td>\\n        </tr>\\n        <td class=\\\"decalage-label\\\">Tel Fixe</td>\\n        <td>\\n            <mat-form-field>\\n                <input type=\\\"tel\\\" matInput formControlName=\\\"telephoneFixe\\\">\\n                <mat-icon matSuffix>phone</mat-icon>\\n            </mat-form-field>\\n            <mat-error\\n                *ngIf=\\\"form.controls['telephoneFixe'].touched && form.controls['telephoneFixe'].hasError('required')\\\">\\n                Tel fixe est <strong>obligatoire</strong>\\n            </mat-error>\\n        </td>\\n        <td class=\\\"decalage-label\\\">Tel Mobile</td>\\n        <td>\\n            <mat-form-field class=\\\"example-full-width\\\">\\n                <input type=\\\"tel\\\" matInput formControlName=\\\"telephone\\\">\\n                <mat-icon matSuffix>phone</mat-icon>\\n            </mat-form-field>\\n            <mat-error *ngIf=\\\"form.controls['telephone'].touched && form.controls['telephone'].hasError('required')\\\">\\n                Tel fixe est <strong>obligatoire</strong>\\n            </mat-error>\\n        </td>\\n        <tr>\\n            <td class=\\\"decalage-label\\\">Email</td>\\n            <td>\\n                <mat-form-field class=\\\"example-full-width\\\">\\n                    <input type=\\\"tel\\\" matInput formControlName=\\\"email\\\">\\n                    <mat-icon matSuffix>email</mat-icon>\\n                </mat-form-field>\\n                <mat-error\\n                    *ngIf=\\\"form.controls['email'].hasError('email') && !form.controls['email'].hasError('required')\\\">\\n                    Please enter a valid email address\\n                </mat-error>\\n                <mat-error *ngIf=\\\"form.controls['email'].touched && form.controls['email'].hasError('required')\\\">\\n                    Email est <strong>obligatoire</strong>\\n                </mat-error>\\n            </td>\\n            <td class=\\\"decalage-label\\\">Lien vers un site web</td>\\n            <td>\\n                <mat-form-field class=\\\"example-full-width\\\">\\n                    <input type=\\\"tel\\\" matInput formControlName=\\\"siteInternet\\\">\\n                    <mat-icon matSuffix>satellite</mat-icon>\\n                </mat-form-field>\\n                <mat-error\\n                    *ngIf=\\\"form.controls['siteInternet'].touched && form.controls['siteInternet'].hasError('required')\\\">\\n                    Site Internet est <strong>obligatoire</strong>\\n                </mat-error>\\n            </td>\\n        </tr>\\n        <tr>\\n            <td class=\\\"decalage-label\\\">Adresse</td>\\n            <td>\\n                <mat-form-field>\\n                    <input matInput placeholder=\\\"Rue...\\\">\\n                </mat-form-field>\\n            </td>\\n\\n\\n            <td class=\\\"decalage-label\\\"> Lien avec le bénéficiaire</td>\\n            <td>\\n                <mat-form-field appearance=\\\"fill\\\">\\n                    <select matNativeControl>\\n                        <option selected></option>\\n                        <option>Conjoint(e)</option>\\n                        <option>Enfant</option>\\n                        <option>Parent</option>\\n                        <option>Autre</option>\\n                    </select>\\n                </mat-form-field>\\n            </td>\\n\\n        </tr>\\n\\n        <tr>\\n            <td class=\\\"decalage-label\\\">Code Postal</td>\\n            <td>\\n                <mat-form-field>\\n                    <input matInput placeholder=\\\"Code Postal\\\">\\n                </mat-form-field>\\n            </td>\\n        </tr>\\n        <tr>\\n            <td class=\\\"decalage-label\\\">Ville</td>\\n            <td>\\n                <mat-form-field>\\n                    <input matInput placeholder=\\\"Ville\\\">\\n                </mat-form-field>\\n            </td>\\n        </tr>\\n\\n        <tr>\\n            <td class=\\\"decalage-label\\\">Pays</td>\\n            <td>\\n                <mat-form-field>\\n                    <input matInput placeholder=\\\"Pays\\\">\\n                </mat-form-field>\\n            </td>\\n        </tr>\\n\\n        <tr>\\n            <td class=\\\"decalage-label\\\">Zone Géographique</td>\\n            <td>\\n                <mat-form-field>\\n                    <input matInput placeholder=\\\"Zone Géographique\\\">\\n                </mat-form-field>\\n            </td>\\n        </tr>\\n\\n        <tr>\\n            <td class=\\\"decalage-label\\\"></td>\\n            <td>\\n                <mat-form-field>\\n                    <input matInput>\\n                </mat-form-field>\\n            </td>\\n        </tr>\\n\\n    </table>\\n\\n    <div style=\\\"padding-top:2em\\\">\\n        <button mat-raised-button color=\\\"primary\\\" (click)=\\\"addBeneficiaires()\\\">Enregistrer</button>\\n        <button mat-button color=\\\"warn\\\">Annuler</button>\\n    </div>\\n</form>\"","export default \"<form [formGroup]=\\\"form\\\" (submit)=\\\"submit()\\\" style=\\\"border: medium;padding-top:2em\\\">\\n    <div>\\n        <mat-card style=\\\"background: azure;\\\">\\n            <h2>Nouveau contact</h2>\\n            <button mat-raised-button color=\\\"primary\\\" (click)=\\\"sauvegarderContact()\\\">Sauvegarder</button>\\n            <button mat-button color=\\\"warn\\\" (click)=\\\"cancel()\\\">Annuler</button>\\n        </mat-card>\\n    </div>\\n\\n    <br>\\n\\n    <mat-radio-group aria-label=\\\"Select a type\\\" [(ngModel)]=\\\"contact.typeContact\\\" formControlName=\\\"typeContact\\\"\\n        (change)=\\\"typeContactChoosed($event)\\\">\\n        <mat-radio-button value=\\\"PARTICULIER\\\">PARTICULIER&nbsp;</mat-radio-button>\\n        <mat-radio-button value=\\\"SOCIETE\\\">SOCIETE</mat-radio-button>\\n    </mat-radio-group>\\n\\n    <mat-card>\\n        <table>\\n            <tr *ngIf=\\\"isParticulier\\\">\\n                <td class=\\\"decalage-label\\\">Civilité</td>\\n                <td>\\n                    <mat-form-field appearance=\\\"fill\\\" style=\\\"width: 13% !important\\\">\\n                        <select matNativeControl formControlName=\\\"civilite\\\" [(ngModel)]=\\\"contact.civilite\\\">\\n                            <option selected></option>\\n                            <option>Mr</option>\\n                            <option>Mme</option>\\n                            <option>Mlle</option>\\n                            <option>S.E.M</option>\\n                        </select>\\n                    </mat-form-field>\\n                    <mat-form-field style=\\\"padding-left: 1em;width: 45% !important\\\">\\n                        <input matInput placeholder=\\\"Nom\\\" [(ngModel)]=\\\"contact.nom\\\" formControlName=\\\"nom\\\">\\n                        <mat-error *ngIf=\\\"form.controls['nom'].touched && form.controls['nom'].hasError('required')\\\">\\n                            Nom est <strong>obligatoire</strong>\\n                        </mat-error>\\n                    </mat-form-field>\\n                </td>\\n                <td class=\\\"decalage-label\\\">Prénom</td>\\n                <td>\\n                    <mat-form-field class=\\\"example-full-width\\\">\\n                        <input matInput [(ngModel)]=\\\"contact.prenom\\\" formControlName=\\\"prenom\\\">\\n                        <mat-error\\n                            *ngIf=\\\"form.controls['prenom'].touched && form.controls['prenom'].hasError('required')\\\">\\n                            Prenom est <strong>obligatoire</strong>\\n                        </mat-error>\\n                    </mat-form-field>\\n                </td>\\n            </tr>\\n\\n            <tr *ngIf=\\\"!isParticulier\\\">\\n                <td class=\\\"decalage-label\\\">Raison Sociale</td>\\n                <td>\\n                    <mat-form-field>\\n                        <input matInput [(ngModel)]=\\\"contact.raisonSociale\\\" formControlName=\\\"raisonSociale\\\">\\n                        <mat-error\\n                            *ngIf=\\\"form.controls['raisonSociale'].touched && form.controls['raisonSociale'].hasError('required')\\\">\\n                            raison sociale est <strong>obligatoire</strong>\\n                        </mat-error>\\n                    </mat-form-field>\\n                </td>\\n                <td class=\\\"decalage-label\\\">Siren</td>\\n                <td>\\n                    <mat-form-field class=\\\"example-full-width\\\">\\n                        <input matInput [(ngModel)]=\\\"contact.siren\\\" formControlName=\\\"siren\\\">\\n                        <mat-error\\n                            *ngIf=\\\"form.controls['siren'].touched && form.controls['siren'].hasError('required')\\\">\\n                            Siren est <strong>obligatoire</strong>\\n                        </mat-error>\\n                    </mat-form-field>\\n                </td>\\n            </tr>\\n\\n            <tr *ngIf=\\\"!isParticulier\\\">\\n                <td class=\\\"decalage-label\\\">Activité Principale</td>\\n                <td>\\n                    <mat-form-field appearance=\\\"fill\\\">\\n                        <select matNativeControl [(ngModel)]=\\\"contact.activitePrincipale\\\"\\n                            formControlName=\\\"activitePrincipale\\\">\\n                            <option value=\\\"\\\" selected></option>\\n                            <option>Agriculture/Agroalimentaire/Environnement</option>\\n                            <option>Associatif/Art/Culture</option>\\n                            <option> Banques/Assurances/Finances</option>\\n                            <option>Commerce/Distribution</option>\\n                            <option>Communication/Publicité/Média</option>\\n                            <option>Conseil/Consulting</option>\\n                        </select>\\n                    </mat-form-field>\\n                </td>\\n\\n                <td class=\\\"decalage-label\\\">Effectif</td>\\n                <td>\\n                    <mat-form-field appearance=\\\"fill\\\">\\n                        <input matInput [(ngModel)]=\\\"contact.tailleEntreprise\\\" formControlName=\\\"tailleEntreprise\\\">\\n                    </mat-form-field>\\n                </td>\\n            </tr>\\n\\n            <tr>\\n                <td *ngIf=\\\"isParticulier\\\" class=\\\"decalage-label\\\">Fonction</td>\\n                <td *ngIf=\\\"isParticulier\\\">\\n                    <mat-form-field appearance=\\\"fill\\\">\\n                        <select matNativeControl formControlName=\\\"fonction\\\" [(ngModel)]=\\\"contact.fonction\\\">\\n                            <option selected></option>\\n                            <option>PDG</option>\\n                            <option>DG</option>\\n                            <option>DG Adjoint</option>\\n                        </select>\\n                    </mat-form-field>\\n                </td>\\n\\n                <td class=\\\"decalage-label\\\">Tél Fixe</td>\\n                <td>\\n                    <mat-form-field class=\\\"example-full-width\\\">\\n                        <input type=\\\"tel\\\" matInput formControlName=\\\"telephoneFixe\\\" [(ngModel)]=\\\"contact.telephoneFixe\\\">\\n                        <mat-icon matSuffix>phone</mat-icon>\\n                    </mat-form-field>\\n                    <mat-error\\n                        *ngIf=\\\"form.controls['telephoneFixe'].touched && form.controls['telephoneFixe'].hasError('required')\\\">\\n                        Tél fixe est <strong>obligatoire</strong>\\n                    </mat-error>\\n                </td>\\n                <td *ngIf=\\\"!isParticulier\\\" class=\\\"decalage-label\\\">Email</td>\\n                <td *ngIf=\\\"!isParticulier\\\">\\n                    <mat-form-field class=\\\"example-full-width\\\">\\n                        <input type=\\\"tel\\\" matInput formControlName=\\\"emailPerso\\\" [(ngModel)]=\\\"contact.emailPerso\\\">\\n                        <mat-icon matSuffix>email</mat-icon>\\n                    </mat-form-field>\\n                    <mat-error\\n                        *ngIf=\\\"form.controls['emailPerso'].hasError('email') && !form.controls['emailPerso'].hasError('required')\\\">\\n                        Please enter a valid email address\\n                    </mat-error>\\n                    <mat-error\\n                        *ngIf=\\\"form.controls['emailPerso'].touched && form.controls['emailPerso'].hasError('required')\\\">\\n                        Email Perso est <strong>obligatoire</strong>\\n                    </mat-error>\\n                </td>\\n                \\n            </tr>\\n\\n            <tr>\\n                <td *ngIf=\\\"!isParticulier\\\" class=\\\"decalage-label\\\">Contact Principal</td>\\n                <td *ngIf=\\\"!isParticulier\\\">\\n                    <mat-form-field>\\n                        <input matInput formControlName=\\\"contactPrincipalNom\\\" [(ngModel)]=\\\"contact.contactPrincipalNom\\\"\\n                            placeholder=\\\"Nom\\\">\\n                    </mat-form-field>\\n                </td>\\n                <td *ngIf=\\\"!isParticulier\\\" class=\\\"decalage-label\\\">Contact Sécondaire</td>\\n                <td *ngIf=\\\"!isParticulier\\\">\\n                    <mat-form-field>\\n                        <input matInput formControlName=\\\"contactSecondaireNom\\\"\\n                            [(ngModel)]=\\\"contact.contactSecondaireNom\\\" placeholder=\\\"Nom\\\">\\n                    </mat-form-field>\\n                </td>\\n            </tr>\\n\\n            <tr>\\n                <td *ngIf=\\\"!isParticulier\\\" class=\\\"decalage-label\\\"></td>\\n                <td *ngIf=\\\"!isParticulier\\\">\\n                    <mat-form-field>\\n                        <input matInput formControlName=\\\"contactPrincipalNom\\\" [(ngModel)]=\\\"contact.contactPrincipalNom\\\"\\n                            placeholder=\\\"Fonction\\\">\\n                    </mat-form-field>\\n                </td>\\n                <td *ngIf=\\\"!isParticulier\\\" class=\\\"decalage-label\\\"></td>\\n                <td *ngIf=\\\"!isParticulier\\\">\\n                    <mat-form-field>\\n                        <input matInput formControlName=\\\"contactSecondaireNom\\\"\\n                            [(ngModel)]=\\\"contact.contactSecondaireNom\\\" placeholder=\\\"Fonction\\\">\\n                    </mat-form-field>\\n                </td>\\n            </tr>\\n\\n            <tr>\\n                <td *ngIf=\\\"!isParticulier\\\" class=\\\"decalage-label\\\"></td>\\n                <td *ngIf=\\\"!isParticulier\\\">\\n                    <mat-form-field style=\\\"padding-left: 1em;\\\">\\n                        <input matInput formControlName=\\\"contactPrincipalTelephoneMobile\\\"\\n                            [(ngModel)]=\\\"contact.contactPrincipalTelephoneMobile\\\" placeholder=\\\"Tél Mobile\\\">\\n                        <mat-icon matSuffix>phone</mat-icon>\\n                    </mat-form-field>\\n                </td>\\n\\n                <td *ngIf=\\\"!isParticulier\\\" class=\\\"decalage-label\\\"></td>\\n                <td *ngIf=\\\"!isParticulier\\\">\\n                    <mat-form-field style=\\\"padding-left: 1em;\\\">\\n                        <input matInput formControlName=\\\"contactSecondaireTelephoneMobile\\\"\\n                            [(ngModel)]=\\\"contact.contactSecondaireTelephoneMobile\\\" placeholder=\\\"Tél Mobile\\\">\\n                        <mat-icon matSuffix>phone</mat-icon>\\n                    </mat-form-field>\\n                </td>\\n                \\n            </tr>\\n\\n            <tr>\\n                <td *ngIf=\\\"!isParticulier\\\" class=\\\"decalage-label\\\"></td>\\n                <td *ngIf=\\\"!isParticulier\\\">\\n                    <mat-form-field style=\\\"padding-left: 1em;\\\">\\n                        <input matInput formControlName=\\\"contactPrincipalTelephoneMobile\\\"\\n                            [(ngModel)]=\\\"contact.contactPrincipalTelephoneMobile\\\" placeholder=\\\"Tél Fixe\\\">\\n                        <mat-icon matSuffix>phone</mat-icon>\\n                    </mat-form-field>\\n                </td>\\n\\n                <td *ngIf=\\\"!isParticulier\\\" class=\\\"decalage-label\\\"></td>\\n                <td *ngIf=\\\"!isParticulier\\\">\\n                    <mat-form-field style=\\\"padding-left: 1em;\\\">\\n                        <input matInput formControlName=\\\"contactSecondaireTelephoneMobile\\\"\\n                            [(ngModel)]=\\\"contact.contactSecondaireTelephoneMobile\\\" placeholder=\\\"Tél Fixe\\\">\\n                        <mat-icon matSuffix>phone</mat-icon>\\n                    </mat-form-field>\\n                </td>\\n            </tr>\\n            <tr>\\n                <td *ngIf=\\\"!isParticulier\\\" class=\\\"decalage-label\\\"></td>\\n                <td *ngIf=\\\"!isParticulier\\\">\\n                    <mat-form-field>\\n                        <input matInput formControlName=\\\"contactPrincipalEmail\\\"\\n                            [(ngModel)]=\\\"contact.contactPrincipalEmail\\\" placeholder=\\\"Email\\\">\\n                        <mat-icon matSuffix>email</mat-icon>\\n\\n                    </mat-form-field>\\n\\n                    <mat-error\\n                        *ngIf=\\\"form.controls['contactPrincipalEmail'].hasError('email') && !form.controls['contactPrincipalEmail'].hasError('required')\\\">\\n                        Please enter a valid email address\\n                    </mat-error>\\n                </td>\\n\\n                <td *ngIf=\\\"!isParticulier\\\" class=\\\"decalage-label\\\"></td>\\n                <td *ngIf=\\\"!isParticulier\\\">\\n                    <mat-form-field>\\n                        <input matInput formControlName=\\\"contactSecondaireEmail\\\"\\n                            [(ngModel)]=\\\"contact.contactSecondaireEmail\\\" placeholder=\\\"Email\\\">\\n                        <mat-icon matSuffix>email</mat-icon>\\n                    </mat-form-field>\\n                    <mat-error\\n                        *ngIf=\\\"form.controls['contactSecondaireEmail'].hasError('email') && !form.controls['contactSecondaireEmail'].hasError('required')\\\">\\n                        Please enter a valid email address\\n                    </mat-error>\\n\\n                </td>\\n            </tr>\\n\\n            <tr *ngIf=\\\"isParticulier\\\">\\n                <td class=\\\"decalage-label\\\">Tél Mobile 1</td>\\n                <td>\\n                    <mat-form-field>\\n                        <input type=\\\"tel\\\" matInput formControlName=\\\"telephoneMobile1\\\"\\n                            [(ngModel)]=\\\"contact.telephoneMobile1\\\">\\n                        <mat-icon matSuffix>phone</mat-icon>\\n                    </mat-form-field>\\n                    <mat-error\\n                        *ngIf=\\\"form.controls['telephoneMobile1'].touched && form.controls['telephoneMobile1'].hasError('required')\\\">\\n                        Tél Mobile 1 est <strong>obligatoire</strong>\\n                    </mat-error>\\n                </td>\\n                <td class=\\\"decalage-label\\\">Tél Mobile 2</td>\\n                <td>\\n                    <mat-form-field class=\\\"example-full-width\\\">\\n                        <input type=\\\"tel\\\" matInput formControlName=\\\"telephoneMobile2\\\"\\n                            [(ngModel)]=\\\"contact.telephoneMobile2\\\">\\n                        <mat-icon matSuffix>phone</mat-icon>\\n                    </mat-form-field>\\n                    <mat-error\\n                        *ngIf=\\\"form.controls['telephoneMobile2'].touched && form.controls['telephoneMobile2'].hasError('required')\\\">\\n                        Tél mobile 2 est <strong>obligatoire</strong>\\n                    </mat-error>\\n                </td>\\n            </tr>\\n\\n            <tr *ngIf=\\\"isParticulier\\\">\\n                <td class=\\\"decalage-label\\\">Email Perso</td>\\n                <td>\\n                    <mat-form-field class=\\\"example-full-width\\\">\\n                        <input type=\\\"tel\\\" matInput formControlName=\\\"emailPerso\\\" [(ngModel)]=\\\"contact.emailPerso\\\">\\n                        <mat-icon matSuffix>email</mat-icon>\\n                    </mat-form-field>\\n                    <mat-error\\n                        *ngIf=\\\"form.controls['emailPerso'].hasError('email') && !form.controls['emailPerso'].hasError('required')\\\">\\n                        Please enter a valid email address\\n                    </mat-error>\\n                    <mat-error\\n                        *ngIf=\\\"form.controls['emailPerso'].touched && form.controls['emailPerso'].hasError('required')\\\">\\n                        Email Perso est <strong>obligatoire</strong>\\n                    </mat-error>\\n                </td>\\n\\n                <td class=\\\"decalage-label\\\">Email Pro</td>\\n                <td>\\n                    <mat-form-field class=\\\"example-full-width\\\">\\n                        <input type=\\\"tel\\\" matInput formControlName=\\\"emailPro\\\" [(ngModel)]=\\\"contact.emailPro\\\">\\n                        <mat-icon matSuffix>email</mat-icon>\\n                    </mat-form-field>\\n                    <mat-error\\n                        *ngIf=\\\"form.controls['emailPro'].hasError('email') && !form.controls['emailPro'].hasError('required')\\\">\\n                        Please enter a valid email address\\n                    </mat-error>\\n                    <mat-error\\n                        *ngIf=\\\"form.controls['emailPro'].touched && form.controls['emailPro'].hasError('required')\\\">\\n                        Email Pro est <strong>obligatoire</strong>\\n                    </mat-error>\\n                </td>\\n            </tr>\\n\\n            <tr *ngIf=\\\"isParticulier\\\">\\n                <td class=\\\"decalage-label\\\">Structure</td>\\n                <td>\\n                    <mat-form-field>\\n                        <input matInput placeholder=\\\"Structure ...\\\" formControlName=\\\"structure\\\"\\n                            [(ngModel)]=\\\"contact.structure\\\">\\n                    </mat-form-field>\\n                </td>\\n\\n                <td class=\\\"decalage-label\\\">Activité</td>\\n                <td>\\n                    <mat-form-field>\\n                        <input matInput placeholder=\\\"Activité ...\\\" formControlName=\\\"activite\\\"\\n                            [(ngModel)]=\\\"contact.activite\\\">\\n                    </mat-form-field>\\n                </td>\\n            </tr>\\n\\n\\n            <tr>\\n                <td *ngIf=\\\"isParticulier\\\" class=\\\"decalage-label\\\">Adresse Perso</td>\\n                <td *ngIf=\\\"isParticulier\\\">\\n                    <mat-form-field>\\n                        <input matInput formControlName=\\\"adressePerso\\\" [(ngModel)]=\\\"contact.adressePerso\\\"\\n                            placeholder=\\\"Rue...\\\">\\n                    </mat-form-field>\\n                </td>\\n                <td *ngIf=\\\"isParticulier\\\" class=\\\"decalage-label\\\">Adresse Pro</td>\\n                <td *ngIf=\\\"!isParticulier\\\" class=\\\"decalage-label\\\">Adresse</td>\\n                <td>\\n                    <mat-form-field>\\n                        <input matInput formControlName=\\\"adressePro\\\" [(ngModel)]=\\\"contact.adressePro\\\"\\n                            placeholder=\\\"Rue...\\\">\\n                    </mat-form-field>\\n                </td>\\n                \\n            </tr>\\n\\n            <tr>\\n                <td *ngIf=\\\"isParticulier\\\" class=\\\"decalage-label\\\">Code Postal</td>\\n                <td *ngIf=\\\"isParticulier\\\">\\n                    <mat-form-field style=\\\"padding-left: 1em;\\\">\\n                        <input matInput formControlName=\\\"adressePersoCodePostal\\\"\\n                            [(ngModel)]=\\\"contact.adressePersoCodePostal\\\" placeholder=\\\"Code Postal\\\">\\n                    </mat-form-field>\\n                </td>\\n\\n                <td class=\\\"decalage-label\\\">Code Postal</td>\\n                <td>\\n                    <mat-form-field style=\\\"padding-left: 1em;\\\">\\n                        <input matInput formControlName=\\\"adresseProCodePostal\\\"\\n                            [(ngModel)]=\\\"contact.adresseProCodePostal\\\" placeholder=\\\"Code Postal\\\">\\n                    </mat-form-field>\\n                </td>\\n\\n            </tr>\\n            <tr>\\n                <td *ngIf=\\\"isParticulier\\\" class=\\\"decalage-label\\\"> Ville</td>\\n                <td *ngIf=\\\"isParticulier\\\">\\n                    <mat-form-field>\\n                        <input matInput formControlName=\\\"adressePersoVille\\\" [(ngModel)]=\\\"contact.adressePersoVille\\\"\\n                            placeholder=\\\"Ville\\\">\\n                    </mat-form-field>\\n\\n                <td class=\\\"decalage-label\\\"> Ville</td>\\n                <td>\\n                    <mat-form-field>\\n                        <input matInput formControlName=\\\"adresseProVille\\\" [(ngModel)]=\\\"contact.adresseProVille\\\"\\n                            placeholder=\\\"Ville\\\">\\n                    </mat-form-field>\\n\\n                </td>\\n            </tr>\\n\\n            <tr>\\n                <td *ngIf=\\\"isParticulier\\\" class=\\\"decalage-label\\\">Pays</td>\\n                <td *ngIf=\\\"isParticulier\\\">\\n                    <mat-form-field>\\n                        <mat-select  >\\n                            <mat-option  *ngFor=\\\"let pays of allPays; let i = index\\\" [value]=\\\"pays\\\">\\n                                {{ pays.nom_fr_fr}}\\n                            </mat-option>\\n                        </mat-select>\\n                    </mat-form-field>\\n\\n                <td class=\\\"decalage-label\\\">Pays</td>\\n                <td>\\n                    <mat-form-field>\\n                        <mat-select  >\\n                            <mat-option [(ngModel)]=\\\"contact.adressePeroPays\\\" *ngFor=\\\"let pays of allPays; let i = index\\\" [value]=\\\"pays\\\">\\n                                {{ pays.nom_fr_fr}}\\n                            </mat-option>\\n                        </mat-select>\\n                    </mat-form-field>\\n\\n                </td>\\n            </tr>\\n\\n            <tr>\\n                <td *ngIf=\\\"isParticulier\\\" class=\\\"decalage-label\\\">Zone géographique</td>\\n                <td *ngIf=\\\"isParticulier\\\">\\n                    <mat-form-field>\\n                        <input matInput formControlName=\\\"adressePersoZoneGeo\\\" [(ngModel)]=\\\"contact.adressePersoZoneGeo\\\"\\n                            placeholder=\\\"Zone géographique\\\">\\n                    </mat-form-field>\\n\\n                <td class=\\\"decalage-label\\\">Zone géographique</td>\\n                <td>\\n                    <mat-form-field>\\n                        <input matInput formControlName=\\\"adresseProZoneGeo\\\" [(ngModel)]=\\\"contact.adresseProZoneGeo\\\"\\n                            placeholder=\\\"Zone géographique\\\">\\n                    </mat-form-field>\\n\\n                </td>\\n            </tr>\\n\\n            <tr>\\n                <td *ngIf=\\\"isParticulier\\\" class=\\\"decalage-label\\\"></td>\\n                <td *ngIf=\\\"isParticulier\\\">\\n                    <mat-form-field>\\n                        <input matInput formControlName=\\\"adressePersoZoneGeoSuite\\\"\\n                            [(ngModel)]=\\\"contact.adressePersoZoneGeoSuite\\\">\\n                    </mat-form-field>\\n                </td>\\n                <td class=\\\"decalage-label\\\"></td>\\n                <td>\\n                    <mat-form-field>\\n                        <input matInput formControlName=\\\"adresseProZoneGeoSuite\\\"\\n                            [(ngModel)]=\\\"contact.adresseProZoneGeoSuite\\\">\\n                    </mat-form-field>\\n\\n                </td>\\n\\n            </tr>\\n            <tr *ngIf=\\\"isParticulier\\\">\\n                <td class=\\\"decalage-label\\\">Date de naissance</td>\\n                <td>\\n                    <mat-form-field appearance=\\\"fill\\\">\\n                        <input matInput [matDatepicker]=\\\"pickernaissance\\\" formControlName=\\\"naissance\\\"\\n                            [(ngModel)]=\\\"contact.naissance\\\">\\n                        <mat-datepicker-toggle matSuffix [for]=\\\"pickernaissance\\\"></mat-datepicker-toggle>\\n                        <mat-datepicker #pickernaissance></mat-datepicker>\\n                    </mat-form-field>\\n                </td>\\n                <td class=\\\"decalage-label\\\">Nationalité</td>\\n                <td>\\n                    <mat-form-field appearance=\\\"fill\\\">\\n                        <input matInput formControlName=\\\"nationalite\\\" [(ngModel)]=\\\"contact.nationalite\\\"\\n                            placeholder=\\\"Nationalité...\\\">\\n                    </mat-form-field>\\n                </td>\\n            </tr>\\n\\n\\n            <tr *ngIf=\\\"isParticulier\\\">\\n                <td class=\\\"decalage-label\\\">Situation familiale</td>\\n                <td>\\n                    <mat-form-field appearance=\\\"fill\\\">\\n                        <select matNativeControl formControlName=\\\"situationFamiliale\\\"\\n                            [(ngModel)]=\\\"contact.situationFamiliale\\\">\\n                            <option selected></option>\\n                            <option>Marié</option>\\n                            <option>PACS</option>\\n                            <option>Celibataire</option>\\n                            <option>Veuf</option>\\n                            <option>Divorcé ou séparé</option>\\n                            <option>Concubin</option>\\n                        </select>\\n                    </mat-form-field>\\n                </td>\\n\\n                <td class=\\\"decalage-label\\\">Etiquette</td>\\n                <td>\\n                    <mat-form-field appearance=\\\"fill\\\">\\n                        <input matInput>\\n                    </mat-form-field>\\n                </td>\\n\\n            </tr>\\n\\n            <tr>\\n                <td class=\\\"decalage-label\\\">Date d'entrée</td>\\n                <td>\\n                    <mat-form-field appearance=\\\"fill\\\">\\n                        <input matInput [matDatepicker]=\\\"pickerDateEntree\\\" formControlName=\\\"debutAbonnement\\\"\\n                            [(ngModel)]=\\\"contact.debutAbonnement\\\">\\n                        <mat-datepicker-toggle matSuffix [for]=\\\"pickerDateEntree\\\"></mat-datepicker-toggle>\\n                        <mat-datepicker #pickerDateEntree></mat-datepicker>\\n                    </mat-form-field>\\n                </td>\\n                <td *ngIf=\\\"!isParticulier\\\" class=\\\"decalage-label\\\">Site Internet</td>\\n                <td *ngIf=\\\"!isParticulier\\\">\\n                    <mat-form-field>\\n                        <input matInput formControlName=\\\"adressePerso\\\" [(ngModel)]=\\\"contact.adressePerso\\\"\\n                            placeholder=\\\"\\\">\\n                    </mat-form-field>\\n                </td>\\n            </tr>\\n            <tr>\\n                <td class=\\\"decalage-label\\\">Abonné</td>\\n                <td>\\n                    <mat-form-field appearance=\\\"fill\\\">\\n                        <select matNativeControl formControlName=\\\"abonne\\\" [(ngModel)]=\\\"contact.abonne\\\">\\n                            <option selected></option>\\n                            <option>Oui</option>\\n                            <option>Non</option>\\n                        </select>\\n                    </mat-form-field>\\n                </td>\\n\\n                <td class=\\\"decalage-label\\\">Assigné à</td>\\n                <td>\\n                    <mat-form-field appearance=\\\"fill\\\">\\n                        <select matNativeControl formControlName=\\\"assigne\\\" [(ngModel)]=\\\"contact.assigne\\\">\\n                            <option value=\\\"\\\" selected></option>\\n                            <option>Germaine</option>\\n                            <option>Alexandra</option>\\n                            <option>Amina</option>\\n                        </select>\\n                    </mat-form-field>\\n                </td>\\n\\n            </tr>\\n\\n            <tr>\\n                <td class=\\\"decalage-label\\\">Début Abonnement</td>\\n                <td>\\n                    <mat-form-field appearance=\\\"fill\\\">\\n                        <input matInput [matDatepicker]=\\\"pickerDebAbonnement\\\" formControlName=\\\"debutAbonnement\\\"\\n                            [(ngModel)]=\\\"contact.debutAbonnement\\\">\\n                        <mat-datepicker-toggle matSuffix [for]=\\\"pickerDebAbonnement\\\"></mat-datepicker-toggle>\\n                        <mat-datepicker #pickerDebAbonnement></mat-datepicker>\\n                    </mat-form-field>\\n                </td>\\n                <td class=\\\"decalage-label\\\">Renouvellement Abonnement</td>\\n                <td>\\n                    <mat-form-field appearance=\\\"fill\\\">\\n                        <input matInput [matDatepicker]=\\\"pickerRenAbonnement\\\" formControlName=\\\"renAbonnement\\\"\\n                            [(ngModel)]=\\\"contact.renAbonnement\\\">\\n                        <mat-datepicker-toggle matSuffix [for]=\\\"pickerRenAbonnement\\\"></mat-datepicker-toggle>\\n                        <mat-datepicker #pickerRenAbonnement></mat-datepicker>\\n                    </mat-form-field>\\n                </td>\\n            </tr>\\n\\n            <tr>\\n                <td class=\\\"decalage-label\\\">Type Abonnement</td>\\n                <td>\\n                    <mat-form-field appearance=\\\"fill\\\">\\n                        <select matNativeControl formControlName=\\\"typeAbonnement\\\" [(ngModel)]=\\\"contact.typeAbonnement\\\">\\n                            <option value=\\\"\\\" selected></option>\\n                            <option value=\\\"Corporate\\\">Corporate</option>\\n                            <option value=\\\"Decouverte\\\">Découverte</option>\\n                            <option value=\\\"Droit d'entrée\\\">Droit d'entrée</option>\\n                            <option value=\\\"Evasion\\\">Evasion</option>\\n                            <option value=\\\"Nomade\\\">Nomade</option>\\n                        </select>\\n                    </mat-form-field>\\n                </td>\\n                <td class=\\\"decalage-label\\\">Source</td>\\n                <td>\\n                    <mat-form-field>\\n                        <input matInput formControlName=\\\"source\\\" [(ngModel)]=\\\"contact.source\\\" placeholder=\\\"source...\\\">\\n                    </mat-form-field>\\n                </td>\\n            </tr>\\n\\n            <tr>\\n                <mat-checkbox>Prospect</mat-checkbox>\\n            </tr>\\n\\n        </table>\\n    </mat-card>\\n\\n    <br>\\n    <div>\\n        <mat-card>\\n            <mat-tab-group>\\n                <mat-tab label=\\\"Beneficiaires\\\">\\n                    <div class=\\\"example-button-row\\\">\\n                        <button mat-button color=\\\"primary\\\" (click)=\\\"openAddBeneficiareDialog()\\\">Ajouter</button>\\n                    </div>\\n                </mat-tab>\\n                <mat-tab label=\\\"Centres d'intérêts\\\">\\n                    <br>\\n                    <table>\\n                        <tr>\\n                            <td class=\\\"decalage-label\\\">Type Restaurant Favori</td>\\n                            <td>\\n                                <mat-form-field appearance=\\\"fill\\\">\\n                                    <mat-select multiple formControlName=\\\"typeRestaurantPrefere\\\">\\n                                        <mat-option>Africain</mat-option>\\n                                        <mat-option>Bresilien</mat-option>\\n                                        <mat-option>Fast food</mat-option>\\n                                        <mat-option>Japonais</mat-option>\\n                                        <mat-option>Indien</mat-option>\\n                                        <mat-option>Français</mat-option>\\n                                        <mat-option>Pas vraiment</mat-option>\\n                                    </mat-select>\\n                                </mat-form-field>\\n                            </td>\\n                        </tr>\\n\\n                        <tr>\\n                            <td class=\\\"decalage-label\\\">Type hebergement Favori</td>\\n                            <td>\\n                                <mat-form-field appearance=\\\"fill\\\">\\n                                    <mat-select multiple formControlName=\\\"typeHebergementPrefere\\\">\\n                                        <mat-option>Camping</mat-option>\\n                                        <mat-option>Hotel 3*</mat-option>\\n                                        <mat-option>Hotel 4*</mat-option>\\n                                        <mat-option>Hotel 5*</mat-option>\\n                                        <mat-option>Palace</mat-option>\\n                                        <mat-option>Appartement saisonnier</mat-option>\\n                                    </mat-select>\\n                                </mat-form-field>\\n                            </td>\\n                        </tr>\\n                    </table>\\n                </mat-tab>\\n\\n                <mat-tab label=\\\"Note\\\">\\n                    <mat-form-field style=\\\"width: 100% !important;\\\">\\n                        <textarea matInput formControlName=\\\"notes\\\" placeholder=\\\"Ajouter Note...\\\"></textarea>\\n                    </mat-form-field>\\n                </mat-tab>\\n\\n                <mat-tab label=\\\"Descriptif\\\">\\n                    \\n                </mat-tab>\\n\\n            </mat-tab-group>\\n        </mat-card>\\n    </div>\\n</form>\"","export default \"<div>\\n    <mat-card style=\\\"background: azure;\\\">\\n        <h2>Contact</h2>\\n        <button mat-raised-button color=\\\"primary\\\" (click)=\\\"updateContact()\\\">MODIFIER</button>\\n        <button mat-button color=\\\"warn\\\" (click)=\\\"cancel()\\\">Annuler</button>\\n    </mat-card>\\n</div>\\n\\n<br>\\n\\n<p>{{contact?.prenom}} - {{contact?.nom}}</p>\\n\\n<mat-radio-group *ngIf=\\\"contact\\\" aria-label=\\\"Select a type\\\" [(ngModel)]=\\\"contact.typeContact\\\" disabled>\\n    <mat-radio-button value=\\\"PARTICULIER\\\">PARTICULIER</mat-radio-button>\\n    <mat-radio-button value=\\\"SOCIETE\\\">SOCIETE</mat-radio-button>\\n</mat-radio-group>\\n<mat-card>\\n\\n    <table *ngIf=\\\"contact\\\">\\n\\n        <tr *ngIf=\\\"isParticulier\\\">\\n            <td class=\\\"decalage-label\\\">Civilité</td>\\n            <td>\\n                <mat-form-field appearance=\\\"none\\\" style=\\\"width: 13% !important\\\">\\n                    <input matInput [(ngModel)]=\\\"contact.civilite\\\" readonly>\\n                </mat-form-field>\\n                <mat-form-field appearance=\\\"none\\\" style=\\\"padding-left: 1em;width: 45% !important\\\">\\n                    <input matInput placeholder=\\\"Nom\\\" [(ngModel)]=\\\"contact.nom\\\">\\n                </mat-form-field>\\n            </td>\\n            <td class=\\\"decalage-label\\\">Prénom</td>\\n            <td>\\n                <mat-form-field appearance=\\\"none\\\">\\n                    <input matInput [(ngModel)]=\\\"contact.prenom\\\" >\\n                </mat-form-field>\\n            </td>\\n        </tr>\\n\\n        <tr *ngIf=\\\"!isParticulier\\\">\\n            <td class=\\\"decalage-label\\\">Raison Sociale</td>\\n            <td>\\n                <mat-form-field appearance=\\\"none\\\">\\n                    <input matInput [(ngModel)]=\\\"contact.raisonSociale\\\" readonly>\\n                </mat-form-field>\\n            </td>\\n            <td class=\\\"decalage-label\\\">Siren</td>\\n            <td>\\n                <mat-form-field appearance=\\\"none\\\">\\n                    <input matInput [(ngModel)]=\\\"contact.siren\\\" readonly>\\n                </mat-form-field>\\n            </td>\\n        </tr>\\n\\n        <tr *ngIf=\\\"!isParticulier\\\">\\n            <td class=\\\"decalage-label\\\">Activité Principale</td>\\n            <td>\\n                <mat-form-field appearance=\\\"none\\\">\\n                    <input matInput [(ngModel)]=\\\"contact.activitePrincipale\\\" readonly>\\n                </mat-form-field>\\n            </td>\\n\\n            <td class=\\\"decalage-label\\\">Effectif</td>\\n            <td>\\n                <mat-form-field appearance=\\\"none\\\">\\n                    <input matInput [(ngModel)]=\\\"contact.tailleEntreprise\\\" readonly>\\n                </mat-form-field>\\n            </td>\\n        </tr>\\n\\n        <tr>\\n            <td *ngIf=\\\"isParticulier\\\" class=\\\"decalage-label\\\">Fonction</td>\\n            <td *ngIf=\\\"isParticulier\\\">\\n                <mat-form-field appearance=\\\"none\\\">\\n                    <input matInput [(ngModel)]=\\\"contact.fonction\\\" readonly>\\n                </mat-form-field>\\n            </td>\\n\\n            <td class=\\\"decalage-label\\\">Tél Fixe</td>\\n            <td>\\n                <mat-form-field appearance=\\\"none\\\">\\n                    <input type=\\\"tel\\\" matInput  [(ngModel)]=\\\"contact.telephoneFixe\\\" readonly>\\n                    <mat-icon matSuffix>phone</mat-icon>\\n                </mat-form-field>\\n            </td>\\n            <td *ngIf=\\\"!isParticulier\\\" class=\\\"decalage-label\\\">Contact Principal</td>\\n            <td *ngIf=\\\"!isParticulier\\\">\\n                <mat-form-field appearance=\\\"none\\\">\\n                    <input matInput [(ngModel)]=\\\"contact.contactPrincipalNom\\\" readonly>\\n                </mat-form-field>\\n            </td>\\n        </tr>\\n\\n        <tr *ngIf=\\\"isParticulier\\\">\\n            <td class=\\\"decalage-label\\\">Tél Mobile 1</td>\\n            <td>\\n                <mat-form-field appearance=\\\"none\\\">\\n                    <input type=\\\"tel\\\" matInput [(ngModel)]=\\\"contact.telephoneMobile1\\\" readonly>\\n                    <mat-icon matSuffix>phone</mat-icon>\\n                </mat-form-field>\\n            </td>\\n            <td class=\\\"decalage-label\\\">Tél Mobile 2</td>\\n            <td>\\n                <mat-form-field appearance=\\\"none\\\">\\n                    <input type=\\\"tel\\\" matInput [(ngModel)]=\\\"contact.telephoneMobile2\\\" readonly>\\n                    <mat-icon matSuffix>phone</mat-icon>\\n                </mat-form-field>\\n            </td>\\n        </tr>\\n\\n        <tr *ngIf=\\\"isParticulier\\\">\\n            <td class=\\\"decalage-label\\\">Email Perso</td>\\n            <td>\\n                <mat-form-field appearance=\\\"none\\\">\\n                    <input type=\\\"tel\\\" matInput [(ngModel)]=\\\"contact.emailPerso\\\" readonly>\\n                    <mat-icon matSuffix>email</mat-icon>\\n                </mat-form-field>\\n            </td>\\n\\n            <td class=\\\"decalage-label\\\">Email Pro</td>\\n            <td>\\n                <mat-form-field appearance=\\\"none\\\">\\n                    <input type=\\\"tel\\\" matInput  [(ngModel)]=\\\"contact.emailPro\\\" readonly>\\n                    <mat-icon matSuffix>email</mat-icon>\\n                </mat-form-field>\\n                \\n            </td>\\n        </tr>\\n\\n        <tr *ngIf=\\\"isParticulier\\\">\\n            <td class=\\\"decalage-label\\\">Structure</td>\\n            <td>\\n                <mat-form-field appearance=\\\"none\\\">\\n                    <input matInput [(ngModel)]=\\\"contact.structure\\\" readonly>\\n                </mat-form-field>\\n            </td>\\n\\n            <td class=\\\"decalage-label\\\">Activité</td>\\n            <td>\\n                <mat-form-field appearance=\\\"none\\\">\\n                    <input matInput [(ngModel)]=\\\"contact.activite\\\" readonly>\\n                </mat-form-field>\\n            </td>\\n        </tr>\\n\\n\\n        <tr>\\n            <td *ngIf=\\\"isParticulier\\\" class=\\\"decalage-label\\\">Adresse Perso</td>\\n            <td *ngIf=\\\"isParticulier\\\">\\n                <mat-form-field appearance=\\\"none\\\">\\n                    <input matInput [(ngModel)]=\\\"contact.adressePerso\\\" readonly>\\n                </mat-form-field>\\n            </td>\\n            <td class=\\\"decalage-label\\\">Adresse Pro</td>\\n            <td>\\n                <mat-form-field appearance=\\\"none\\\">\\n                    <input matInput [(ngModel)]=\\\"contact.adressePro\\\" readonly>\\n                </mat-form-field>\\n            </td>\\n\\n            <td *ngIf=\\\"!isParticulier\\\" class=\\\"decalage-label\\\"></td>\\n            <td *ngIf=\\\"!isParticulier\\\">\\n                <mat-form-field appearance=\\\"none\\\" style=\\\"padding-left: 1em;\\\">\\n                    <input matInput [(ngModel)]=\\\"contact.contactPrincipalTelephoneMobile\\\" readonly>\\n                    <mat-icon matSuffix>phone</mat-icon>\\n                </mat-form-field>\\n            </td>\\n        </tr>\\n\\n        <tr>\\n            <td *ngIf=\\\"isParticulier\\\" class=\\\"decalage-label\\\">Code Postal</td>\\n            <td *ngIf=\\\"isParticulier\\\">\\n                <mat-form-field appearance=\\\"none\\\" style=\\\"padding-left: 1em;\\\">\\n                    <input matInput [(ngModel)]=\\\"contact.adressePersoCodePostal\\\" readonly>\\n                </mat-form-field>\\n            </td>\\n\\n            <td class=\\\"decalage-label\\\">Code Postal</td>\\n            <td>\\n                <mat-form-field appearance=\\\"none\\\" style=\\\"padding-left: 1em;\\\">\\n                    <input matInput  [(ngModel)]=\\\"contact.adresseProCodePostal\\\" readonly>\\n                </mat-form-field>\\n            </td>\\n\\n            <td *ngIf=\\\"!isParticulier\\\" class=\\\"decalage-label\\\"></td>\\n            <td *ngIf=\\\"!isParticulier\\\">\\n                <mat-form-field appearance=\\\"none\\\">\\n                    <input matInput  [(ngModel)]=\\\"contact.contactPrincipalEmail\\\" readonly>\\n                    <mat-icon matSuffix>email</mat-icon>\\n                </mat-form-field>\\n            </td>\\n        </tr>\\n        <tr>\\n            <td *ngIf=\\\"isParticulier\\\" class=\\\"decalage-label\\\">Ville</td>\\n            <td *ngIf=\\\"isParticulier\\\">\\n                <mat-form-field appearance=\\\"none\\\">\\n                    <input matInput [(ngModel)]=\\\"contact.adressePersoVille\\\" readonly>\\n                </mat-form-field>\\n\\n            <td class=\\\"decalage-label\\\"> Ville</td>\\n            <td>\\n                <mat-form-field appearance=\\\"none\\\">\\n                    <input matInput  [(ngModel)]=\\\"contact.adresseProVille\\\" readonly>\\n                </mat-form-field>\\n\\n            </td>\\n\\n            <td *ngIf=\\\"!isParticulier\\\" class=\\\"decalage-label\\\">Contact Sécondaire</td>\\n            <td *ngIf=\\\"!isParticulier\\\">\\n                <mat-form-field appearance=\\\"none\\\">\\n                    <input matInput [(ngModel)]=\\\"contact.contactSecondaireNom\\\" readonly>\\n                </mat-form-field>\\n            </td>\\n\\n        </tr>\\n\\n        <tr>\\n            <td *ngIf=\\\"isParticulier\\\" class=\\\"decalage-label\\\">Pays</td>\\n            <td *ngIf=\\\"isParticulier\\\">\\n                <mat-form-field appearance=\\\"none\\\">\\n                    <input matInput [(ngModel)]=\\\"contact.adressePersoPays\\\" readonly>\\n                </mat-form-field>\\n\\n            <td class=\\\"decalage-label\\\">Pays</td>\\n            <td>\\n                <mat-form-field appearance=\\\"none\\\">\\n                    <input matInput  [(ngModel)]=\\\"contact.adresseProPays\\\" readonly>\\n                </mat-form-field>\\n\\n            </td>\\n            <td *ngIf=\\\"!isParticulier\\\" class=\\\"decalage-label\\\"></td>\\n            <td *ngIf=\\\"!isParticulier\\\">\\n                <mat-form-field appearance=\\\"none\\\" style=\\\"padding-left: 1em;\\\">\\n                    <input matInput  [(ngModel)]=\\\"contact.contactSecondaireTelephoneMobile\\\" readonly>\\n                    <mat-icon matSuffix>phone</mat-icon>\\n                </mat-form-field>\\n            </td>\\n        </tr>\\n\\n        <tr>\\n            <td *ngIf=\\\"isParticulier\\\" class=\\\"decalage-label\\\">Zone géographique</td>\\n            <td *ngIf=\\\"isParticulier\\\">\\n                <mat-form-field appearance=\\\"none\\\">\\n                    <input matInput [(ngModel)]=\\\"contact.adressePersoZoneGeo\\\" readonly>\\n                </mat-form-field>\\n\\n            <td class=\\\"decalage-label\\\">Zone géographique</td>\\n            <td>\\n                <mat-form-field appearance=\\\"none\\\">\\n                    <input matInput [(ngModel)]=\\\"contact.adresseProZoneGeo\\\" readonly>\\n                </mat-form-field>\\n\\n            </td>\\n\\n            <td *ngIf=\\\"!isParticulier\\\" class=\\\"decalage-label\\\"></td>\\n            <td *ngIf=\\\"!isParticulier\\\">\\n                <mat-form-field appearance=\\\"none\\\">\\n                    <input matInput [(ngModel)]=\\\"contact.contactSecondaireEmail\\\" readonly>\\n                    <mat-icon matSuffix>email</mat-icon>\\n                </mat-form-field>\\n            </td>\\n        </tr>\\n\\n        <tr>\\n            <td *ngIf=\\\"isParticulier\\\" class=\\\"decalage-label\\\"></td>\\n            <td *ngIf=\\\"isParticulier\\\">\\n                <mat-form-field appearance=\\\"none\\\">\\n                    <input matInput [(ngModel)]=\\\"contact.adressePersoZoneGeoSuite\\\" readonly>\\n                </mat-form-field>\\n            </td>\\n            <td class=\\\"decalage-label\\\"></td>\\n            <td>\\n                <mat-form-field appearance=\\\"none\\\">\\n                    <input matInput  [(ngModel)]=\\\"contact.adresseProZoneGeoSuite\\\" readonly>\\n                </mat-form-field>\\n            </td>\\n\\n        </tr>\\n        <tr *ngIf=\\\"isParticulier\\\">\\n            <td class=\\\"decalage-label\\\">Date de naissance</td>\\n            <td>\\n                <mat-form-field appearance=\\\"none\\\">\\n                    <input matInput [(ngModel)]=\\\"contact.naissance\\\" readonly>\\n                </mat-form-field>\\n            </td>\\n            <td class=\\\"decalage-label\\\">Nationalité</td>\\n            <td>\\n                <mat-form-field appearance=\\\"none\\\">\\n                    <input matInput [(ngModel)]=\\\"contact.nationalite\\\" readonly>\\n                </mat-form-field>\\n            </td>\\n        </tr>\\n\\n\\n        <tr *ngIf=\\\"isParticulier\\\">\\n            <td class=\\\"decalage-label\\\">Situation familiale</td>\\n            <td>\\n                <mat-form-field appearance=\\\"none\\\">\\n                    <input matInput [(ngModel)]=\\\"contact.situationFamiliale\\\" readonly> \\n                </mat-form-field>\\n            </td>\\n        </tr>\\n\\n        <tr>\\n            <td class=\\\"decalage-label\\\">Abonné</td>\\n            <td>\\n                <mat-form-field appearance=\\\"none\\\">\\n                    <input matInput [(ngModel)]=\\\"contact.abonne\\\" readonly> \\n                </mat-form-field>\\n            </td>\\n\\n            <td class=\\\"decalage-label\\\">Assigné à</td>\\n            <td>\\n                <mat-form-field appearance=\\\"none\\\">\\n                    <input matInput [(ngModel)]=\\\"contact.assigne\\\" readonly>\\n                </mat-form-field>\\n            </td>\\n\\n        </tr>\\n\\n        <tr>\\n            <td class=\\\"decalage-label\\\">Début Abonnement</td>\\n            <td>\\n                <mat-form-field appearance=\\\"none\\\">\\n                    <input matInput [(ngModel)]=\\\"contact.debutAbonnement\\\" readonly>\\n                </mat-form-field>\\n            </td>\\n            <td class=\\\"decalage-label\\\">Renouvellement Abonnement</td>\\n            <td>\\n                <mat-form-field appearance=\\\"none\\\">\\n                    <input matInput [(ngModel)]=\\\"contact.renAbonnement\\\" readonly>\\n                </mat-form-field>\\n            </td>\\n        </tr>\\n\\n        <tr>\\n            <td class=\\\"decalage-label\\\">Type Abonnement</td>\\n            <td>\\n                <mat-form-field appearance=\\\"none\\\">\\n                    <input matInput [(ngModel)]=\\\"contact.typeAbonnement\\\" readonly>\\n                </mat-form-field>\\n            </td>\\n            <td class=\\\"decalage-label\\\">Source</td>\\n            <td>\\n                <mat-form-field appearance=\\\"none\\\">\\n                    <input matInput [(ngModel)]=\\\"contact.source\\\" readonly>\\n                </mat-form-field>\\n            </td>\\n        </tr>\\n\\n        <tr>\\n            <mat-checkbox disabled>Prospect</mat-checkbox>\\n        </tr>\\n\\n\\n\\n    </table>\\n</mat-card>\\n\\n\\n<mat-card *ngIf=\\\"contact\\\">\\n    <mat-tab-group>\\n        <mat-tab label=\\\"Beneficiaires\\\">\\n\\n        </mat-tab>\\n        <mat-tab label=\\\"Favoris\\\">\\n            <table>\\n                <tr>\\n                    <td class=\\\"decalage-label\\\">Type Restaurant Favori</td>\\n                    <td>\\n                        <mat-form-field appearance=\\\"none\\\">\\n                            <input matInput [(ngModel)]=\\\"contact.typeRestaurantPrefere\\\" readonly>\\n                        </mat-form-field>\\n                    </td>\\n                </tr>\\n\\n                <tr>\\n                    <td class=\\\"decalage-label\\\">Type hebergement Favori</td>\\n                    <td>\\n                        <mat-form-field appearance=\\\"none\\\">\\n                            <input matInput [(ngModel)]=\\\"contact.typeHebergementPrefere\\\" readonly>\\n                        </mat-form-field>\\n                    </td>\\n                </tr>\\n            </table>\\n\\n        </mat-tab>\\n        <mat-tab label=\\\"Note\\\">\\n            <mat-form-field appearance=\\\"none\\\">\\n                <input matInput [(ngModel)]=\\\"contact.notes\\\" placeholder=\\\"Ajouter notes...\\\" readonly>\\n            </mat-form-field>\\n        </mat-tab>\\n    </mat-tab-group>\\n</mat-card>\"","export default \"<div style=\\\"padding-bottom: 2em;\\\">\\n    <mat-card style=\\\"background: azure;\\\">\\n        <p>Contacts</p>\\n        <button mat-raised-button color=\\\"primary\\\">\\n            <a routerLink=\\\"/contact\\\">CREER</a>\\n        </button>\\n    </mat-card>\\n</div>\\n\\n<mat-card style=\\\"background: azure;\\\">\\n    <table class=\\\"table table-bordered table-hover\\\">\\n         <thead>\\n            <tr>\\n                <th>ID</th>\\n                <th>Nom</th>\\n                <th>Prenom</th>\\n                <th>E-mail</th>\\n                <th>Telephone Fixe</th>\\n                <th>Telephone</th>\\n                <th>adresse</th>\\n            </tr>\\n        </thead>\\n        <tbody>\\n            <tr *ngFor=\\\"let contact of contacts; let i = index\\\" (click)=\\\"ClickedRow(i,contact.id)\\\"\\n                [class.active]=\\\"i == HighlightRow\\\">\\n                <td>{{contact.id}}</td>\\n                <td>{{contact.nom}}</td>\\n                <td>{{contact.prenom}}</td>\\n                <td>{{contact.email}}</td>\\n                <td>{{contact.telephoneFixe}}</td>\\n                <td>{{contact.telephoneMobile}}</td>\\n                <td>{{contact.adresseRue1}}</td>\\n            </tr>\\n        </tbody>\\n    </table>\\n</mat-card>\"","export default \"<mat-card style=\\\"background: azure;\\\">\\n    <nav class=\\\"navbar navbar-expand navbar-light bg-light\\\">\\n        <!--a href=\\\"#\\\" class=\\\"navbar-brand\\\">Peniel CRM</a-->\\n        <ul class=\\\"navbar-nav mr-auto\\\" routerLinkActive=\\\"active\\\">\\n            <li class=\\\"nav-item\\\">\\n                <button mat-icon-button [matMenuTriggerFor]=\\\"menu\\\" aria-label=\\\"Example icon-button with a menu\\\">\\n                    <mat-icon>menu</mat-icon>\\n                  </button>\\n                  <mat-menu #menu=\\\"matMenu\\\">\\n                    <button mat-menu-item>\\n                      <mat-icon>dialpad</mat-icon>\\n                      <span><a routerLink=\\\"/m-contacts\\\">Contacts</a></span>\\n                    </button>\\n\\n                    <button mat-menu-item>\\n                        <mat-icon>dialpad</mat-icon>\\n                        <span>Prestataires</span>\\n                    </button>\\n\\n                    <button mat-menu-item>\\n                      <mat-icon>work</mat-icon>\\n                      <span>Taches</span>\\n                    </button>\\n                    <button mat-menu-item>\\n                      <mat-icon>notifications</mat-icon>\\n                      <span>notifications</span>\\n                    </button>\\n                    <button mat-menu-item>\\n                        <span>Comptabilité</span>\\n                    </button>\\n                    <button mat-menu-item>\\n                        <mat-icon>person</mat-icon>\\n                        <span>Mon compte</span>\\n                      </button>\\n                      <button mat-menu-item>\\n                        <span>Newsletter</span>\\n                      </button>\\n                      <button mat-menu-item>\\n                        <span>Evénements</span>\\n                      </button>\\n                      <button mat-menu-item>\\n                        <span>Documents</span>\\n                      </button>\\n                  </mat-menu>\\n            </li>\\n            <li class=\\\"nav-item\\\">\\n                <a href=\\\"/home\\\" class=\\\"nav-link\\\" routerLink=\\\"home\\\">Home </a>\\n            </li>\\n            <li class=\\\"nav-item\\\" *ngIf=\\\"showAdminBoard\\\">\\n                <a href=\\\"/admin\\\" class=\\\"nav-link\\\" routerLink=\\\"admin\\\">Admin Board</a>\\n            </li>\\n            <li class=\\\"nav-item\\\" *ngIf=\\\"showModeratorBoard\\\">\\n                <a href=\\\"/mod\\\" class=\\\"nav-link\\\" routerLink=\\\"mod\\\">Moderator Board</a>\\n            </li>\\n            <li class=\\\"nav-item\\\">\\n                <a href=\\\"/user\\\" class=\\\"nav-link\\\" *ngIf=\\\"isLoggedIn\\\" routerLink=\\\"user\\\">User</a>\\n            </li>\\n        </ul>\\n    \\n        <ul class=\\\"navbar-nav ml-auto\\\" *ngIf=\\\"!isLoggedIn\\\">\\n            <li class=\\\"nav-item\\\">\\n                <a href=\\\"/register\\\" class=\\\"nav-link\\\" routerLink=\\\"register\\\">Sign Up</a>\\n            </li>\\n            <li class=\\\"nav-item\\\">\\n                <a href=\\\"/login\\\" class=\\\"nav-link\\\" routerLink=\\\"login\\\">Login</a>\\n            </li>\\n        </ul>\\n    \\n        <ul class=\\\"navbar-nav ml-auto\\\" *ngIf=\\\"isLoggedIn\\\">\\n            <li class=\\\"nav-item\\\">\\n                <a href=\\\"/profile\\\" class=\\\"nav-link\\\" routerLink=\\\"profile\\\">{{ username }}</a>\\n            </li>\\n            <li class=\\\"nav-item\\\">\\n                <a href class=\\\"nav-link\\\" (click)=\\\"logout()\\\">LogOut</a>\\n            </li>\\n        </ul>\\n    </nav>\\n</mat-card>\"","export default \"<div class=\\\"container\\\">\\n  <header class=\\\"jumbotron\\\">\\n    <p>{{ content }}</p>\\n  </header>\\n</div>\\n\"","export default \"<div class=\\\"col-md-12\\\">\\n  <div class=\\\"card card-container\\\">\\n    <img id=\\\"profile-img\\\" src=\\\"//ssl.gstatic.com/accounts/ui/avatar_2x.png\\\" class=\\\"profile-img-card\\\" />\\n    \\n    <form *ngIf=\\\"!isLoggedIn\\\" name=\\\"form\\\" (ngSubmit)=\\\"f.form.valid && onSubmit()\\\" #f=\\\"ngForm\\\" novalidate>\\n      <div class=\\\"form-group\\\">\\n        <label for=\\\"username\\\">Username</label>\\n        <input type=\\\"text\\\" class=\\\"form-control\\\" name=\\\"username\\\" [(ngModel)]=\\\"form.username\\\" required\\n          #username=\\\"ngModel\\\" />\\n        <div class=\\\"alert alert-danger\\\" role=\\\"alert\\\" *ngIf=\\\"f.submitted && username.invalid\\\">\\n          Username is required!\\n        </div>\\n      </div>\\n      <div class=\\\"form-group\\\">\\n        <label for=\\\"password\\\">Password</label>\\n        <input type=\\\"password\\\" class=\\\"form-control\\\" name=\\\"password\\\" [(ngModel)]=\\\"form.password\\\" required minlength=\\\"6\\\"\\n          #password=\\\"ngModel\\\" />\\n        <div class=\\\"alert alert-danger\\\" role=\\\"alert\\\" *ngIf=\\\"f.submitted && password.invalid\\\">\\n          <div *ngIf=\\\"password.errors.required\\\">Password is required</div>\\n          <div *ngIf=\\\"password.errors.minlength\\\">\\n            Password must be at least 6 characters\\n          </div>\\n        </div>\\n      </div>\\n      <div class=\\\"form-group\\\">\\n        <button class=\\\"btn btn-primary btn-block\\\">\\n          Login\\n        </button>\\n      </div>\\n      <div class=\\\"form-group\\\">\\n        <div class=\\\"alert alert-danger\\\" role=\\\"alert\\\" *ngIf=\\\"f.submitted && isLoginFailed\\\">\\n          Login failed: {{ errorMessage }}\\n        </div>\\n      </div>\\n    </form>\\n\\n    <div class=\\\"alert alert-success\\\" *ngIf=\\\"isLoggedIn\\\">\\n      Logged in as {{ roles }}.\\n    </div>\\n  </div>\\n</div>\"","export default \"<!--div id=\\\"accordion\\\" class=\\\"menu\\\">\\n    <div class=\\\"card\\\">\\n        <div class=\\\"card-header\\\" id=\\\"headingContact\\\">\\n            <h5 class=\\\"mb-0\\\">\\n                <button (click)=\\\"closeAllCollapsedWithout('contact')\\\" class=\\\"btn btn-link collapsed\\\"\\n                    data-toggle=\\\"collapse\\\" data-target=\\\"#collapseContact\\\" aria-expanded=\\\"false\\\"\\n                    aria-controls=\\\"collapseContact\\\">\\n                    <i class=\\\"fa fa-plus\\\" ></i><a routerLink=\\\"/m-contacts\\\">Contact</a>\\n                </button>\\n            </h5>\\n        </div>\\n        <div *ngIf=\\\"menus.contact\\\">\\n            <div id=\\\"collapseContact\\\" class=\\\"collapse\\\" aria-labelledby=\\\"headingContact\\\" data-parent=\\\"#accordion\\\">\\n                <div class=\\\"card-body\\\">\\n                    <i class=\\\"fa fa-user-plus\\\"></i><a>Nouveau</a>\\n                </div>\\n            </div>\\n            <div id=\\\"collapseContact\\\" class=\\\"collapse\\\" aria-labelledby=\\\"headingContact\\\" data-parent=\\\"#accordion\\\">\\n                <div class=\\\"card-body\\\">\\n                    <i class=\\\"fa fa-folder\\\"></i><a routerLink=\\\"/folderform\\\">Dossier</a>\\n                </div>\\n            </div>\\n            <div id=\\\"collapseContact\\\" class=\\\"collapse\\\" aria-labelledby=\\\"headingContact\\\" data-parent=\\\"#accordion\\\">\\n                <div class=\\\"card-body\\\">\\n                    <i class=\\\"fa fa-fax\\\"></i><a routerLink=\\\"/income\\\">Facture</a>\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n    <div class=\\\"card\\\">\\n        <div class=\\\"card-header\\\" id=\\\"headingMesTaches\\\">\\n            <h5 class=\\\"mb-0\\\">\\n                <button (click)=\\\"closeAllCollapsedWithout('mesTaches')\\\" class=\\\"btn btn-link collapsed\\\"\\n                    data-toggle=\\\"collapse\\\" data-target=\\\"#collapseMesTaches\\\" aria-expanded=\\\"false\\\"\\n                    aria-controls=\\\"collapseMesTaches\\\">\\n                    <i class=\\\"fa fa-tasks\\\"></i><a routerLink=\\\"/tasks\\\">Mes Tâches</a>\\n                </button>\\n            </h5>\\n        </div>\\n    </div>\\n\\n    <div class=\\\"card\\\">\\n        <div class=\\\"card-header\\\" id=\\\"headingMesNotifications\\\">\\n            <h5 class=\\\"mb-0\\\">\\n                <button (click)=\\\"closeAllCollapsedWithout('mesNotifications')\\\" class=\\\"btn btn-link collapsed\\\"\\n                    data-toggle=\\\"collapse\\\" data-target=\\\"#collapseMesNotifications\\\" aria-expanded=\\\"false\\\"\\n                    aria-controls=\\\"collapseMesNotifications\\\">\\n                    <i class=\\\"fa fa-envelope-o\\\"></i><a routerLink=\\\"/Notifications\\\">Mes Notifications</a>\\n                </button>\\n            </h5>\\n        </div>\\n    </div>\\n\\n    <div class=\\\"card\\\">\\n        <div class=\\\"card-header\\\" id=\\\"headingComptabilite\\\">\\n            <h5 class=\\\"mb-0\\\">\\n                <button (click)=\\\"closeAllCollapsedWithout('comptabilite')\\\" class=\\\"btn btn-link collapsed\\\"\\n                    data-toggle=\\\"collapse\\\" data-target=\\\"#collapseComptabilite\\\" aria-expanded=\\\"false\\\"\\n                    aria-controls=\\\"collapseComptabilite\\\">\\n                    <i class=\\\"fa fa-balance-scale\\\"> </i><a>Comptabilité</a>\\n                </button>\\n            </h5>\\n        </div>\\n    </div>\\n\\n\\n    <div class=\\\"card\\\">\\n        <div class=\\\"card-header\\\" id=\\\"headingMonCompte\\\">\\n            <h5 class=\\\"mb-0\\\">\\n                <button (click)=\\\"closeAllCollapsedWithout('monCompte')\\\" class=\\\"btn btn-link collapsed\\\"\\n                    data-toggle=\\\"collapse\\\" data-target=\\\"#collapseMonCompte\\\" aria-expanded=\\\"false\\\"\\n                    aria-controls=\\\"collapseMonCompte\\\">\\n                    Mon compte\\n                </button>\\n            </h5>\\n        </div>\\n        <div *ngIf=\\\"menus.monCompte\\\">\\n            <div id=\\\"collapseMonCompte\\\" class=\\\"collapse\\\" aria-labelledby=\\\"headingMonCompte\\\" data-parent=\\\"#accordion\\\">\\n                <div class=\\\"card-body\\\">\\n                    <i class=\\\"fa fa-user\\\"></i><a routerLink=\\\"/personalInfo\\\">Infos personnelles</a>\\n                </div>\\n            </div>\\n            <div id=\\\"collapseMonCompte\\\" class=\\\"collapse\\\" aria-labelledby=\\\"headingMonCompte\\\" data-parent=\\\"#accordion\\\">\\n                <div class=\\\"card-body\\\">\\n                    <a routerLink=\\\"/mdp\\\">Mot de passe</a>\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n</div-->\\n\\n    <!--div class=\\\"card\\\" *ngIf=\\\"authService.admin\\\">\\n        <div class=\\\"card-header\\\" id=\\\"headingAdmin\\\">\\n            <h5 class=\\\"mb-0\\\">\\n                <button (click)=\\\"closeAllCollapsedWithout('admin')\\\" class=\\\"btn btn-link\\\" data-toggle=\\\"collapse\\\"\\n                    data-target=\\\"#collapseAdmin\\\" aria-expanded=\\\"false\\\" aria-controls=\\\"collapseAdmin\\\">\\n                    <i class=\\\"fa fa-home\\\"></i><a routerLink=\\\"/admin\\\">Administration</a>\\n                </button>\\n            </h5>\\n        </div>\\n    </div-->\"","export default \"<div class=\\\"container\\\" *ngIf=\\\"currentUser; else loggedOut\\\">\\n  <header class=\\\"jumbotron\\\">\\n    <h3>\\n      <strong>{{ currentUser.username }}</strong> Profile\\n    </h3>\\n  </header>\\n  <p>\\n    <strong>Token:</strong>\\n    {{ currentUser.accessToken.substring(0, 20) }} ...\\n    {{ currentUser.accessToken.substr(currentUser.accessToken.length - 20) }}\\n  </p>\\n  <p>\\n    <strong>Email:</strong>\\n    {{ currentUser.email }}\\n  </p>\\n  <strong>Roles:</strong>\\n  <ul>\\n    <li *ngFor=\\\"let role of currentUser.roles\\\">\\n      {{ role }}\\n    </li>\\n  </ul>\\n</div>\\n\\n<ng-template #loggedOut>\\n  Please login.\\n</ng-template>\\n\"","export default \"<div class=\\\"container p-3\\\">\\n    <div class=\\\"row\\\">\\n        <div class=\\\"col-12\\\">\\n            <form [formGroup]=\\\"form\\\" (submit)=\\\"submit()\\\">\\n                <div class=\\\"card\\\">\\n                    <div class=\\\"card-header\\\"> Nouveau Prospect</div>\\n                    <div class=\\\"card-body\\\">\\n                        <div class=\\\"row\\\">\\n                            <div class=\\\"form-group col-4\\\">\\n                                <div class=\\\"input-group mb-3\\\">\\n                                    <div class=\\\"input-group-prepend\\\">\\n                                        <span class=\\\"input-group-text\\\" id=\\\"inputGroup-sizing-default\\\">Nom</span>\\n                                    </div>\\n                                    <input type=\\\"text\\\" class=\\\"form-control\\\" formControlName=\\\"name\\\">\\n                                </div>\\n                                <span class=\\\"text-danger\\\"\\n                                    *ngIf=\\\"form.controls['name'].touched && form.controls['name'].hasError('required')\\\">\\n                                    Name est obligatoire! </span>\\n                            </div>\\n                            <div class=\\\"form-group col-4\\\">\\n                                <div class=\\\"input-group mb-3\\\">\\n                                    <div class=\\\"input-group-prepend\\\">\\n                                        <span class=\\\"input-group-text\\\" id=\\\"inputGroup-sizing-default\\\">Prenom</span>\\n                                    </div>\\n                                    <input type=\\\"text\\\" class=\\\"form-control\\\" formControlName=\\\"prenom\\\">\\n                                </div>\\n                                <span class=\\\"text-danger\\\"\\n                                    *ngIf=\\\"form.controls['prenom'].touched && form.controls['prenom'].hasError('required')\\\">\\n                                    prenom est obligatoire! </span>\\n                            </div>\\n                        </div>\\n                    </div>\\n\\n                    <div class=\\\"card-body\\\">\\n                        <div class=\\\"row\\\">\\n                            <div class=\\\"form-group col-4\\\">\\n                                <div class=\\\"input-group mb-3\\\">\\n                                    <div class=\\\"input-group-prepend\\\">\\n                                        <span class=\\\"input-group-text\\\" id=\\\"inputGroup-sizing-default\\\">Assigné à</span>\\n                                    </div>\\n                                    <select class=\\\"custom-select\\\" formControlName=\\\"assigne\\\">\\n                                        <option value=\\\"1\\\">Concierge 1</option>\\n                                        <option value=\\\"2\\\">Concierge 2</option>\\n                                        <option value=\\\"3\\\">Concierge 3</option>\\n                                      </select>\\n                                </div>\\n                                <span class=\\\"text-danger\\\"\\n                                    *ngIf=\\\"form.controls['assigne'].touched && form.controls['assigne'].hasError('required')\\\">\\n                                    Le champ Assigne à est obligatoire! </span>\\n                            </div>\\n                        </div>\\n                    </div>\\n\\n                    <div class=\\\"card-body\\\">\\n                        <div class=\\\"row\\\">\\n                            <div class=\\\"form-group col-4\\\">\\n                                <div class=\\\"input-group mb-3\\\">\\n                                    <div class=\\\"input-group-prepend\\\">\\n                                        <span class=\\\"input-group-text\\\" id=\\\"inputGroup-sizing-default\\\">Telephone\\n                                            principal</span>\\n                                    </div>\\n                                    <input type=\\\"text\\\" class=\\\"form-control\\\" formControlName=\\\"telephone\\\">\\n                                </div>\\n                                <span class=\\\"text-danger\\\"\\n                                    *ngIf=\\\"form.controls['telephone'].touched && form.controls['telephone'].hasError('required')\\\">\\n                                    Telephone mobile est obligatoire! </span>\\n                            </div>\\n\\n                            <div class=\\\"form-group col-4\\\">\\n                                <div class=\\\"input-group mb-3\\\">\\n                                    <div class=\\\"input-group-prepend\\\">\\n                                        <span class=\\\"input-group-text\\\" id=\\\"inputGroup-sizing-default\\\">Société</span>\\n                                    </div>\\n                                    <input type=\\\"text\\\" class=\\\"form-control\\\" formControlName=\\\"name\\\">\\n                                </div>\\n                                <span class=\\\"text-danger\\\"\\n                                    *ngIf=\\\"form.controls['telephoneFixe'].touched && form.controls['telephoneFixe'].hasError('required')\\\">\\n                                    Telephone Fixe est obligatoire! </span>\\n                            </div>\\n                        </div>\\n                    </div>\\n\\n                    <div class=\\\"card-body\\\">\\n                        <div class=\\\"row\\\">\\n                            <div class=\\\"form-group col-4\\\">\\n                                <div class=\\\"input-group mb-3\\\">\\n                                    <div class=\\\"input-group-prepend\\\">\\n                                        <span class=\\\"input-group-text\\\" id=\\\"inputGroup-sizing-default\\\"> Telephone Mobile</span>\\n                                    </div>\\n                                    <input type=\\\"text\\\" class=\\\"form-control\\\" formControlName=\\\"email\\\">\\n                                </div>\\n                                <span class=\\\"text-danger\\\"\\n                                    *ngIf=\\\"form.controls['email'].touched && form.controls['email'].hasError('required')\\\">\\n                                    Telephone Mobile est obligatoire! </span>\\n                            </div>\\n                            <div class=\\\"form-group col-4\\\">\\n                                <div class=\\\"input-group mb-3\\\">\\n                                    <div class=\\\"input-group-prepend\\\">\\n                                        <span class=\\\"input-group-text\\\" id=\\\"inputGroup-sizing-default\\\">Fax</span>\\n                                    </div>\\n                                    <input type=\\\"text\\\" class=\\\"form-control\\\" formControlName=\\\"fax\\\">\\n                                </div>\\n                                <span class=\\\"text-danger\\\"\\n                                    *ngIf=\\\"form.controls['fax'].touched && form.controls['fax'].hasError('required')\\\">\\n                                    Fax est obligatoire! </span>\\n                            </div>\\n                        </div>\\n                    </div>\\n\\n                    <div class=\\\"card-body\\\">\\n                        <div class=\\\"row\\\">\\n                            <div class=\\\"form-group col-4\\\">\\n                                <div class=\\\"input-group mb-3\\\">\\n                                    <div class=\\\"input-group-prepend\\\">\\n                                        <span class=\\\"input-group-text\\\" id=\\\"inputGroup-sizing-default\\\">Source du prospect\\n                                            </span>\\n                                    </div>\\n                                    <select class=\\\"custom-select\\\" formControlName=\\\"assigne\\\">\\n                                        <option value=\\\"1\\\"> Prospection Téléphonique</option>\\n                                        <option value=\\\"2\\\">Client existant</option>\\n                                        <option value=\\\"3\\\">Auto Généré</option>\\n                                        <option value=\\\"3\\\">Employé</option>\\n                                        <option value=\\\"3\\\">Partenaire</option>\\n                                        <option value=\\\"3\\\">Rélations puliques</option>\\n                                        <option value=\\\"3\\\">Email direct</option>\\n                                        <option value=\\\"3\\\">Salon</option>\\n                                        <option value=\\\"3\\\">Site Internet</option>\\n                                        <option value=\\\"3\\\">Bouche à Oreilles</option>\\n                                        <option value=\\\"3\\\">Autre</option>\\n                                    </select>\\n                                </div>\\n                            </div>\\n                        </div>\\n                    </div>\\n\\n                    <div class=\\\"card-body\\\">\\n                        <div class=\\\"row\\\">\\n                            <div class=\\\"form-group col-4\\\">\\n                                <div class=\\\"input-group mb-3\\\">\\n                                    <div class=\\\"input-group-prepend\\\">\\n                                        <span class=\\\"input-group-text\\\" id=\\\"inputGroup-sizing-default\\\">Email Principal</span>\\n                                    </div>\\n                                    <input type=\\\"text\\\" class=\\\"form-control\\\">\\n                                </div>\\n                            </div>\\n                            <div class=\\\"form-group col-4\\\">\\n                                <div class=\\\"input-group mb-3\\\">\\n                                    <div class=\\\"input-group-prepend\\\">\\n                                        <span class=\\\"input-group-text\\\" id=\\\"inputGroup-sizing-default\\\">Secteur</span>\\n                                    </div>\\n                                    <select class=\\\"custom-select\\\" formControlName=\\\"assigne\\\">\\n                                        <option value=\\\"1\\\"> Banking</option>\\n                                        <option value=\\\"2\\\">Biotechnologie</option>\\n                                        <option value=\\\"3\\\">Produits chimiques</option>\\n                                        <option value=\\\"3\\\">Communications</option>\\n                                        <option value=\\\"3\\\">Construction</option>\\n                                        <option value=\\\"3\\\">Consulting</option>\\n                                        <option value=\\\"3\\\">Education</option>\\n                                        <option value=\\\"3\\\">Electronique</option>\\n                                        <option value=\\\"3\\\">Energie</option>\\n                                        <option value=\\\"3\\\">Ingénierie</option>\\n                                        <option value=\\\"3\\\">Divertissement</option>\\n                                    </select>\\n                                </div>\\n                            </div>\\n                        </div>\\n                    </div>\\n                    <div class=\\\"card-body\\\">\\n                        <div class=\\\"row\\\">\\n                            <div class=\\\"form-group col-4\\\">\\n                                <div class=\\\"input-group mb-3\\\">\\n                                    <div class=\\\"input-group-prepend\\\">\\n                                        <span class=\\\"input-group-text\\\" id=\\\"inputGroup-sizing-default\\\">Site Web</span>\\n                                    </div>\\n                                    <input type=\\\"text\\\" class=\\\"form-control\\\">\\n                                </div>\\n                            </div>\\n                            <div class=\\\"form-group col-4\\\">\\n                                <div class=\\\"input-group mb-3\\\">\\n                                    <div class=\\\"input-group-prepend\\\">\\n                                        <span class=\\\"input-group-text\\\"\\n                                            id=\\\"inputGroup-sizing-default\\\">Revenu annuel</span>\\n                                    </div>\\n                                    <input type=\\\"text\\\" class=\\\"form-control\\\">\\n                                </div>\\n                            </div>\\n                        </div>\\n                    </div>\\n                    <div class=\\\"card-body\\\">\\n                        <div class=\\\"row\\\">\\n                            <div class=\\\"form-group col-4\\\">\\n                                <div class=\\\"input-group mb-3\\\">\\n                                    <div class=\\\"input-group-prepend\\\">\\n                                        <span class=\\\"input-group-text\\\" id=\\\"inputGroup-sizing-default\\\">\\n                                            Statut</span>\\n                                    </div>\\n                                    <select class=\\\"custom-select\\\" formControlName=\\\"assigne\\\">\\n                                        <option value=\\\"1\\\"> Attente de contact</option>\\n                                        <option value=\\\"2\\\">Froid</option>\\n                                        <option value=\\\"3\\\">A contacter</option>\\n                                        <option value=\\\"3\\\">Coontacté</option>\\n                                        <option value=\\\"3\\\">Chaud</option>\\n                                        <option value=\\\"3\\\">En sommeil</option>\\n                                        <option value=\\\"3\\\">Perdu</option>\\n                                        <option value=\\\"3\\\">Non contacté</option>\\n                                        <option value=\\\"3\\\">Pré qualifié</option>\\n                                        <option value=\\\"3\\\">Qualifié</option>\\n                                        <option value=\\\"3\\\">Brûlant</option>\\n                                    </select>\\n                                </div>\\n                            </div>\\n                            <div class=\\\"form-group col-4\\\">\\n                                <div class=\\\"input-group mb-3\\\">\\n                                    <div class=\\\"input-group-prepend\\\">\\n                                        <span class=\\\"input-group-text\\\" id=\\\"inputGroup-sizing-default\\\">Effectif\\n                                            </span>\\n                                    </div>\\n                                    <input type=\\\"text\\\" class=\\\"form-control\\\">\\n                                </div>\\n                            </div>\\n                        </div>\\n                    </div>\\n                    <div class=\\\"card-body\\\">\\n                        <div class=\\\"row\\\">\\n                            <div class=\\\"form-group col-4\\\">\\n                                <div class=\\\"input-group mb-3\\\">\\n                                    <div class=\\\"input-group-prepend\\\">\\n                                        <span class=\\\"input-group-text\\\" id=\\\"inputGroup-sizing-default\\\">\\n                                            Note</span>\\n                                    </div>\\n                                    <select class=\\\"custom-select\\\">\\n                                        <option value=\\\"1\\\">Acquis</option>\\n                                        <option value=\\\"2\\\">Actif</option>\\n                                        <option value=\\\"3\\\">Echec du marché</option>\\n                                        <option value=\\\"3\\\">Projet annulé</option>\\n                                        <option value=\\\"3\\\">Fermer</option>\\n                                    </select>\\n                                </div>\\n                            </div>\\n                        </div>\\n                    </div>\\n\\n                    <div class=\\\"card-header\\\">Détails de l'adresse</div>\\n                    <div class=\\\"card-body\\\">\\n                        <div class=\\\"row\\\">\\n                            <div class=\\\"form-group col-6\\\">\\n                                <div class=\\\"input-group mb-3\\\">\\n                                    <div class=\\\"input-group-prepend\\\">\\n                                        <span class=\\\"input-group-text\\\" id=\\\"inputGroup-sizing-default\\\">Rue</span>\\n                                    </div>\\n                                    <textarea class=\\\"form-control\\\" id=\\\"exampleFormControlTextarea1\\\" rows=\\\"3\\\" formControlName=\\\"adresse\\\"></textarea>\\n                                </div>\\n                                <span class=\\\"text-danger\\\"\\n                                    *ngIf=\\\"form.controls['adresse'].touched && form.controls['adresse'].hasError('required')\\\">\\n                                    Rue est obligatoire! </span>\\n                            </div>\\n                            <div class=\\\"form-group col-6\\\">\\n                                <div class=\\\"input-group mb-3\\\">\\n                                    <div class=\\\"input-group-prepend\\\">\\n                                        <span class=\\\"input-group-text\\\" id=\\\"inputGroup-sizing-default\\\">Boite Postal</span>\\n                                    </div>\\n                                    <input type=\\\"text\\\" class=\\\"form-control\\\" formControlName=\\\"codePostal\\\">\\n                                </div>\\n                                <span class=\\\"text-danger\\\"\\n                                    *ngIf=\\\"form.controls['codePostal'].touched && form.controls['codePostal'].hasError('required')\\\">\\n                                    Boite Postal est obligatoire! </span>\\n                            </div>\\n                        </div>\\n                    </div>\\n                    <div class=\\\"card-body\\\">\\n                        <div class=\\\"row\\\">\\n                            <div class=\\\"form-group col-6\\\">\\n                                <div class=\\\"input-group mb-3\\\">\\n                                    <div class=\\\"input-group-prepend\\\">\\n                                        <span class=\\\"input-group-text\\\" id=\\\"inputGroup-sizing-default\\\">Code Postal</span>\\n                                    </div>\\n                                    <input type=\\\"text\\\" class=\\\"form-control\\\" formControlName=\\\"codePostal\\\">\\n                                </div>\\n                                <span class=\\\"text-danger\\\"\\n                                    *ngIf=\\\"form.controls['codePostal'].touched && form.controls['codePostal'].hasError('required')\\\">\\n                                    Code Postal est obligatoire! </span>\\n                            </div>\\n                            <div class=\\\"form-group col-6\\\">\\n                                <div class=\\\"input-group mb-3\\\">\\n                                    <div class=\\\"input-group-prepend\\\">\\n                                        <span class=\\\"input-group-text\\\" id=\\\"inputGroup-sizing-default\\\">Ville</span>\\n                                    </div>\\n                                    <input type=\\\"text\\\" class=\\\"form-control\\\" formControlName=\\\"ville\\\">\\n                                </div>\\n                                <span class=\\\"text-danger\\\"\\n                                    *ngIf=\\\"form.controls['ville'].touched && form.controls['ville'].hasError('required')\\\">\\n                                    Ville est obligatoire! </span>\\n                            </div>\\n                        </div>\\n                    </div>\\n                    <div class=\\\"card-body\\\">\\n                        <div class=\\\"row\\\">\\n                            <div class=\\\"form-group col-6\\\">\\n                                <div class=\\\"input-group mb-3\\\">\\n                                    <div class=\\\"input-group-prepend\\\">\\n                                        <span class=\\\"input-group-text\\\" id=\\\"inputGroup-sizing-default\\\">Pays</span>\\n                                    </div>\\n                                    <input type=\\\"text\\\" class=\\\"form-control\\\" formControlName=\\\"pays\\\">\\n                                </div>\\n                                <span class=\\\"text-danger\\\"\\n                                    *ngIf=\\\"form.controls['pays'].touched && form.controls['pays'].hasError('required')\\\">\\n                                    Pays est obligatoire! </span>\\n                            </div>\\n                            <div class=\\\"form-group col-6\\\">\\n                                <div class=\\\"input-group mb-3\\\">\\n                                    <div class=\\\"input-group-prepend\\\">\\n                                        <span class=\\\"input-group-text\\\" id=\\\"inputGroup-sizing-default\\\">Departement</span>\\n                                    </div>\\n                                    <input type=\\\"text\\\" class=\\\"form-control\\\">\\n                                </div>\\n                            </div>\\n                        </div>\\n                    </div>\\n\\n                    <div class=\\\"card-header\\\">Description détaillée</div>\\n                    <div class=\\\"card-body\\\">\\n                        <div class=\\\"row\\\">\\n                            <div class=\\\"form-group col-6\\\">\\n                                <div class=\\\"input-group mb-3\\\">\\n                                    <div class=\\\"input-group-prepend\\\">\\n                                        <span class=\\\"input-group-text\\\" id=\\\"inputGroup-sizing-default\\\">Description</span>\\n                                    </div>\\n                                    <textarea class=\\\"form-control\\\" id=\\\"exampleFormControlTextarea1\\\"></textarea>\\n                                </div>\\n                            </div>\\n                        </div>\\n                    </div>\\n\\n                    <div class=\\\"card-header\\\"></div>\\n                    <div class=\\\"card-body\\\">\\n                        <div class=\\\"row\\\">\\n                            <div class=\\\"col-6\\\">\\n                                <button class=\\\"btn btn-success m-1\\\" \\n                                    type=\\\"submit\\\">Enregistrer</button>\\n                            </div>\\n                            <div class=\\\"col-6\\\">\\n                                <button class=\\\"btn btn-danger\\\" type=\\\"submit\\\">Annuler</button>\\n                            </div>\\n                        </div>\\n                    </div>\\n                </div>\\n            </form>\\n        </div>\\n    </div>\\n</div>\"","export default \"<div class=\\\"col-md-12\\\">\\n  <div class=\\\"card card-container\\\">\\n    <img\\n      id=\\\"profile-img\\\"\\n      src=\\\"//ssl.gstatic.com/accounts/ui/avatar_2x.png\\\"\\n      class=\\\"profile-img-card\\\"\\n    />\\n    <form\\n      *ngIf=\\\"!isSuccessful\\\"\\n      name=\\\"form\\\"\\n      (ngSubmit)=\\\"f.form.valid && onSubmit()\\\"\\n      #f=\\\"ngForm\\\"\\n      novalidate\\n    >\\n      <div class=\\\"form-group\\\">\\n        <label for=\\\"username\\\">Username</label>\\n        <input\\n          type=\\\"text\\\"\\n          class=\\\"form-control\\\"\\n          name=\\\"username\\\"\\n          [(ngModel)]=\\\"form.username\\\"\\n          required\\n          minlength=\\\"3\\\"\\n          maxlength=\\\"20\\\"\\n          #username=\\\"ngModel\\\"\\n        />\\n        <div class=\\\"alert-danger\\\" *ngIf=\\\"f.submitted && username.invalid\\\">\\n          <div *ngIf=\\\"username.errors.required\\\">Username is required</div>\\n          <div *ngIf=\\\"username.errors.minlength\\\">\\n            Username must be at least 3 characters\\n          </div>\\n          <div *ngIf=\\\"username.errors.maxlength\\\">\\n            Username must be at most 20 characters\\n          </div>\\n        </div>\\n      </div>\\n      <div class=\\\"form-group\\\">\\n        <label for=\\\"email\\\">Email</label>\\n        <input\\n          type=\\\"email\\\"\\n          class=\\\"form-control\\\"\\n          name=\\\"email\\\"\\n          [(ngModel)]=\\\"form.email\\\"\\n          required\\n          email\\n          #email=\\\"ngModel\\\"\\n        />\\n        <div class=\\\"alert-danger\\\" *ngIf=\\\"f.submitted && email.invalid\\\">\\n          <div *ngIf=\\\"email.errors.required\\\">Email is required</div>\\n          <div *ngIf=\\\"email.errors.email\\\">\\n            Email must be a valid email address\\n          </div>\\n        </div>\\n      </div>\\n      <div class=\\\"form-group\\\">\\n        <label for=\\\"password\\\">Password</label>\\n        <input\\n          type=\\\"password\\\"\\n          class=\\\"form-control\\\"\\n          name=\\\"password\\\"\\n          [(ngModel)]=\\\"form.password\\\"\\n          required\\n          minlength=\\\"6\\\"\\n          #password=\\\"ngModel\\\"\\n        />\\n        <div class=\\\"alert-danger\\\" *ngIf=\\\"f.submitted && password.invalid\\\">\\n          <div *ngIf=\\\"password.errors.required\\\">Password is required</div>\\n          <div *ngIf=\\\"password.errors.minlength\\\">\\n            Password must be at least 6 characters\\n          </div>\\n        </div>\\n      </div>\\n      <div class=\\\"form-group\\\">\\n        <button class=\\\"btn btn-primary btn-block\\\">Sign Up</button>\\n      </div>\\n\\n      <div class=\\\"alert alert-warning\\\" *ngIf=\\\"f.submitted && isSignUpFailed\\\">\\n        Signup failed!<br />{{ errorMessage }}\\n      </div>\\n    </form>\\n\\n    <div class=\\\"alert alert-success\\\" *ngIf=\\\"isSuccessful\\\">\\n      Your registration is successful!\\n    </div>\\n  </div>\\n</div>\\n\"","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { HttpInterceptor, HttpHandler, HttpRequest } from '@angular/common/http';\n\nimport { TokenStorageService } from '../_services/token-storage.service';\n\nconst TOKEN_HEADER_KEY = 'Authorization';       // for Spring Boot back-end\n// const TOKEN_HEADER_KEY = 'x-access-token';   // for Node.js Express back-end\n\n@Injectable()\nexport class AuthInterceptor implements HttpInterceptor {\n  constructor(private token: TokenStorageService) { }\n\n  intercept(req: HttpRequest<any>, next: HttpHandler) {\n    let authReq = req;\n    const token = this.token.getToken();\n    if (token != null) {\n      // for Spring Boot back-end\n      authReq = req.clone({ headers: req.headers.set(TOKEN_HEADER_KEY, 'Bearer ' + token) });\n\n      // for Node.js Express back-end\n      // authReq = req.clone({ headers: req.headers.set(TOKEN_HEADER_KEY, token) });\n    }\n    return next.handle(authReq);\n  }\n}\n\nexport const authInterceptorProviders = [\n  { provide: HTTP_INTERCEPTORS, useClass: AuthInterceptor, multi: true }\n];\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\nconst AUTH_API = 'http://localhost:8080/api/auth/';\n\nconst httpOptions = {\n  headers: new HttpHeaders({ 'Content-Type': 'application/json' })\n};\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n\n  constructor(private http: HttpClient) { }\n\n  login(credentials): Observable<any> {\n    return this.http.post(AUTH_API + 'signin', {\n      username: credentials.username,\n      password: credentials.password\n    }, httpOptions);\n  }\n\n  register(user): Observable<any> {\n    return this.http.post(AUTH_API + 'signup', {\n      username: user.username,\n      email: user.email,\n      password: user.password\n    }, httpOptions);\n  }\n}\n","import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { Contact } from '../models/contact.model';\n\n\nconst httpOptions = {\n  headers: new HttpHeaders({ 'Content-Type': 'application/json' })\n};\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ContactService {\n\n\n  private URL_CONTACT = 'http://localhost:8080/api/contact';\n\n  private httpOptions = {\n    headers: new HttpHeaders({ 'Content-Type': 'application/json' })\n  };\n\n\n  constructor(private http: HttpClient) { }\n\n  register(contact): Observable<any> {\n\n    return this.http.post(this.URL_CONTACT + '/create', contact,this.httpOptions);\n  }\n\n  allContacts(): Observable<Contact[]> {\n    return this.http.get<Contact[]>(this.URL_CONTACT + '/all');\n  }\n\n\n  findById(contactId: any): Observable<Contact> {\n    const urlTo = `${this.URL_CONTACT}/${contactId}`;\n    return this.http.get<Contact>(urlTo);\n  }\n}\n","import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { Pays } from '../models/pays.model';\n\n\nconst httpOptions = {\n  headers: new HttpHeaders({ 'Content-Type': 'application/json' })\n};\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class PaysService {\n\n  private URL_PAYS = 'http://localhost:8080/api/pays';\n\n  private httpOptions = {\n    headers: new HttpHeaders({ 'Content-Type': 'application/json' })\n  };\n\n\n  constructor(private http: HttpClient) { }\n\n\n  allPays(): Observable<Pays[]> {\n    return this.http.get<Pays[]>(this.URL_PAYS + '/all');\n  }\n\n}\n","import { Injectable } from '@angular/core';\n\nconst TOKEN_KEY = 'auth-token';\nconst USER_KEY = 'auth-user';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TokenStorageService {\n\n  constructor() { }\n\n  signOut() {\n    window.sessionStorage.clear();\n  }\n\n  public saveToken(token: string) {\n    window.sessionStorage.removeItem(TOKEN_KEY);\n    window.sessionStorage.setItem(TOKEN_KEY, token);\n  }\n\n  public getToken(): string {\n    return sessionStorage.getItem(TOKEN_KEY);\n  }\n\n  public saveUser(user) {\n    window.sessionStorage.removeItem(USER_KEY);\n    window.sessionStorage.setItem(USER_KEY, JSON.stringify(user));\n  }\n\n  public getUser() {\n    return JSON.parse(sessionStorage.getItem(USER_KEY));\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\nconst API_URL = 'http://localhost:8080/api/test/';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UserService {\n\n  constructor(private http: HttpClient) { }\n\n  getPublicContent(): Observable<any> {\n    return this.http.get(API_URL + 'all', { responseType: 'text' });\n  }\n\n  getUserBoard(): Observable<any> {\n    return this.http.get(API_URL + 'user', { responseType: 'text' });\n  }\n\n  getModeratorBoard(): Observable<any> {\n    return this.http.get(API_URL + 'mod', { responseType: 'text' });\n  }\n\n  getAdminBoard(): Observable<any> {\n    return this.http.get(API_URL + 'admin', { responseType: 'text' });\n  }\n}\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2FmZmljaGVyLWNvbnRhY3QvYWZmaWNoZXItY29udGFjdC5jb21wb25lbnQuY3NzIn0= */\"","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-afficher-contact',\n  templateUrl: './afficher-contact.component.html',\n  styleUrls: ['./afficher-contact.component.css']\n})\nexport class AfficherContactComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { RegisterComponent } from './register/register.component';\nimport { LoginComponent } from './login/login.component';\nimport { HomeComponent } from './home/home.component';\nimport { ProfileComponent } from './profile/profile.component';\nimport { BoardUserComponent } from './board-user/board-user.component';\nimport { BoardModeratorComponent } from './board-moderator/board-moderator.component';\nimport { BoardAdminComponent } from './board-admin/board-admin.component';\nimport { ContactComponent } from './contact/contact.component';\nimport { ProspectsComponent } from './prospects/prospects.component';\nimport { EntryContactComponent } from './entry-contact/entry-contact.component';\nimport { DisplayContactDetailsComponent } from './display-contact-details/display-contact-details.component';\n\nconst routes: Routes = [\n  { path: 'home', component: HomeComponent },\n  { path: 'login', component: LoginComponent },\n  { path: 'contact', component: ContactComponent},\n  { path: 'contact/update/:contactId', component: ContactComponent},\n  { path: 'm-contacts', component: EntryContactComponent},\n  { path: 'displayContactDetails/:contactId', component: DisplayContactDetailsComponent},\n  { path: 'prospects', component: ProspectsComponent},\n  { path: 'register', component: RegisterComponent },\n  { path: 'profile', component: ProfileComponent },\n  { path: 'user', component: BoardUserComponent },\n  { path: 'mod', component: BoardModeratorComponent },\n  { path: 'admin', component: BoardAdminComponent },\n  { path: '', redirectTo: 'home', pathMatch: 'full' }\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2FwcC5jb21wb25lbnQuY3NzIn0= */\"","import { Component, OnInit } from '@angular/core';\nimport { TokenStorageService } from './_services/token-storage.service';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent implements OnInit {\n  private roles: string[];\n  isLoggedIn = false;\n  showAdminBoard = false;\n  showModeratorBoard = false;\n  username: string;\n\n  constructor(private tokenStorageService: TokenStorageService) { }\n\n  ngOnInit() {\n    this.isLoggedIn = !!this.tokenStorageService.getToken();\n\n    if (this.isLoggedIn) {\n      const user = this.tokenStorageService.getUser();\n      this.roles = user.roles;\n\n      this.showAdminBoard = this.roles.includes('ROLE_ADMIN');\n      this.showModeratorBoard = this.roles.includes('ROLE_MODERATOR');\n\n      this.username = user.username;\n    }\n  }\n\n  logout() {\n    this.tokenStorageService.signOut();\n    window.location.reload();\n  }\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { HttpClientModule } from '@angular/common/http';\n\nimport { AppComponent } from './app.component';\nimport { LoginComponent } from './login/login.component';\nimport { RegisterComponent } from './register/register.component';\nimport { HomeComponent } from './home/home.component';\nimport { BoardAdminComponent } from './board-admin/board-admin.component';\nimport { BoardUserComponent } from './board-user/board-user.component';\nimport { BoardModeratorComponent } from './board-moderator/board-moderator.component';\nimport { ProfileComponent } from './profile/profile.component';\n\nimport { authInterceptorProviders } from './_helpers/auth.interceptor';\nimport { ContactComponent } from './contact/contact.component';\nimport { HeaderComponent } from './header/header.component';\nimport { MenuComponent } from './menu/menu.component';\nimport { ProspectsComponent } from './prospects/prospects.component';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport {MatInputModule} from '@angular/material/input'; \nimport { MatCardModule, MatCheckboxModule, MatDatepickerModule, MatIconModule, MatMenuModule, MatNativeDateModule, MatOptionModule, MatRadioModule, MatSelectModule, MatTableModule, MatTabsModule, MAT_FORM_FIELD_DEFAULT_OPTIONS } from '@angular/material';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatDividerModule} from '@angular/material/divider';\nimport { AddBeneficiaireDialogComponent } from './contact/AddBeneficiaireDialogComponent';\nimport { EntryContactComponent } from './entry-contact/entry-contact.component';\nimport { AfficherContactComponent } from './afficher-contact/afficher-contact.component';\nimport { DisplayContactDetailsComponent } from './display-contact-details/display-contact-details.component';\nimport { FileUploadModule } from 'ng2-file-upload';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    LoginComponent,\n    RegisterComponent,\n    HomeComponent,\n    BoardAdminComponent,\n    BoardUserComponent,\n    BoardModeratorComponent,\n    ProfileComponent,\n    ContactComponent,\n    HeaderComponent,\n    MenuComponent,\n    ProspectsComponent,\n    AddBeneficiaireDialogComponent,\n    EntryContactComponent,\n    AfficherContactComponent,\n    DisplayContactDetailsComponent\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    FormsModule,\n    HttpClientModule,\n    ReactiveFormsModule,\n    BrowserAnimationsModule,\n    MatInputModule,\n    MatButtonModule,\n    MatDividerModule,\n    MatIconModule,\n    MatOptionModule,\n    MatSelectModule,\n    MatRadioModule,\n    MatDatepickerModule,\n    MatNativeDateModule,\n    MatTabsModule,\n    MatCardModule,\n    MatTableModule,\n    MatMenuModule,\n    FileUploadModule,\n    MatCheckboxModule\n  ],\n  entryComponents:[AddBeneficiaireDialogComponent],\n  providers: [authInterceptorProviders,\n    { provide: MAT_FORM_FIELD_DEFAULT_OPTIONS, useValue: { appearance: 'fill' } }],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2JvYXJkLWFkbWluL2JvYXJkLWFkbWluLmNvbXBvbmVudC5jc3MifQ== */\"","import { Component, OnInit } from '@angular/core';\nimport { UserService } from '../_services/user.service';\n\n@Component({\n  selector: 'app-board-admin',\n  templateUrl: './board-admin.component.html',\n  styleUrls: ['./board-admin.component.css']\n})\nexport class BoardAdminComponent implements OnInit {\n  content = '';\n\n  constructor(private userService: UserService) { }\n\n  ngOnInit() {\n    this.userService.getAdminBoard().subscribe(\n      data => {\n        this.content = data;\n      },\n      err => {\n        this.content = JSON.parse(err.error).message;\n      }\n    );\n  }\n}\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2JvYXJkLW1vZGVyYXRvci9ib2FyZC1tb2RlcmF0b3IuY29tcG9uZW50LmNzcyJ9 */\"","import { Component, OnInit } from '@angular/core';\nimport { UserService } from '../_services/user.service';\n\n@Component({\n  selector: 'app-board-moderator',\n  templateUrl: './board-moderator.component.html',\n  styleUrls: ['./board-moderator.component.css']\n})\nexport class BoardModeratorComponent implements OnInit {\n  content: any;\n\n  constructor(private userService: UserService) { }\n\n  ngOnInit() {\n    this.userService.getModeratorBoard().subscribe(\n      data => {\n        this.content = data;\n      },\n      err => {\n        this.content = JSON.parse(err.error).message;\n      }\n    );\n  }\n}\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2JvYXJkLXVzZXIvYm9hcmQtdXNlci5jb21wb25lbnQuY3NzIn0= */\"","import { Component, OnInit } from '@angular/core';\nimport { UserService } from '../_services/user.service';\n\n@Component({\n  selector: 'app-board-user',\n  templateUrl: './board-user.component.html',\n  styleUrls: ['./board-user.component.css']\n})\nexport class BoardUserComponent implements OnInit {\n  content = '';\n\n  constructor(private userService: UserService) { }\n\n  ngOnInit() {\n    this.userService.getUserBoard().subscribe(\n      data => {\n        this.content = data;\n      },\n      err => {\n        this.content = JSON.parse(err.error).message;\n      }\n    );\n  }\n}\n","import { Inject } from '@angular/core';\nimport { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport {MAT_DIALOG_DATA} from '@angular/material';\nimport { ContactService } from '../_services/contact.service';\n\n\n\n@Component({\n  selector: 'add-benificaire',\n  templateUrl: 'add-benificaire-dialog.html',\n})\nexport class AddBeneficiaireDialogComponent implements OnInit{\n    \n    public form: FormGroup;\n    \n\n    constructor(private fb: FormBuilder,\n      @Inject(MAT_DIALOG_DATA) public data: any,\n      public contactService: ContactService) {}\n\n\n    ngOnInit(): void {\n        this.form = this.fb.group({\n            nom: [null, Validators.compose([Validators.required])],\n            prenom: [null, Validators.compose([Validators.required])],\n            assigne: [null, Validators.compose([Validators.required])],\n            adresse: [null, Validators.compose([Validators.required])],\n            codePostal: [null, Validators.compose([Validators.required])],\n            ville: [null, Validators.compose([Validators.required])],\n            pays: [null, Validators.compose([Validators.required])],\n            telephone: [null, Validators.compose([Validators.required])],\n            telephoneFixe: [null, Validators.compose([Validators.required])],\n            email: [null, Validators.compose([Validators.required, Validators.email])],\n            fax: [null, Validators.compose([Validators.required])],\n            siteInternet: [null, Validators.compose([Validators.required])]\n          });\n    }\n\n    addBeneficiaires(){\n      \n    }\n\n    submit() {\n      console.log(\"addBeneficiaires\");\n      this.data.dataKey.beneficiaires.push(this.form.value);\n\n      console.log(\"this.data.dataKey\")\n      console.log(this.data.dataKey)\n\n      this.contactService.register(this.data.dataKey).subscribe(\n        data => {\n          \n        },\n        err => {\n  \n        }\n      );\n      console.log(this.data);\n    }\n}\n","export default \"input, select, mat-option, textarea, mat-label, mat-select {\\n    font-size: 15px !important;\\n  \\n}\\n\\nmat-icon{\\n    font-size: 22px !important;\\n}\\n\\n\\n\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvY29udGFjdC9jb250YWN0LmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7SUFDSSwwQkFBMEI7O0FBRTlCOztBQUVBO0lBQ0ksMEJBQTBCO0FBQzlCIiwiZmlsZSI6InNyYy9hcHAvY29udGFjdC9jb250YWN0LmNvbXBvbmVudC5jc3MiLCJzb3VyY2VzQ29udGVudCI6WyJpbnB1dCwgc2VsZWN0LCBtYXQtb3B0aW9uLCB0ZXh0YXJlYSwgbWF0LWxhYmVsLCBtYXQtc2VsZWN0IHtcbiAgICBmb250LXNpemU6IDE1cHggIWltcG9ydGFudDtcbiAgXG59XG5cbm1hdC1pY29ue1xuICAgIGZvbnQtc2l6ZTogMjJweCAhaW1wb3J0YW50O1xufVxuXG5cbiJdfQ== */\"","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { FormArray, FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\nimport { MatDialog, MatRadioChange } from '@angular/material';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { FileUploader } from 'ng2-file-upload';\nimport { Contact } from '../models/contact.model';\nimport { ContactService } from '../_services/contact.service';\nimport { PaysService } from '../_services/pays.service';\nimport { AddBeneficiaireDialogComponent } from './AddBeneficiaireDialogComponent';\n\n@Component({\n  selector: 'app-contact',\n  templateUrl: './contact.component.html',\n  styleUrls: ['./contact.component.css']\n})\nexport class ContactComponent implements OnInit {\n\n  public form: FormGroup;\n  public contactList: FormArray;\n  public contact: Contact;\n  public uploader: FileUploader;\n  public hasDragOver = false;\n  public typeContact: string;\n  public isParticulier: boolean = true;\n\n\n  @Input()\n  private editmode = false;\n\n  @Input()\n  private url = '';\n\n  @Output()\n  private urlChange = new EventEmitter();\n\n\n  public civilites = [\n    { value: 'Mr', viewValue: 'MR' },\n    { value: 'Mme', viewValue: 'MME' },\n    { value: 'Mlle', viewValue: 'MLLE' }\n  ];\n  allPays: import(\"/Users/Sacko/Documents/Larissa/peniellarissa/peniel-crm-front/src/app/models/pays.model\").Pays[];\n\n  get contactFormGroup() {\n    return this.form.get('contacts') as FormArray;\n  }\n\n  constructor(private fb: FormBuilder,\n    public dialog: MatDialog,\n    public contactService: ContactService,\n    public paysService: PaysService,\n    private route: ActivatedRoute,\n    private router: Router) {\n\n    this.contact = new Contact();\n\n    this.route.params.subscribe(params => {\n      console.log(params);\n      if (params['contactId']) {\n        contactService.findById(params['contactId']).subscribe(\n          data => {\n            this.contact = data;\n          },\n          err => {\n\n          }\n        );\n      }\n    });\n\n    this.uploader = new FileUploader({\n      url: 'http://localhost:4200/upload',\n      disableMultipart: false,\n      autoUpload: true\n    });\n\n    this.uploader.response.subscribe(res => {\n      // Upload returns a JSON with the image ID\n      this.url = 'http://localhost:4200/get/' + JSON.parse(res).id;\n      this.urlChange.emit(this.url);\n    });\n  }\n\n  public fileOver(e: any): void {\n    this.hasDragOver = e;\n  }\n\n  ngOnInit() {\n    this.form = this.fb.group({\n      typeContact: [null, Validators.compose([Validators.required])],\n      nom: [null, Validators.compose([Validators.required])],\n      prenom: [null, Validators.compose([Validators.required])],\n      assigne: [null, Validators.compose([Validators.required])],\n      telephoneMobile1: [null, Validators.compose([Validators.required])],\n      telephoneMobile2: [null, Validators.compose([Validators.required])],\n      telephoneFixe: [null, Validators.compose([Validators.required])],\n      emailPerso: [null, Validators.compose([Validators.required, Validators.email])],\n      emailPro: [null, Validators.compose([Validators.required, Validators.email])],\n      structure: [null, Validators.compose([Validators.required])],\n      activite: [null, Validators.compose([Validators.required])],\n      adressePerso: [null, Validators.compose([Validators.required])],\n      adressePro: [null, Validators.compose([Validators.required])],\n      adressePersoCodePostal: [null, Validators.compose([Validators.required])],\n      adresseProCodePostal: [null, Validators.compose([Validators.required])],\n      adressePersoVille: [null, Validators.compose([Validators.required])],\n      adresseProVille: [null, Validators.compose([Validators.required])],\n      adressePersoPays: [null, Validators.compose([Validators.required])],\n      adresseProPays: [null, Validators.compose([Validators.required])],\n      adressePersoZoneGeo: [null, Validators.compose([Validators.required])],\n      adresseProZoneGeo: [null, Validators.compose([Validators.required])],\n      adressePersoZoneGeoSuite: [null, Validators.compose([Validators.required])],\n      adresseProZoneGeoSuite: [null, Validators.compose([Validators.required])],\n      siteInternet: [null, Validators.compose([Validators.required])],\n      debutAbonnement: [null, Validators.compose([Validators.required])],\n      renAbonnement: [null, Validators.compose([Validators.required])],\n      source: [null, Validators.compose([Validators.required])],\n      typeAbonnement: [null, Validators.compose([Validators.required])],\n      notes: [null, Validators.compose([Validators.required])],\n      siren: [null, Validators.compose([Validators.required])],\n      raisonSociale: [null, Validators.compose([Validators.required])],\n      activitePrincipale: [null, Validators.compose([Validators.required])],\n      naissance: [null, Validators.compose([Validators.required])],\n      nationalite: [null, Validators.compose([Validators.required])],\n      civilite: [null, Validators.compose([Validators.required])],\n      statut: [null, Validators.compose([Validators.required])],\n      fonction: [null, Validators.compose([Validators.required])],\n      abonne: [null, Validators.compose([Validators.required])],\n      situationFamiliale: [null, Validators.compose([Validators.required])],\n      typeHebergementPrefere: [null, Validators.compose([Validators.required])],\n      typeRestaurantPrefere: [null, Validators.compose([Validators.required])],\n      tailleEntreprise: [null, Validators.compose([Validators.required])],\n      contactPrincipalNom: [null, Validators.compose([Validators.required])],\n      contactSecondaireNom: [null, Validators.compose([Validators.required])],\n      contactPrincipalTelephoneMobile: [null, Validators.compose([Validators.required])],\n      contactSecondaireTelephoneMobile: [null, Validators.compose([Validators.required])],\n      contactPrincipalEmail: [null, Validators.compose([Validators.required, Validators.email])],\n      contactSecondaireEmail: [null, Validators.compose([Validators.required, Validators.email])],\n      contacts: this.fb.array([this.createContact()])\n    });\n\n    // set contactlist to this field\n    this.contactList = this.form.get('contacts') as FormArray;\n\n    this.paysService.allPays().subscribe(\n      data => {\n        this.allPays = data;\n      },\n      err => {\n        \n      }\n    );\n  }\n\n  // contact formgroup\n  createContact(): FormGroup {\n    return this.fb.group({\n      //type: ['email', Validators.compose([Validators.required])], // i.e Email, Phone\n      name: [null, Validators.compose([Validators.required])], // i.e. Home, Office\n      prenom: [null, Validators.compose([Validators.required])],\n      telephone: [null, Validators.compose([Validators.required, Validators.required])],\n      email: [null, Validators.compose([Validators.required, Validators.email])]\n    });\n  }\n\n\n  // add a contact form group\n  addBeneficiare() {\n    this.contactList.push(this.createContact());\n  }\n\n  // remove contact from group\n  removeContact(index) {\n    // this.contactList = this.form.get('contacts') as FormArray;\n    this.contactList.removeAt(index);\n  }\n\n  // triggered to change validation of value field type\n  changedFieldType(index) {\n    let validators = null;\n\n    if (this.getContactsFormGroup(index).controls['type'].value === 'email') {\n      validators = Validators.compose([Validators.required, Validators.email]);\n    } else {\n      validators = Validators.compose([\n        Validators.required,\n        Validators.pattern(new RegExp('^\\\\+[0-9]?()[0-9](\\\\d[0-9]{9})$')) // pattern for validating international phone number\n      ]);\n    }\n\n    this.getContactsFormGroup(index).controls['value'].setValidators(\n      validators\n    );\n\n    this.getContactsFormGroup(index).controls['value'].updateValueAndValidity();\n  }\n\n  // get the formgroup under contacts form array\n  getContactsFormGroup(index): FormGroup {\n    // this.contactList = this.form.get('contacts') as FormArray;\n    const formGroup = this.contactList.controls[index] as FormGroup;\n    return formGroup;\n  }\n\n  // method triggered when form is submitted\n  submit() {\n    console.log(this.form.value);\n  }\n\n  openAddBeneficiareDialog() {\n    //const dialogRef = this.dialog.open(AddBeneficiaireDialogComponent);\n\n    const dialogRef = this.dialog.open(AddBeneficiaireDialogComponent, {\n      //width: '330px',\n      //height: '400px',\n      data: {\n        dataKey: this.contact\n      }\n    });\n\n    dialogRef.afterClosed().subscribe(result => {\n      console.log(\"result\");\n      console.log(result);\n    });\n  }\n\n  addBeneficiaires() {\n\n  }\n\n\n  sauvegarderContact() {\n    console.log(\"display contact....\");\n    this.form.value.id = this.contact.id;\n    this.contactService.register(this.form.value).subscribe(\n      data => {\n        this.router.navigate(['/m-contacts']);\n      },\n      err => {\n\n      }\n    );\n    return this.form.value;\n  }\n\n  cancel() {\n    this.router.navigate(['/m-contacts']);\n  }\n\n  typeContactChoosed($event: MatRadioChange) {\n    console.log($event.source.name, $event.value);\n\n    if ($event.value === 'PARTICULIER') {\n      this.isParticulier = true;\n    }\n    else if ($event.value === 'SOCIETE') {\n      this.isParticulier = false;\n    }\n\n    this.contact = new Contact();\n  }\n\n}\n\n\n","export default \"input.mat-input-element {\\n    font-size: 3em;\\n}\\n\\n.td-font-weight{\\n    font-weight:bold;\\n}\\n\\ninput, td{\\n    font-size: 15px !important;\\n  \\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvZGlzcGxheS1jb250YWN0LWRldGFpbHMvZGlzcGxheS1jb250YWN0LWRldGFpbHMuY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtJQUNJLGNBQWM7QUFDbEI7O0FBRUE7SUFDSSxnQkFBZ0I7QUFDcEI7O0FBRUE7SUFDSSwwQkFBMEI7O0FBRTlCIiwiZmlsZSI6InNyYy9hcHAvZGlzcGxheS1jb250YWN0LWRldGFpbHMvZGlzcGxheS1jb250YWN0LWRldGFpbHMuY29tcG9uZW50LmNzcyIsInNvdXJjZXNDb250ZW50IjpbImlucHV0Lm1hdC1pbnB1dC1lbGVtZW50IHtcbiAgICBmb250LXNpemU6IDNlbTtcbn1cblxuLnRkLWZvbnQtd2VpZ2h0e1xuICAgIGZvbnQtd2VpZ2h0OmJvbGQ7XG59XG5cbmlucHV0LCB0ZHtcbiAgICBmb250LXNpemU6IDE1cHggIWltcG9ydGFudDtcbiAgXG59Il19 */\"","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { Contact } from '../models/contact.model';\nimport { ContactService } from '../_services/contact.service';\n\n@Component({\n  selector: 'app-display-contact-details',\n  templateUrl: './display-contact-details.component.html',\n  styleUrls: ['./display-contact-details.component.css']\n})\nexport class DisplayContactDetailsComponent implements OnInit {\n\n  contact: Contact;\n  isParticulier: boolean;\n\n  constructor(private route: ActivatedRoute,\n              private contactService:ContactService,\n              private router: Router) { \n                \n    this.route.params.subscribe(params => {\n      console.log(params);\n      if (params['contactId']) { \n        contactService.findById(params['contactId']).subscribe(\n          data => {\n            this.contact = data;\n            this.isParticulier = (this.contact[\"typeContact\"]===\"PARTICULIER\"?true:false);\n          },\n          err => {\n            \n          }\n        );\n      }\n    });\n  }\n\n  ngOnInit() {\n\n  }\n\n  updateContact(){\n    this.router.navigate(['/contact/update', this.contact.id]);\n  }\n\n  cancel(){\n    this.router.navigate(['/m-contacts']);\n  }\n\n}\n","export default \"\\n    .table tr.active td {  \\n      background-color:#48da24 !important;  \\n      color: white;  \\n    }   \\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvZW50cnktY29udGFjdC9lbnRyeS1jb250YWN0LmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtJQUNJO01BQ0UsbUNBQW1DO01BQ25DLFlBQVk7SUFDZCIsImZpbGUiOiJzcmMvYXBwL2VudHJ5LWNvbnRhY3QvZW50cnktY29udGFjdC5jb21wb25lbnQuY3NzIiwic291cmNlc0NvbnRlbnQiOlsiXG4gICAgLnRhYmxlIHRyLmFjdGl2ZSB0ZCB7ICBcbiAgICAgIGJhY2tncm91bmQtY29sb3I6IzQ4ZGEyNCAhaW1wb3J0YW50OyAgXG4gICAgICBjb2xvcjogd2hpdGU7ICBcbiAgICB9ICAgIl19 */\"","import { trigger, state, style, transition, animate } from '@angular/animations';\nimport { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { Contact } from '../models/contact.model';\nimport { ContactService } from '../_services/contact.service';\n\n@Component({\n  selector: 'app-entry-contact',\n  templateUrl: './entry-contact.component.html',\n  styleUrls: ['./entry-contact.component.css']\n})\nexport class EntryContactComponent implements OnInit {\n\n  public contacts: Contact[];\n  HighlightRow : Number;  \n  Employee : any;  \n  ClickedRow:any;  \n\n  constructor(private contactService:ContactService, \n              private router: Router) {\n    this.ClickedRow = function(index,contactId){  \n      this.HighlightRow = index;  \n      this.router.navigate(['/displayContactDetails', contactId]);\n    } \n  }\n\n  ngOnInit() {\n    this.contactService.allContacts().subscribe(\n      data => {\n        this.contacts = data;\n      },\n      err => {\n        \n      }\n    );\n\n  }\n\n}","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2hlYWRlci9oZWFkZXIuY29tcG9uZW50LmNzcyJ9 */\"","import { Component, OnInit } from '@angular/core';\nimport { TokenStorageService } from '../_services/token-storage.service';\n\n@Component({\n  selector: 'app-header',\n  templateUrl: './header.component.html',\n  styleUrls: ['./header.component.css']\n})\nexport class HeaderComponent implements OnInit {\n\n  private roles: string[];\n  isLoggedIn = false;\n  showAdminBoard = false;\n  showModeratorBoard = false;\n  username: string;\n\n  constructor(private tokenStorageService: TokenStorageService) { }\n\n  ngOnInit() {\n    this.isLoggedIn = !!this.tokenStorageService.getToken();\n\n    if (this.isLoggedIn) {\n      const user = this.tokenStorageService.getUser();\n      this.roles = user.roles;\n\n      this.showAdminBoard = this.roles.includes('ROLE_ADMIN');\n      this.showModeratorBoard = this.roles.includes('ROLE_MODERATOR');\n\n      this.username = user.username;\n    }\n  }\n\n  logout() {\n    this.tokenStorageService.signOut();\n    //window.location.reload();\n  }\n}\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2hvbWUvaG9tZS5jb21wb25lbnQuY3NzIn0= */\"","import { Component, OnInit } from '@angular/core';\nimport { UserService } from '../_services/user.service';\n\n@Component({\n  selector: 'app-home',\n  templateUrl: './home.component.html',\n  styleUrls: ['./home.component.css']\n})\nexport class HomeComponent implements OnInit {\n  content: string;\n\n  constructor(private userService: UserService) { }\n\n  ngOnInit() {\n    this.userService.getPublicContent().subscribe(\n      data => {\n        this.content = data;\n      },\n      err => {\n        this.content = JSON.parse(err.error).message;\n      }\n    );\n  }\n}\n","export default \"label {\\n  display: block;\\n  margin-top: 10px;\\n}\\n\\n.card-container.card {\\n  max-width: 400px !important;\\n  padding: 40px 40px;\\n}\\n\\n.card {\\n  background-color: #f7f7f7;\\n  padding: 20px 25px 30px;\\n  margin: 0 auto 25px;\\n  margin-top: 50px;\\n  border-radius: 2px;\\n  box-shadow: 0px 2px 2px rgba(0, 0, 0, 0.3);\\n}\\n\\n.profile-img-card {\\n  width: 96px;\\n  height: 96px;\\n  margin: 0 auto 10px;\\n  display: block;\\n  border-radius: 50%;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvbG9naW4vbG9naW4uY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNFLGNBQWM7RUFDZCxnQkFBZ0I7QUFDbEI7O0FBRUE7RUFDRSwyQkFBMkI7RUFDM0Isa0JBQWtCO0FBQ3BCOztBQUVBO0VBQ0UseUJBQXlCO0VBQ3pCLHVCQUF1QjtFQUN2QixtQkFBbUI7RUFDbkIsZ0JBQWdCO0VBR2hCLGtCQUFrQjtFQUdsQiwwQ0FBMEM7QUFDNUM7O0FBRUE7RUFDRSxXQUFXO0VBQ1gsWUFBWTtFQUNaLG1CQUFtQjtFQUNuQixjQUFjO0VBR2Qsa0JBQWtCO0FBQ3BCIiwiZmlsZSI6InNyYy9hcHAvbG9naW4vbG9naW4uY29tcG9uZW50LmNzcyIsInNvdXJjZXNDb250ZW50IjpbImxhYmVsIHtcbiAgZGlzcGxheTogYmxvY2s7XG4gIG1hcmdpbi10b3A6IDEwcHg7XG59XG5cbi5jYXJkLWNvbnRhaW5lci5jYXJkIHtcbiAgbWF4LXdpZHRoOiA0MDBweCAhaW1wb3J0YW50O1xuICBwYWRkaW5nOiA0MHB4IDQwcHg7XG59XG5cbi5jYXJkIHtcbiAgYmFja2dyb3VuZC1jb2xvcjogI2Y3ZjdmNztcbiAgcGFkZGluZzogMjBweCAyNXB4IDMwcHg7XG4gIG1hcmdpbjogMCBhdXRvIDI1cHg7XG4gIG1hcmdpbi10b3A6IDUwcHg7XG4gIC1tb3otYm9yZGVyLXJhZGl1czogMnB4O1xuICAtd2Via2l0LWJvcmRlci1yYWRpdXM6IDJweDtcbiAgYm9yZGVyLXJhZGl1czogMnB4O1xuICAtbW96LWJveC1zaGFkb3c6IDBweCAycHggMnB4IHJnYmEoMCwgMCwgMCwgMC4zKTtcbiAgLXdlYmtpdC1ib3gtc2hhZG93OiAwcHggMnB4IDJweCByZ2JhKDAsIDAsIDAsIDAuMyk7XG4gIGJveC1zaGFkb3c6IDBweCAycHggMnB4IHJnYmEoMCwgMCwgMCwgMC4zKTtcbn1cblxuLnByb2ZpbGUtaW1nLWNhcmQge1xuICB3aWR0aDogOTZweDtcbiAgaGVpZ2h0OiA5NnB4O1xuICBtYXJnaW46IDAgYXV0byAxMHB4O1xuICBkaXNwbGF5OiBibG9jaztcbiAgLW1vei1ib3JkZXItcmFkaXVzOiA1MCU7XG4gIC13ZWJraXQtYm9yZGVyLXJhZGl1czogNTAlO1xuICBib3JkZXItcmFkaXVzOiA1MCU7XG59Il19 */\"","import { Component, OnInit } from '@angular/core';\nimport { AuthService } from '../_services/auth.service';\nimport { TokenStorageService } from '../_services/token-storage.service';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})\nexport class LoginComponent implements OnInit {\n  form: any = {};\n  isLoggedIn = false;\n  isLoginFailed = false;\n  errorMessage = '';\n  roles: string[] = [];\n\n  constructor(private authService: AuthService, private tokenStorage: TokenStorageService) { }\n\n  ngOnInit() {\n    if (this.tokenStorage.getToken()) {\n      this.isLoggedIn = true;\n      this.roles = this.tokenStorage.getUser().roles;\n    }\n  }\n\n  onSubmit() {\n    this.authService.login(this.form).subscribe(\n      data => {\n        this.tokenStorage.saveToken(data.accessToken);\n        this.tokenStorage.saveUser(data);\n\n        this.isLoginFailed = false;\n        this.isLoggedIn = true;\n        this.roles = this.tokenStorage.getUser().roles;\n        this.reloadPage();\n      },\n      err => {\n        this.errorMessage = err.error.message;\n        this.isLoginFailed = true;\n      }\n    );\n  }\n\n  reloadPage() {\n    window.location.reload();\n  }\n}\n","export default \"body, .btn {font-size:0.75em;font-family: Arial, Helvetica, sans-serif}\\n.card-body{\\n    font-size:0.9em;\\n    font-family: Arial, Helvetica, sans-serif; \\n    line-height: 0.2em; \\n    padding-top: 1em;\\n    height: 3em;\\n    padding-left: 26%;\\n    width: 15em\\n}\\n.menu{position:relative; left: -0.05em;}\\na{margin-left: 0.2em;}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvbWVudS9tZW51LmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsWUFBWSxnQkFBZ0IsQ0FBQyx5Q0FBeUM7QUFDdEU7SUFDSSxlQUFlO0lBQ2YseUNBQXlDO0lBQ3pDLGtCQUFrQjtJQUNsQixnQkFBZ0I7SUFDaEIsV0FBVztJQUNYLGlCQUFpQjtJQUNqQjtBQUNKO0FBQ0EsTUFBTSxpQkFBaUIsRUFBRSxhQUFhLENBQUM7QUFDdkMsRUFBRSxrQkFBa0IsQ0FBQyIsImZpbGUiOiJzcmMvYXBwL21lbnUvbWVudS5jb21wb25lbnQuY3NzIiwic291cmNlc0NvbnRlbnQiOlsiYm9keSwgLmJ0biB7Zm9udC1zaXplOjAuNzVlbTtmb250LWZhbWlseTogQXJpYWwsIEhlbHZldGljYSwgc2Fucy1zZXJpZn1cbi5jYXJkLWJvZHl7XG4gICAgZm9udC1zaXplOjAuOWVtO1xuICAgIGZvbnQtZmFtaWx5OiBBcmlhbCwgSGVsdmV0aWNhLCBzYW5zLXNlcmlmOyBcbiAgICBsaW5lLWhlaWdodDogMC4yZW07IFxuICAgIHBhZGRpbmctdG9wOiAxZW07XG4gICAgaGVpZ2h0OiAzZW07XG4gICAgcGFkZGluZy1sZWZ0OiAyNiU7XG4gICAgd2lkdGg6IDE1ZW1cbn1cbi5tZW51e3Bvc2l0aW9uOnJlbGF0aXZlOyBsZWZ0OiAtMC4wNWVtO31cbmF7bWFyZ2luLWxlZnQ6IDAuMmVtO30iXX0= */\"","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-menu',\n  templateUrl: './menu.component.html',\n  styleUrls: ['./menu.component.css']\n})\nexport class MenuComponent implements OnInit {\n\n  menus : any;\n\n  constructor() { \n\n    this.menus = {\n      contact: true,\n      mesTaches: true,\n      mesNotifications: true,\n      comptabilite: true,\n      monCompte: true,\n    }\n  }\n\n  ngOnInit() {\n  }\n\n  public closeAllCollapsedWithout(key: String): any{\n    for(var menuKey in this.menus){\n      if(menuKey === key){\n        this.menus[menuKey] = true;\n      }\n      else{\n        this.menus[menuKey] = false;\n      }\n    }\n    \n  }\n\n}\n","export class Contact {\n\n  raisonSociale: String;\n  siren: String;\n  activitePrincipale: String;\n  typePrestation: String;\n  typeContact: String;\n  id?: String;\n  nom: string;\n  prenom;\n  telephoneMobile: String;\n  siteInternet: String;\n  creationDate?: Date;\n  assigne: string;\n  telephoneFixe: string;\n  telephoneMobile1: string;\n  telephoneMobile2: string;\n  emailPerso: string;\n  emailPro: string;\n  structure: string;\n  activite: string;\n  adressePerso: string;\n  adressePro: string;\n  adressePersoCodePostal: string;\n  adresseProCodePostal: string;\n  adressePersoVille: string;\n  adresseProVille: string;\n  adressePersoPays: string;\n  adresseProPays: string;\n  adressePersoZoneGeo: string;\n  adresseProZoneGeo: string;\n  adressePersoZoneGeoSuite: string;\n  adresseProZoneGeoSuite: string;\n  debutAbonnement: string;\n  renAbonnement: string;\n  source: string;\n  typeAbonnement: string;\n  notes: string;\n  naissance: string;\n  nationalite: string;\n  civilite: string;\n  statut: string;\n  fonction: string;\n  situationFamiliale: string;\n  abonne: string;\n  typeHebergementPrefere: string;\n  typeRestaurantPrefere: string;\n  tailleEntreprise: string;\n  contactPrincipalNom: string;\n  contactPrincipalTelephoneMobile: string;\n  contactSecondaireTelephoneMobile: string;\n  contactPrincipalEmail: string;\n  contactSecondaireEmail: string;\n  beneficiaires: []\n}","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3Byb2ZpbGUvcHJvZmlsZS5jb21wb25lbnQuY3NzIn0= */\"","import { Component, OnInit } from '@angular/core';\n\nimport { TokenStorageService } from '../_services/token-storage.service';\n\n@Component({\n  selector: 'app-profile',\n  templateUrl: './profile.component.html',\n  styleUrls: ['./profile.component.css']\n})\nexport class ProfileComponent implements OnInit {\n  currentUser: any;\n\n  constructor(private token: TokenStorageService) { }\n\n  ngOnInit() {\n    this.currentUser = this.token.getUser();\n  }\n}\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3Byb3NwZWN0cy9wcm9zcGVjdHMuY29tcG9uZW50LmNzcyJ9 */\"","import { Component, OnInit } from '@angular/core';\nimport { FormGroup, FormArray, FormBuilder, Validators } from '@angular/forms';\n\n@Component({\n  selector: 'app-prospects',\n  templateUrl: './prospects.component.html',\n  styleUrls: ['./prospects.component.css']\n})\nexport class ProspectsComponent implements OnInit {\n\n  public form: FormGroup;\n  public contactList: FormArray;\n\n  // returns all form groups under contacts\n  get contactFormGroup() {\n    return this.form.get('contacts') as FormArray;\n  }\n\n  constructor(private fb: FormBuilder) {}\n\n  ngOnInit() {\n    this.form = this.fb.group({\n      name: [null, Validators.compose([Validators.required])],\n      prenom: [null, Validators.compose([Validators.required])],\n      assigne: [null, Validators.compose([Validators.required])],\n      adresse: [null, Validators.compose([Validators.required])],\n      codePostal: [null, Validators.compose([Validators.required])],\n      ville: [null, Validators.compose([Validators.required])],\n      pays: [null, Validators.compose([Validators.required])],\n      telephone: [null, Validators.compose([Validators.required])],\n      telephoneFixe: [null, Validators.compose([Validators.required])],\n      email: [null, Validators.compose([Validators.required])],\n      fax: [null, Validators.compose([Validators.required])],\n      siteInternet: [null, Validators.compose([Validators.required])],\n      contacts: this.fb.array([this.createContact()])\n    });\n\n    // set contactlist to this field\n    this.contactList = this.form.get('contacts') as FormArray;\n  }\n\n  // contact formgroup\n  createContact(): FormGroup {\n    return this.fb.group({\n      //type: ['email', Validators.compose([Validators.required])], // i.e Email, Phone\n      name: [null, Validators.compose([Validators.required])], // i.e. Home, Office\n      prenom: [null, Validators.compose([Validators.required])],\n      telephone: [null, Validators.compose([Validators.required, Validators.required])],\n      email: [null, Validators.compose([Validators.required, Validators.email])]\n    });\n  }\n\n  \n  // add a contact form group\n  addBeneficiare(){\n    this.contactList.push(this.createContact());\n  }\n\n  // remove contact from group\n  removeContact(index) {\n    // this.contactList = this.form.get('contacts') as FormArray;\n    this.contactList.removeAt(index);\n  }\n\n  // triggered to change validation of value field type\n  changedFieldType(index) {\n    let validators = null;\n\n    if (this.getContactsFormGroup(index).controls['type'].value === 'email') {\n      validators = Validators.compose([Validators.required, Validators.email]);\n    } else {\n      validators = Validators.compose([\n        Validators.required,\n        Validators.pattern(new RegExp('^\\\\+[0-9]?()[0-9](\\\\d[0-9]{9})$')) // pattern for validating international phone number\n      ]);\n    }\n\n    this.getContactsFormGroup(index).controls['value'].setValidators(\n      validators\n    );\n\n    this.getContactsFormGroup(index).controls['value'].updateValueAndValidity();\n  }\n\n  // get the formgroup under contacts form array\n  getContactsFormGroup(index): FormGroup {\n    // this.contactList = this.form.get('contacts') as FormArray;\n    const formGroup = this.contactList.controls[index] as FormGroup;\n    return formGroup;\n  }\n\n  // method triggered when form is submitted\n  submit() {\n    console.log(this.form.value);\n  }\n}\n","export default \"label {\\n  display: block;\\n  margin-top: 10px;\\n}\\n\\n.card-container.card {\\n  max-width: 400px !important;\\n  padding: 40px 40px;\\n}\\n\\n.card {\\n  background-color: #f7f7f7;\\n  padding: 20px 25px 30px;\\n  margin: 0 auto 25px;\\n  margin-top: 50px;\\n  border-radius: 2px;\\n  box-shadow: 0px 2px 2px rgba(0, 0, 0, 0.3);\\n}\\n\\n.profile-img-card {\\n  width: 96px;\\n  height: 96px;\\n  margin: 0 auto 10px;\\n  display: block;\\n  border-radius: 50%;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvcmVnaXN0ZXIvcmVnaXN0ZXIuY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNFLGNBQWM7RUFDZCxnQkFBZ0I7QUFDbEI7O0FBRUE7RUFDRSwyQkFBMkI7RUFDM0Isa0JBQWtCO0FBQ3BCOztBQUVBO0VBQ0UseUJBQXlCO0VBQ3pCLHVCQUF1QjtFQUN2QixtQkFBbUI7RUFDbkIsZ0JBQWdCO0VBR2hCLGtCQUFrQjtFQUdsQiwwQ0FBMEM7QUFDNUM7O0FBRUE7RUFDRSxXQUFXO0VBQ1gsWUFBWTtFQUNaLG1CQUFtQjtFQUNuQixjQUFjO0VBR2Qsa0JBQWtCO0FBQ3BCIiwiZmlsZSI6InNyYy9hcHAvcmVnaXN0ZXIvcmVnaXN0ZXIuY29tcG9uZW50LmNzcyIsInNvdXJjZXNDb250ZW50IjpbImxhYmVsIHtcbiAgZGlzcGxheTogYmxvY2s7XG4gIG1hcmdpbi10b3A6IDEwcHg7XG59XG5cbi5jYXJkLWNvbnRhaW5lci5jYXJkIHtcbiAgbWF4LXdpZHRoOiA0MDBweCAhaW1wb3J0YW50O1xuICBwYWRkaW5nOiA0MHB4IDQwcHg7XG59XG5cbi5jYXJkIHtcbiAgYmFja2dyb3VuZC1jb2xvcjogI2Y3ZjdmNztcbiAgcGFkZGluZzogMjBweCAyNXB4IDMwcHg7XG4gIG1hcmdpbjogMCBhdXRvIDI1cHg7XG4gIG1hcmdpbi10b3A6IDUwcHg7XG4gIC1tb3otYm9yZGVyLXJhZGl1czogMnB4O1xuICAtd2Via2l0LWJvcmRlci1yYWRpdXM6IDJweDtcbiAgYm9yZGVyLXJhZGl1czogMnB4O1xuICAtbW96LWJveC1zaGFkb3c6IDBweCAycHggMnB4IHJnYmEoMCwgMCwgMCwgMC4zKTtcbiAgLXdlYmtpdC1ib3gtc2hhZG93OiAwcHggMnB4IDJweCByZ2JhKDAsIDAsIDAsIDAuMyk7XG4gIGJveC1zaGFkb3c6IDBweCAycHggMnB4IHJnYmEoMCwgMCwgMCwgMC4zKTtcbn1cblxuLnByb2ZpbGUtaW1nLWNhcmQge1xuICB3aWR0aDogOTZweDtcbiAgaGVpZ2h0OiA5NnB4O1xuICBtYXJnaW46IDAgYXV0byAxMHB4O1xuICBkaXNwbGF5OiBibG9jaztcbiAgLW1vei1ib3JkZXItcmFkaXVzOiA1MCU7XG4gIC13ZWJraXQtYm9yZGVyLXJhZGl1czogNTAlO1xuICBib3JkZXItcmFkaXVzOiA1MCU7XG59Il19 */\"","import { Component, OnInit } from '@angular/core';\nimport { AuthService } from '../_services/auth.service';\n\n@Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.css']\n})\nexport class RegisterComponent implements OnInit {\n  form: any = {};\n  isSuccessful = false;\n  isSignUpFailed = false;\n  errorMessage = '';\n\n  constructor(private authService: AuthService) { }\n\n  ngOnInit() {\n  }\n\n  onSubmit() {\n    this.authService.register(this.form).subscribe(\n      data => {\n        console.log(data);\n        this.isSuccessful = true;\n        this.isSignUpFailed = false;\n      },\n      err => {\n        this.errorMessage = err.error.message;\n        this.isSignUpFailed = true;\n      }\n    );\n  }\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import 'hammerjs';\nimport { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"],"sourceRoot":"webpack:///"}